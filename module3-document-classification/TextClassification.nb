(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1304777,      24702]
NotebookOptionsPosition[   1299518,      24605]
NotebookOutlinePosition[   1299892,      24621]
CellTagsIndexPosition[   1299849,      24618]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"SetDirectory", "[", 
  "\"\<C:\\\\Users\\\\soobt\\\\Documents\\\\GitHub\\\\DS-Unit-4-Sprint-1-NLP\\\
\\module3-document-classification\\\\data\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.781458594097454*^9, 3.781458608095212*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"1284b069-d40e-4a45-90e2-02dea9636552"],

Cell[BoxData["\<\"C:\\\\Users\\\\soobt\\\\Documents\\\\GitHub\\\\DS-Unit-4-\
Sprint-1-NLP\\\\module3-document-classification\\\\data\"\>"], "Output",
 CellChangeTimes->{3.781458608475271*^9, 3.781465528488595*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"bfb78ac1-771d-4771-b279-990c38e16920"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"train", "=", 
   RowBox[{"Import", "[", "\"\<train.csv\>\"", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.781458618241082*^9, 3.781458657005975*^9}, {
  3.7814655791602387`*^9, 3.7814655803242087`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"eb92612f-9617-4b07-8e9e-2f931a65b015"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MarC", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"Rule", "@@@", 
     RowBox[{"train", "[", 
      RowBox[{"[", 
       RowBox[{
        RowBox[{"2", ";;", "All"}], ",", 
        RowBox[{"2", ";;", "3"}]}], "]"}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Method", "\[Rule]", "\"\<Markov\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.78145866224996*^9, 3.7814586860961637`*^9}, {
  3.7814587204493093`*^9, 3.7814587886546106`*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"0518d1fc-ffb5-408a-8f56-8ea96034e85f"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Text\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "1", "2", "3", "4"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Text\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "1", "2", "3", "4"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Markov\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["2586", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 2586, "ClassNumber" -> 4, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Text"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Text"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], "Fill" -> 
             "", "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], "Type" -> 
             "Text", "Version" -> {12., 0}, "ID" -> 7263179337424669307]], 
           MachineLearning`MLProcessor["ToLowerCase", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 8362939175913313252, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["RemoveDiacritics", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 1602110507922425163, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["TextToNominalSequence", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Forbidden", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Tokens" -> {{
               " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", "(", 
                ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", "{", "}", 
                "|", "\\", ">", "/", "~", "`", "#", "^"}, {
               ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", ":P",
                 ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
               "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
             "Version" -> {12., 0}, "ID" -> 7774961058889587341, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor[
           "NoninvertibleIntegerEncodeNominalSequence", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
             MachineLearning`SortedHashAssociation[
               Association["KeyHashes" -> CompressedData["
1:eJxUnTvOLklznMfQErQBeXIE1L27lyBAlpZAgwAtGuSmuEvFE/29ka0BiZn/
5Hn7Ul2V18jI//Ev//5///W//uc///zHf/vnn3/+z7/9x3/+7/+u//hfzxht
zLtdT7/76c+c/Sfoz7PPc/Y67bnnsz+CeV1Hf/Ve17zmbBGsuz3P9bQu8T77
LsFqfc0+zlr96s+JQHfdj25096VbtVyqPetq47rXc81H/94R3J37L13zjOdp
K4J97nY/uvEc69q7frHnfc39zD3XunXFCOacZ8xznrX1yHcJ9JNHL3P362q6
4u+put5t6s/GnLutPT6CM1Zf+94St37fJwJuvse45rlaW3NEsGbb+xn7LP2l
s+4IBpfWQt3LT/x7Kl21d926na5b9dlKoIVYWq9rsp6rzQi6vsWzH30WLYpW
7CfQa7XedZ/V1q3Fz6W0rm08fUxupdWvX/CQWq+9tMxanDzu1eZ9j9O1Ito+
WqGf4NzrXGP3M87gek8J+rznvPp8tDJ3vmA/eyy9o3bWmEsfvy41n6Nnup5x
X+2e2QwS6N7abOfaS7v4zvc44zrs35svP9bM99CK3/vW82jVW9Mui0AP2x7t
rsX76eEimLe2UBv3ea51Pmu1+SKX/v6zR+Pk/ATrHtoP2tZndz3Yys116aOv
PrUR9n1O7ZI1n/saa+vMXL2d+rTaJNduj0RjLO2HHoEOQtO2unnz0e/sq6VT
PJuO2a2nG+Opp2pNC6w/ey59rn6yVvMsvYVOtJbs6EWyunNpSXTK9EWG9k99
D+1KrZ0+iDb81pYsgZZBJ+TReV1HmynvoQ06p06r9tZpesU81dD+0fV04nSi
9RGyrwZvqHOljahXvGrD6cA2VorNo5XaJdBqcErm1Ae4nvpQXjpdQWdJeqmd
j0Arqt1wjnabnjjfY/SGFtt8FSmVk9Vl1dkDTadcT/UVXNYM2iPax9r3P4Fe
Qd9ITyx1efiKEehBdTL1oFKB0opZRBSPdJ62Fs/UardrFaUnhv7ymeyfpwTa
M9ryOuxSG9p4P4GWR6fyQmfcS7fPsrfr1lmS7taZblrQ7KvGK2oFu3aXlOL+
PZX0+iPVqe+ITZDB6BHoYMg6sLZ6D33KCHTutSr6KmcfLdqKQCdyc5gu1Nx1
zwikYCavI20pu3PVL3QCt/5Qy6fPrlWIoDd9QW0ofdxrn5Gbsw2eZ+qAardI
842PoEk9aL/fk62d97iPHohNrfMk7dTqUjqy+liNQ6C/ku/BGh59vVtPIM3+
udS1eTktt7b61a5aEm2OZ2nXSqFJP8zsdv09PokOTuOcXPlQ2md6VK++rK2U
Wi51bi2qjG3TnhrPiNluUobaI9L4+gA6grW60kZ6SqmjR/pEezc314vvhoWX
rtQP6tMevZSUq/bnpWeSio9g7OtuMk8DA/DMVQJpLP31W8pPBnnWPWRwLh1q
fTspTi3zT7BlqrUNj8x8H/o4pwToVC3uate1yqrpsrKwB6P6zHZfsVHaIvIZ
9FC39pw+WCwOxk/3nDrKUpm3jlYE0pw8NE+h7bUi4DkPD60ll+sQ7dPY/noc
fVN9WFnd3EPfrU9tdfkB0sb9c6nJa0ud6RtKPzzZiVJw2uoLYyBF+9z5hV5a
CllKaGLG9FYlQF3qg2jth7RMNsPEQvKJZCL05DNPNTlF+kpoankIcT/aXGhr
PayWBg8hn3Z2mUztaT2xd0WWfeB13bh78gb172iGwWkarznQSo2slTbP7Bgd
qRhp8Csv2Dn6OuXXc6QyPwenc2B1H292GYq8B9b/HFlNrfrNMkYg44RFfdhg
uvtHMC8uIS8DpbyzVtIZlxZw+FISZHXlPMob1k54nqU98eSpZAM5ejpVs7Fh
Tgn0JzoA2l2Y8KfuoaflzeV4dPTf36VulKj06y0Ziu65SqAn0mGWgpO5wAeL
QG7C7a1zeOKfdUZw4cPxp53TcCJYUkobK6kzIKPWSiDrgb+rt9aJblcEeky9
l3wDO4Q/30d/ckvjyRvbLJi0710CKRJfX4dArl/e477YGrJq8r60aC1PJU9B
rvxBiembr5/KkEBPyppr50m3nqcE2pkoUemrTVCRS104EnpF6Wjt0vk7URLc
+IlyaKWS0Jt5Kk6sLIF8uI3CXrnHhY7WYuCl6n+srBVnQM6C/hA7mTCD+EK+
LBpD/5JD8eQX7A/ZCe2TzbLNLKJOwew4fdLG+lbrLoG8A12MJbnL0EsgMyvt
psvI5N6jnkq+ipSCDPokPJIm/AikdmXm5LzyriXQmd1EGkcqTWc7SyJ/V19W
3pieGhcgTyWP4eLs4Mnt3XZuLgNrS4ShlX6tnbj0JVAhchhkOfvJ99D21011
Loc2u7brLAGeoJZY3r82/M4vJg8pfa9PKVXae55qvtFpIw6Qhhv1CxktdLg2
IiHW2iVoxEK78S20UeoXA38M1SCFQsxSAmlJ/Zk8Aznu98kiEr3YlmvraCnv
eipuwZfX30Cd5heDg6CXlxHUJ4gvehN96OJ6ae32zvtGMO1XEsXqgq2+uRxB
uUnaHzIIWrcS9IMDNR0qDT5WBPhXF+phs8b9KoG2LW8oY6gDfGdTS01gTuUW
DELZU79YKBMdG4Im2e+6x5A5VfAsfSJXZjz/n0DPi+XknPe6RycclI8oBaTg
oHY7DtaFutJHl2XfswSKxKUTFIxLA7QrT4XSk2+Au3ahVPJpm2JadrnufhQF
/CKvGw2gwynzJW2sjdTuEkgVLQJeaTcpgF4CBZT6fFIExD7Ridq8yx9cJlef
WIchAv2hnlMBC2f2Hh9B03kl8OJf1y9Wu5FoK+qbkDvQrc5HMPSxLrIEUvTj
KkHzgR1ye/DJ8h7SVjgNMlw4/bvXPfQZdEucfOkG3SUCfQWperkm2uzaKXUP
7TO5bpvlR5vUPboVNxtSNiZu7U0Mo70jx1lq5MLfKQFazwezO1CPYLIDZP/x
feaMYbn1JNq0GMGpcPzKTpSV01oQpTVpWCmzfI/DImrD6yhurpQX1DXkOyqS
IVjUkcqlzjnkMWSdZHXXU5tBjowe+Byds0maIe+h4EVezPsZr8qwICAHod3W
CYR6zLb0iAyjDO100uaOEb7xx1DQC2uvrbUiWChR+Xb6vlrD2iVLm1radRLf
yBSv+oW+KAcZjb1QUT8Bf4ZKGKSvpBiy7EQ8DX9o6GxI1WZJdFmd9U1ASnKm
1S+kExe3kOfTeMkItNeXNL5MnjTRik6U4OATavlJiF2nLoXHR8JN3oc8oCeC
oUW8tA91ZEnv5DgTxSssw0R1lMCaJZCO06ujAeQg33kPXUMbQv6anPF+ygNA
oP3JcSKyv/cqAa75tKcmtdTzgsO+tDahPpn2eikA6QXpSelD+SfyMNv6COTq
Po5j5BE+9R6yinoDPJdFEi0CnEkd85uItJ2nzmAnYaloT+dPBmfHqt1kz/T/
2jkyVzrveSoWpPPMCp4X4VQJ9Egbv1KBk/5O7qEDRaKKYEr/lItzNzahXpFj
Jh+vPq33mwLEG7tD1FCCi1hUrrBeUltxlGARfsiioH93nSh5CmR4pnQTuYss
iRxcGafJLvW3/IUAeJQo3oVfqVu0GK+LVIruwhkYdh1+Ajy4xZJot7GTTwSE
iYesxNJ1rhwc6cmO5t/ktxYqMwIFvyRZZKlYkM8vtDF0BnSeHrLAV55KzyGf
l/wUiaUEihIcRc8d3xa/+ay8uUyBti5ZTP2A/xmBtJiWXnqj65n7qHtgGOVJ
oVOI0VsJtHfkw8lHJ9DLMbgutDF5AW0s/jtLom2ojYMDpNNGaBFB13OR0uz4
oztWTTcgYSHf8eDpn+wrGSU+yZqkfvS5fjkA0uCTTLs2RHPS9CkBW0RqhirB
7rVW22krucMXrs9dL4iHLz+KLC9BSMsiSoFrvzUeQB9g1xeUoSbD0FFZBMQl
cPpUF8PDWkkhyQA5labvpUNy7gqXJNDVpFcvElx6kfqFnXb9aNjSRpGRGpSF
0Icl4paDku8h51h7AEd84fP1XEob6iKLrGNCASEq3A6MdJa+F07qM7IT9UeD
jItiwueWthsl6MTuUrio8l0nimy7HlkuuPw3eTh1KQIb2VUZRIWyo5ZEH1B+
v/4mnrO0cD0VRpDCR286J4p8I5C6J5pwtlz6P2+ONyDfju3S9BizBFJ49h0n
0UYbETjpo/Bc4bR8ho/K6ITMJFDIHynMyYZ7k+HYtdsmIQcHjUHyE6Uy9E/e
o6EksU3SQLhyHwFGaOAWkbuIbleEy2WkLqTCOT25OXmqgSWQFpNlqxdsnEk9
pb6F3vWpF2wydoSQ8tEX3tlv2Q9mCK+aYt0iRIqARIq+HL6PYuirfqFH1Cdq
bB3Z47qUgv3mSF87hCzyKoE8cNbkIfW6Rv2CKODGEZZllto+EcjoS70dsgEk
xWYJ0NCH8EbWQHYigjE4zlIZeGvXqks1VDR5yYZvFC2qlVUgpbBhOEmXrJoE
OlPUusgxtaob3BQxqAFIQWBunqcuJcdVWl/mXKurUDyPq2MrlYRhke88P8uu
HYd1otzGv2YEWiOnY25KFrOCn0PpCEU1MZ4oiK8A3Xbkjmonxo3SWm/+Kt6V
jNE49QsrPqtjWYyWDAva0P40OY59pcYiQbdZw9XRY32WXR+2Y2m122WLVu2S
/SYhyR02DGh+IX1jiy2vUHcpd1A7Q1uKZKbctPXRcIdskM657BlXKk9G9k2P
MvEASLX2ujmmgYRQY/vo/epSjRyvhIPt0qPhcLRxBzlSHO2dJdFVcEPZohfe
8ikB9R5smxenvrmCbald7QhFX1ST8lSTBcdhc7LoXiXAc5PPLe0mJ2fVMZi4
lQO9wG4p/0p//XJWgghLLk7CV31AFEPDllPJjTU4OMLavrrUYoPG0JMGln28
8NdIOcaNIlQnIlJMShai7exEvdkiaYBaH3ipEWilZV1uFld7qD4tC6iv6Prs
cyXFKgFfWgedSqRigydHTZuMMrLW1r9L4C6BXLjBB+y4GQnJUNw6bTfvMnAT
6h5yd7XXdJ5wnytKpfx3KJsAOLioiEegx9Ed0JUUjmv7cJAOca++yk1d8SfQ
3iGdSSmHymk0tYJ8nbuHqqyMT0sh96bOKCcAVS3b/EnjHlxDrQhhgD7YrDPo
VPB0AUkauLylg787qc/pSXWK4kDKWdAW1/q1hfOyslabxKg+DzlyqaudEHnj
DA0U0KDeduWcy22b2owLx0WK98mSbNx5kpAD9IPO/xWBbHDnaMj/09rkGLha
4Drv9KH9FdyId7VhtUhybnWrO4GJtsfBnMqA6lvKfc49LtkA0m36Ltj62FpF
qDiBhwyvjt286hdy3gbeB4+8Ug13wrdTSkGlgSTJC6ItSTjhMqDg8lTavJsy
KMdwy0fOeyhOOdRvsYREAnnzTcXlcdpuOB0fAfZd21B3mgrIn7qUviv1KUKA
/UkOYH6I3/Ql5ORRl/oJdGP5sxxA/aGWtEegQEHO2m3YDX7YV6A3w2c4ACTa
R3CxlOSJnpZqnwRaVjksnRNFBS3vsdAI9lKnt2l+oZMtz/zw0aX47yQHtnMh
F862DMX9+bSoVx0COUZ6KP3nKAE1+EEQN0jd53vgcUhdaQHJH5bxMvKjUcPd
Tn4m77PRrBQxDELCLyzBxAcg4GS714fSlSlKdntGu9K4G20kV2JT+6WYk0t1
wl3KSJOQs9VTkaNV9DM2GW5KzRHIkpOily7X9++JPySYFMIvefsUvuo9JNCf
ybla3TiEutSSvaH61Jo9zDwuZf0HBIYeWtqqtijn7wxHgg/pgOwrPPlNOZVP
rMUtgUx8Iy1yUDZVN9iAL7DP7QVTJAdANKjnkmGV5cYNz3uQzdcRQSkSrSZi
2Xj/GzSMHAZ9xqTVgVZpj+hsSllJuupS7UUU3f1N5PwuJR11SJp1xXLT1d4I
5nKu6zY4rPLtABMoF+Nac5jPR2ATLP9K1hH3MoJOXAXeoYM9Sbi0qFvKvA+c
a0WWSd0jIJPCy0hvlYF0zpDSh9SJsXIRkCDXKxKzkCGpxyVPhJMtW6uwSXo8
gkYdiGysTgmZzZ+AJQcqouPO3o6t1YnpWFU8qef6FF/woynbEyHzsNmifCHU
HMvMR465W/iDwMXkJxES9/oF0CuMo3ZemxWGg2KiNuZa3+GiEZC00EEeJHfx
DyKQRcVHJYBm5fNpSV81wowOUnAnKlrkSjCD0g+8aXQJLg9wHkX5D7YvJwrk
3MZV1EeScmw5Bov0Isl/vTOLHlcN5xXgg24lddkqvbP4R7EKtWdp/vW5OSbO
2soKtd58Unq5qSsSYva7BNofQDbwonSw66k4q1Jk6ERZ+UAEb0NKXBTR8spd
jfaRX7Nd6+N7yw9PPEghEdXnKEMHrl5QX2dQ3L6dVZuJ7nRLvYWWQx+YJEEM
PYqEiO+4pHdXCYKEmt7j2VQBGgCDCOTYnGFNhbaLesV5ozCj/XPZvcybd5f/
qWaQzdm1GTpuigFWDr8SmCyQAzrM4DOp7CfPoG9APlaakj0JliYC/K1mkOn7
NyJoZCy63l/BEVnYn4AE+cB1PeD9AgrBcC0nsOUgAOyrE9Vc1tbJ0H50vrEE
hPoNGAvec6Jtwlz8HsARZNCTXJZgk/oATULNv755M+QUEzy0OnvVzanKbDKd
er1Z2XNSmNQsOvUfJ+NLQD4EZJ+cLGKKP4HW9EGTEC7ydZ+PQAeNQoq2FNCw
HYF2NNgLykk6NnlcCfRIAAhvYyqi+uYzpXkf9IDPfwITOVFUtzGq8/Hx/QkA
FByi7Ic9eUWFzzfzt4lbyEU99QvQGJxZkqCf/JWuIy3SSEMcbfmR6qu8NGPh
JNh66hYbpT1wFq4SyKZNtToCHUlpW/JE0qRnlEC/IXij3EZ2uC6FFwx8B5wc
SZmfgFqRHmC8AfpKCcI5RMpQj0O8Jz4cMDS2GyUxLEtcToLUzod7nPdu0T56
J2NhwXPJovccHAQ6fpu30VEsz1LLAe4Ja6cNLTud1Z3YBxBx+i56vwTVEziB
JBQabCHzuNN+DemdS/atzN0kN0cQANwIM91LQJqUfIg8MApDEYC7MoS3A/25
6uYNAEknmQL0PJEXG0cHjCw6FcgqZ0og5YC+lKIEnpCbDxs2XlkKWd83i0hV
Sz/Zj+s5vW6ujXkTV29SF3fgYgh80GQN8OJmbbhht4C43knK+h7aU7im2zjS
XsXJ6VwBqbxDIDnrmxOJdrwIlN1V+StQH9oDQKQwABX2TTJRjWiokZu9a0mM
/iQTrQ26WsU4RMwodtxg3PmoDO21yRWwOOCUc5zxx8DNgBlQWLLvEhALkpW5
3XuQRXRxDmiCcS+Ufn6C+8JXJNm1UfTZV4NgqBHDULS+AheTgNgUQPkBtrh2
Xcou6JtewUjVpTivj+ERrnGVACCRcTQ0ENw5UdQmO3WlF+x9EvyMy1VAqSyS
mtQoInDBpw1HiXzICPSK2oc6+WRHVpQl8FISneADFmYy9zgvGgMHmoJUvrls
kwwphaeLYtkTO0h5xXBY4HMgZvJUZz6ukDth0dLmYUz/TY6Y0tIkwioBsTaZ
OT3eLM/yr3qE/3WTjMqpHfSC6B6yadp52gD1i6XYbhqA4pz+jkBHZwA5I14Z
VaKT4sGoTBAsw0D9j8C1bVnKbhflJ1jAnUkgs1nuCkwGlcxF9lw3X5/8LuBg
IBHHWCed1FUC8u8LtQjEJAcHrGS3646LPNaoexDpb9wG5ycSn7vWTLg030in
1+Mu43kB7gzsbTa1K2DaWVgbMJX1Cyya1CgAbILLeg8po+P8Lo7OZ620RtQr
9PlQmOWeg9O6QW5TBgCc1j4CEi4Gpupz1VPplYhP7+kU06nNQEZ0AcokQzc/
G45zgXojxJQPnYyXBJQeqRMPMJdR4YODDgK6ExKvXpcCBwCyZPwhHbIk5Hsp
AA9/9ztaFMtPQIj1MJa9LiVHahOwyRhu6lgREMHgcR8jnUszyIkHcf7gY1Gb
iaBjQgB3PFKc2j1ZXZkOferBidLbf+7hnpjhtQV5Ursdfxc8PItPfJIvSM3s
AU3VidJX7US5lE7YYDsV/Zb2wRe9QF4cfJoTiyMd7AYoRJOq+++pSMVKUxnT
rFOSpg0EjSSczV2fVaLrb52WWgNNRT1+ojYBgAF046KaEUeYmJ1IdwCrlA+d
iKXjJdLBRGJfbmq+Oc1Vo01nsWUqypnoJDd1HTwHal51jxu39rkJH43jPREQ
CmPW5HP2mT4WBCSOOQWKWeRE1qUIv4HJOgIrLA5V6Js+g+l8173rUlSoABsr
YqTukLW6G7rzGCuKbfkdHGdL2HH4WR0sVwl0iF1YA3gz7xKwF6Xryf7ipeSp
3NdzUSSYoNLiquEoDaJj8shslDzuRcwuU4otp9qZ1ZWBwJNfAOPIUt4RHLBJ
F/0GCrvWV6Cg1i0pG0hiNJzMMmiCBZielqgYFmBEYL/IGZC9n3Wpaf/wovGA
xG0JunFyE79n7Ku+4HZvGWlZYt4Wy0lhjKIzNnVy2nYJBlkkiqz2LJ4IAHkQ
nRpfWMlMGQi8OmrI4I5nkk7dSWTtUR2qNT+mqLutcBBISi88n2WXuZOrJH8E
RQSGNgJqlrhfUjN43PUenQadBYZee++qLfrm9Ai8AKbv2nBvH6d8lgE6aicq
4ol0AgmgcXIqmuh8gg2AhAzPrhIEviGhAq1ZFEnqC1K7wx1bTg/uaLgOGpcE
CIHzJgqIYKHwdGeKvLs8AJ1HaYZ5kWVkL34u1YjJFuAeco0l4OgtUA3k8+4C
c3e6EHlJ8JdzFiqs03JH9IwvTk2oBGgjud86i0B2S/sMtkMHEY9TVtlaQ49o
YpX9J8+THHIHJ0cOwKDnURUsGtsojstCAsapfAlOPKkrGefp7FDeo7N+hg9h
YKqEDbiMih9u5WL31T22Gx2xmuQASjPIYgFsodKxqeHV43b9XTkq9Nmt665v
7v4nPQy+B+Dh3LzhwWmtOkHLLiCQLvT6V7w07b3Zuw3Vjr8+qC9d8cgkwKLI
cuBqsy4R4EYQM3FGZlUBGrbh4BqQsd5VE6bqomNDqouDWD61PHM2g6EDzY2p
EUyaxpztpO0nx6Bx9UNDABi6u2JOEAvbddrljHdMKlEBeUHqomSQc5wRyGmW
+TXo6NTNZdQw2xMTY2h+BBOHUDqO+goGKwL8JXfZ0UNRBQUnUXlLWVsUbbZo
u9xKrc9KgQmkSwSUVzZnjO7TAvw1XcDgQLxS2e+kXsh3yzA3I7QkS8YLl+8C
1iffUkYkvWQSANOgWEY9dxTqpblYQsMWCVWaGn4C8qjUZV8USUtoSea8PYSQ
ZO7uUn3NFb5JwACcbCQ12RaeLhrayYudfQX6FzwFn5ZekOx2K3YUBhgQMHl5
KqD7igKXC9BSya0ERkvK09Hn0H/UzQ3Ytj8/+yeipy/xMZp4AGNp1+cXtNzq
8EkbA47I404ab0gqU6y5ytluxiTS7ks8pbfqJcCJQZ09b6wYAZuE+3da7Z+6
+aBrDHyCC1W9vuC4rYH+gqN1fwRSkwARKHrPWUvSKYZPt2a5Py1v3klD45v7
PKz4PtJEusWhaEzf8XXXpRrpUj0CJUhysz8Bbv8AZYZyvyp8pZ2LarXb8gGb
tRI4IFoGWjwVpbL/Jq0bk4YHWrUjoHfpUC/SVt/rIwDtwsEhrXl9tA+FK23G
h/YS6np1j05CkuhkkNH9LeJFys6uH83/eGtXBDgaVFhI4yhWvSMglp+kSgF7
t1kCqQxZIBx+kn6/WhGC4bv0Znj0LwNpgRGNOCjPFQ/gbbRarsjL49spxcuX
NIx1YKb9XLsEdIxRApTPd8U1AAw7yCOSxtWSBKBMswRgBuOjb1LVdSk66HT4
NkkNbeG8IP2gexkVJ70VRSYBgMXnRbLzAXNzubpodjLRl3HrPwGwMOJDveV0
p0cJOgnsY0oJIN0RkMgEDTuMoX2eEqy3XQ8WDBBaESyqWi6xHJduI8AjIjO5
zvy0xFxumiJ3RPLymslsS0A09LwR9KRROQLyYMABpCiv6nemOKadCZwQ4CaI
nQi0e1Aa5AiwqHlcUvoNdD1Ki3x4CQjaB7qDTXlndaXfaGJzDXDQvBEB/BXk
RYhM5vr8QkqcHkSKgNR+63G1wemxaNS9qvkEx26BZIf0AG+tzxJIp29Sjx2a
gFpEWpdAA11wGtxJq9OwSMaHXBydeimAEnI8zi9Np7Wenaci6KJ9B9ghHcb7
I+C20i9OOz1XCQx4edz8qhOX1UX3bGdHSdbvfkrQUfgQldwfngnCHr3JvM0b
AfdKFnECyvAWBRA9au9CrkFx7jGK/apTS41jQfWCVz8+x8DZ5Q0ElErD3etS
9BtOysSHB67jTM8Z35QeWp64BHJq3zDDONPrLgGqWH6Lzi67Mm8+7FUCpb1d
BM0WHe69HLRO0bS6dglcfwAri+L4/AKozyJUgg9lf+7hzwFCkSxnr9V1KvoB
EEOeY88SAMh1Dx2uZV/5tETSx3h7WnvvJ2sFuHvwfty9oCoIGkkIt3j0wskA
lzIlBLgQ0LF9lwD/Sn7g5f67+lCNzC9N3WweqdHsKyqKF2v7uD/lZEm0Mezy
0ixAw+FH4C5ktBKvmDN4A5GlHgZIDkzT8xGYZcEoMzlTPQLpeRJnaD52410C
QCHs9JvUQatL4URh1Ttl+mfVzY2FAZswICzodQ/qg7glnJNZFkcC+fI0yi7r
318cddFFR0qLTDKlkxgWapXEIKSMgMRf9QtSFQ/Nv9AUjWgGez4PuNOHhWm/
EgQ5RnQucS97t+wHp2LAkQIKg7i4lQDKA1d6pTtOFBmOrL+htauU5fURvP0D
Vj6nBGC1x+NsPhqjlp2DRBIDSAVO3iqBjkujFxgnYMQ1AFC9zPVCkZ4Hj6CD
deQ9dTBRlz/BRhcDdeKaM13YCOgPeB4jFXVIc3Ngs82ISrpbyhpQHbppf8UW
4TLkPXS6b4BL+9gHO/ULl1HQNYD/rqcERu1PmnIAXd6tBOSogEfdphfIvjLx
jEsWeEyjVnfDhfSCWSEd6fVUvJ65nvAD0gIuAUixBsDSReF68xdGfXH8H+CY
2T7A7IwhIUg9Ty0iWTBsJNhLTnU+lHvqAEZQqL4D8oSriYJMw5ZTJ9h1j07L
JrUdut+TVbvcy7wA6FNHPUEuu8PpGpu+IZZq1maYx0kMx4qgcbOIsjh+t4nr
MHYdZ9qT1zyUDo3LyvYBkTQNzeZzBftBxgGel6e/+ISnZxGlhNHVtHgRyJVa
GmTP6UwB7VdN/NThgFdNCswG+NWlyDOQetSXNWI1AtpIALgRUlCH/AikfCA+
umzU6uYNqDroYAM2S8ORXQZS7ObwFSImlMFxR+6Nm0cUUoIJEM2wf9p78h7U
XZyvxLSdCgGcjpLfdWjmBPiXF+xGKI/10v5cM5dq+NJ0QC3sYRDYErjBlYIK
+mrWmzeAGvMPDgxitgRYTmfWdAjLnrv0QSRG1En+tW4+2NbQZV3O5GTDUUwD
akRRTKfgV6nm+R6el17e201+JaA5cS87bVqXFsFFxzxHCQ6RlZ2IW9Mevzv5
vrSlITAOh/T54461EoBKx3PnBI5fZuKioblNdgJ2fdQZtAtAFgO6FcUuoy6F
bwNXGIC166rHvV24ooYMgLZHhV+4GBScHjfLlQdgLcMZlP5bZAlyD9giXFwF
ONk+S0KqEHSbm4VozfkJLpinSIAQYlY7l0sGsgGY7mMnPb8wdQgAs0Z+tqwB
8CP9NWqiz5s7jGBy1C8H2hRN8mmhrKDff6LFT/prJYDQZIG3pY6bri1Mhpzf
AYPa4w+Zm5vypxm7LWd7RDOAwqMdHxYEYuKPAOcY2ynPyMwVP8EyLxbZV7Ti
c5UAOLHTSNiVVe/B6dOnhtmJvviYCa05bhXsCA2LG2tAA/gE7ELN9KFGGYFD
SvQuCf9UkRFQITvuYtl7xOuDflGbnaALzG/5V9bnJCEe8uHwokVA8uwmYTlp
Jrxy80mIASeVNBppqnxBVA6Q8QOqGK8xArJUsARx3uAgisBFV7fEGMD4EQC4
BVvX8YgT/FxoXFTQqzXLh6NAJYXnNB0Zil0C+FxI83FA+qljgJLssDfwsFdo
ri5qqKQt6aGmdnFy806KgcwIHbDPLAUANIBdSs8qJc+8BxVZkrHDhd5WHwo8
oUKYAfgWxXSVgJw2aoaKx6kzyD4EPwLQFKRJnqq5OskxufBaYoTBPxkMtkEQ
rAriqKrQ80Pf82vcI9jeCtRL3bOa92Bl39Y+jmxIxC6oCbpZd6YRP6dujqkG
gbTIrX92Cchheu82rBhamN9upxALqAhaNzP9XBEAZgQ4QEr8SS8yAnIClDpo
06ot+rpP53IbMa1NTwR45eCXCTho0v4JKOS6EbC/hGQlIE86TGv00HS+IyDP
TfMpgIpP0smcHzoJYMJIwuYMHh/YMQ3Kop04b46j0gAIPCSNQm1Gzw14igsw
A1i9rC6ZED3jq6ufagC7aFGBOe52XljnLk8FxlGaysEqnEe7BPhoZMgo445k
Jmg2BjCwjF+YQQ5c9A+CpyIXRjHnK+h069G1RcokTurBVWebaPnMSZIXpKMB
uDScWEZ1RgC6lV5KU+/0Xb8AVK8tsim+7FnfA01Ni9LtKlpgofaB11vZmRDb
jFyKIzFImsGjqJfMh1qU35zcxnA+8akP++k26SgJt3QvY7vofafCgr8xcjjp
522AZwnwYFDLU0GxBD6Xu+DQ5x4D77ATGVDRmHUMQMFM42s5pSc26uASAZgf
FPjbZ9m5H+UN+Sq6TerntB9sUsjm+bJ7GQEVANrVzLnw2VcmI4PocW5nUurm
7SLrSaeSdNOsfWXWXBo9nKxdJ7+gcGXWoQMxx67dDtui9T4rCz1XBJvMH41H
7NX15B7dQFnyD+e29/UT6GPOt8l7vc0/EVB/JN9MXv/ppUugMxvA5cAV6Hj2
Ehh3zYXeaCcCkgZwmGHR8alKYIbNbRz7le7l67xgaSi+XK+dHwH7jCgDFzYl
7IvQ+XLPsxtXy9Bv+jXo4KfJgic8ERAq0S3bXi/ujoD+BMg6aZRYIbQ1SFVe
ttQcZ3aHdESCYfYXLYlM4h04Pux94Il8cwpYMZCwv5lP7cBSCUQ6AqAKhNyo
9h6yQAR0Qk73Zshjil/iwg4pnwYgdYWUR4JNC1uHSorcXtxBMP2zwdRIoz4N
TD8BaflDe+nCHe21uoccDhl6YoErrezQloGMhGTQyepadhpI4XogYqBXL497
DLMkINaanFT1iWVBmE7gNRcF8CwJDZ34B5ALw+KT9wA9ji9P1zbImDyVYiec
Wk4V1EOrBNh+tyCg5+56QTMCu/OO+m6LPcdqGMBDxfiuYhhru6nicC7JL7US
EGdCMAS/Wys3CqgrntV1v2CL/REQf1AFoRMzxA10kdzu8YS6dxeuj7LqXi+I
RP9N50YJwIs8RozyvbKIcvpvXw9TeVa9oLnHtUn1ecEER2Xw/XDEFi4ZXtgo
gVstac1yqFe/ADoCXwhFdFK2PwEO5AWPIJoBpr0SdNc/aJDGHuY95JXTyAEc
8OW9/gmaG3gJfPG/PkcNsAjRhaGNrTxk6vwUthwAjaqMImju4pJna4h93kO3
psO007+r0x4XhzTf6H5a8yLHCIMathLDcSBYLwEYBjem0lh+avugyI57juQx
XJ/dDvLx0KtDWoYUTQTtZZo6+OardDsOD/2yfPCrfzaDM3ngsmHq4olXBPja
sJybL7x9BLgy4EsGPVtXVleCDu52uH+axEEE9GzDIEqVQCdkRoANIqwEIjFm
srUA8wAykfd97I9HQKqogeOHLDb9URdYMPJXNBGwVU8JMEIPmg58UtBUFOeA
R9GcZvx5ThTxMrVouJhNTJDHpcWl0QEitQGrcF1Kpx/jCXM2LTAfAcaJcOym
OpPc0rpevmwKQiCKopDd6tSNH0GLhU/mgjm4OacvUwAB8RMBTBVQDqGoq8Ee
Pko3ArygUG2rj2BZaLQn7bQl6G9LFV+FFtGf4OC6kzijnV6BS26Ow7udbnNe
O2eQ8FyRmBlkzRKR9zgu+ryhEvi6+gVoSidlHvjaau8e8AL6etSEXKD4CUxt
2vdtNLIWLr/w9fVR/LwrLB4WwJwEV6Ej8o9ggCGl+QQiqHoPKIop8kx3rc0r
XxBuzwZ+fbkCGiNMNcIQHWImSFdWCWgNA8hJNH7VGXzbLEjz63B+olTCRNQo
zgE1v9hBfb7pJmVD42mHiAAP/AEy9ZhQapQADNsDehjdF4VMOyxtI1qpDlQg
3utawEi7wcVERkmkrPX2/MuMYKwqhwyqDMhxx9A/0IBFgDWD3LPB9FIemQQm
KSDpAx9a7RKocQ0hpftnlx1chqOY9xeM3ugloMsTgh3gyYSLJTBb3vO8/kR9
c/NVbyon/cWr/wS0lkAk6h6bIiO4vKGd1KJ2oAXIWg0oHRSQrbc8nJQ3hHUU
f3m5TtiXZR/kqSYoz5fsb3wF9D9Q6mOURNaKBnvH4e1x61/dvNFSAP57GIQe
QYeHaFAbNVFlsgZ0DYFi3ZATGz0YAUUMEC5mfeq1fWABk4ID80uJotSrqcBx
MhbY3rAtSIDjg6GQogbFPkvA2BNyOMNPmLUCWYunveikoQYeAbBJWPDooACG
9CdwDhOdTlXGVeAIcENx7kxhnzbBy4AtmuHcUrnSsHqZ1JBQ3/7NCjPFZVLH
ixEk5LzukCSBkaU1Ah5RigNlWKY7EAd1ESvFXQJo5VkM8OVX7cSXL+d+u2Gu
as5yaw4Q8+HQQGe+LjUIF2jUe6uOv31FVRKCL6DkpPuyfWh3dJp/kevUU4wS
bDfpzmM/vx53wwmI5t9gaUN1TXgzTW1iqqZZWQMSHiYwW5cRSkEnIHCVTmbI
bJN1cyDOZAcJQohlfgJ9AoCyy78a5Z5P0sbUrrt7Hcf4CPrzfoptMMddAt3w
oWWDACLY88s8K0ajUrdboawA4uM07kNZEZ84gkkR1RlyGDBD1oGAUgk9MY8p
yPJpaX69DN89tE/Hp2bWAcgpGPDhKj0lWDbdFLYx87Xh3M88cWDJWpYuMdE8
Efo2R3VVyQjaH6CfQCnaU94rjB4PfC/0720QRhFA3Dz+UJWnUqzYfTCWpuaV
LW77I2DjYB8pGyWtDh0IyGJWxUC5CMgqcQhoRiZdnDcHT02v+kWv3igP2TBj
UEM3m2qmM+wyQzSpZ9x6eovzzQHUkuFgvzM6p5WA5tKF27Dsjv4EjVqQIx3o
pk7tXRJhvCRdkgv1HMFtUrMbzA2IvxJc5Dje1qzngzwzmbUpq82aVYEJyCj8
BUqgUBbXItK4zGwivCADN0tA7Ez/HWwA46r3gAsVBDTjEhgl8BGYUx/tSsK8
LkWunQIAtWzQ4xF06jTNUGeczt9TDRh3PDWH2T2y9E8JmE0lnwsYunbliYCY
BbDBojxRgQmRG5zq1lp0Kv9OFKqWnXiTj6KsmF+Q/mM0DV3QoGLyVLfHHhwT
EgNQy80pLsFUAdAQSOwqASkJ17vYp1GW7ksdpGNRYk/VWCjUAjzbBmbe9aHg
3KdpbJnRpdWJItFtzjGw+7A+tRJ4FBVNwaTW42UMRhQ5qPdZvOO3Q9rkiMJh
XKv8FQwQ0j6Mr2rWgXVzKCYAw16mRN/9IyDU7rQIzgJagwh1z4kjMlIQ9Qum
O8HUQ3f+Sv+5pxpBf+mK2PoUvcmX2jpSQ593AbPsE7lvgrCNyDOC8/qWB0jy
TiMb9EGUpw5RF5FvqjJ4DAfeEvDDxKVZq+UpGLDJUZM68TLIoy12jSJrl9h3
CcgUTeZNLaAf+R7Qh1LfIYsDBiFvjj/JS5CcX/jiEbi7fbohhe7tPK5pvCkX
0cozyocj0sPfbVCLkDftJXADLRm8mwbyVQKAzpeRn/CfZhEnGgHMLS3Gc9UW
pTA2Pa3EROq9BOfNFgNlmdfn5nQCg+LS5sE1TGGdQJPCGR3weIy1S0wkZxDA
5Y2YF7QxeNx3MiimlACFz5GFO4oUcAT8PWtpaGIrUHwFFHFHMwry8wuyMhSL
aaCuGotHXLFBAWijM7OI0Aa5Y4IU2mx1PuAEJmXH+DjjECJwOPrAxwDKPNUM
s0xB4Y5yAOJ7SsBoNTMbHINDIyAVD+O0G7DSLo89oxPCY0fgSZ91DwD/HnYF
DWXg+HAwgTGmwfTx7JEdQfMQIX3ddTvdWQJM/PAYFbrl6uYNDhTZwgEvcKXu
uyd4TEAum4RiIhYaUg6NhbjVeJb5BYk8qrmPtVP6B4F4YzzAZ2/zYD8RoCjJ
2VAUqlFUwHaZDkQtwA1zp+5BjoT94FJYYTkxXa4VEZxRYK9fkOw10fj9dkJE
8M6i2W7rkfuZx4VaAzjwbdxAWlwlMFmuR5Yw4zBHrcOhB/mxR3qBYPoJ8Exd
XfH4rCenls6OY2sIPGJkvBKM6x6bgbGnETqGnt5OkgnMHpj0KWQRQZVSD6PY
hy+c9yDVjL/FNDhQ4/nmAFfJHbeXzDM+tRn57dB3uBL6U4JO4wLYFq15zc2A
+n+D92NXU3WuL4jVnuY64tZ3QrI+DachVsIzLMh/x/xDB0yTHU5sXpCw2QUA
vNtTzQ592mpjRNg/IVZEgE3DdeBVC1XMa4EFGgxSI6TPzeF1nrZ0wCQq19fJ
8Tdj0iFv6bW65E9gjKS3Ws8U1ceywR6MEwRSrl7QOdqL3IrhIvVpu7vULicb
Df0vgTzX47FgdErE1qIPyPlsaoH0Cpfgpj+XkJdQ+CqVQSs7WECjddZnMzRy
N6bdaYQ0p34BwSflGLj8T0iSHA8R7C+zUwEt+BM0gxAgT4Bi9AM9pc2ASqv5
XsE71S+IDsmzwKBSZLNAsgAn0AkBJfGdF6TzlfwZ5NAwSsaN8rwn5oZO939V
ktx1O+o1AEqvnc5i6pRvHdxEV7NyfRQw0W+b/PxTLAU01z6Av8CBg3rOZmh0
1xxGgtG2UXz6JJthUDt2Q2FkzJu/8DZMBynYAvDzEfCXaEJhzt9dAnYpvA4w
VK2CvTGqg9ZPKgYwFiW53DwWkzIuxlDqb5aAduC9XJN7Cg5DV/FDtR8CYKqZ
WSuSO+SIH3c6lO/TuN82PM/DIuKLNjrRSAyi5D1wNAL32rilkk+eoLoZvuE8
kqEfsYMQ9ZIcAH3qvFRd6uWApToLBGTVL0w08HLaUVrMFzzNRGXwheBH1T0A
dgMraCTYyVxGgAvonCxJ7FG7hEEh0uJ+Ligadwkgx2aV6K05H4E7OchTcz5n
7attgB7QM4xL9atJcDyhBngyBrYu5eQ0WQyq0adW183+gKqZVANb0U8AMRMM
o5sApFVBwQhg+7THVILJcgLHMnnapJX2yUhfBMycuQACXE4jl0BHmIkw3Rz8
tbpQRhOLUmUmWn0+Aje80GDGnMO7BNQZllvJehFXI6A1gFQjdM8FPSUryjfF
gYeqNlkDxqQsMFx0rIxPacv1VXdnQLj4rDpqKB0cHVoCSeGVwINQHpowMV6f
m7/kd8e9dWPU92DUxXHKHUe8kJnN0yGAdJPdu6sRAfZtmvEvd2aMVrsEJOhx
iRd7vOo9oG3dWGx0TYtOpHhMVxrN3m4P/zlFCIhLYOu33fwFvAdPsL1Dp44D
0vrFhlIe/CHU4GnPhr1H8ZgnaZjUt+Xm7jmHFpfELAa9BBybAU7dE4VHBOu4
QYARZwRSTwlAdjKOgo666EQ799PIKGI8mG1/AvqdLm5OgqcHnQCDPtVJCgue
r1CXcnWbrwE2Vkch70E5jCYI6pA4h3kqfNP9+nj02Z26B1BNOEQvKBZPLfuB
wXObuAWCtlUCAEJUUynE16zG43l3LiOBWWs5nMBUF23glA7p9T55XABmcKRP
8yqclhck8UciirydQVcRQJ7mRh6Pfuy5BziC5XEQ9MolyYHAHhodiRzNnsf1
mNTD4lNPSE2Y8R3TkSo753o+SwLGkqQrwyUIz7OIjGCAIZECy1O6nfLwJNd/
u3mQ3RUBefthegwzKefNqV1313DoN5j1HhSQ+UR7+HPVkpjdH843GifuZHGM
RfUc8wl2dwcceczBzNAhrCPb4iOQ6vWQH5dgPpdihgjM/LBfnPQVQevvTP40
vKU/dTiNM4AIRfHxXX3broM9bmdkKMmVJIcFDNsGTj5I6ZegO22BDvcEr14C
N+kzDRYy95W1MssEpNWPuVNWbk7RmXj2Njpp1CI2E5FDVkhx4nM+ULa41Pcw
S/VXwOQFaA3duvjzZJin4T7B4ym2eI0RYAWGySPMU/OUQI/oLgdKEem1dAwB
lQwOQDe5fAQO4mCBcN/1yaUwydChXW45Xld+AayLdJSH3vZMtfKfUnbdBrje
+5eIR0DWu5mdATN6R/CmwgFIQJa061IccSALtIK3WE5Pp2VqwHH/C8enBN0k
//NlHv6lLFDRj0cSApCm67BHQK4U1CCZkZ7sx/G0dCpa7NJTCdPjP4Ag3zxR
wL9+AmOlOvVu0nbjyVNtcgLLU3LYwbVWxCvXy992fxDxnry8zJ5AeY3kUwmm
GxNo/v1UqoHrME7K9JzbbBM/AahE2qwYiUzNLNtnuRXOgF9nevPmzgnSYqe1
hKkt72GeOVgTLjMC3FnE5Vn005M2IfvOzRke8HgaiwlDzkdgPAFjPfoHT31M
RkK47XZ5EicR+N3wmW6nLfM9oPqgAxpoLXn//MIFKlKJwxTZ9biD5pZu5Ufo
OUsASwnROWDZnt6lcxsbxATmZiKc5yoBowoUudPnStdYBHSvjQ4NN99+fgXG
tkGqhHLP44I/wL3ZL5b/cymqJJBsdtYy7N+GcWLlSYlyCEtg9nYT4D1u/jkl
gCDRpSqGV9X2IYqjWuRg6p71BdFwDsY6/eTlftwEOcsN1ZA3ZwKYB+psF1eY
rt3iwyFwKweWmBghmhrM5PEavW1Sp37BHqAL7HkDoxHBMWkVgL9m1pMI6MRj
HhtBUzFBn7f1HiYk0kXEmCUACezptg/w7boHZOATklKQQ5ksZz5yly3g3zFc
5yfw8AuAYoCkz1WXYtoWOXiYzAggTgQb8hf4Zmjiveoe4GdBcpFZ8wygEkAc
8hjCcmrUjjuzAdUsTyGaiT8Oqa61PfcYSGPoVhBA/0rdnrskAXHcz0X7AjYM
LGBe0B2WnldwnEnO6gIUx3JQfPpMawY8i55kd8IjnnZ5YnUaJl3yJ6/4c+hJ
JVyQ9tKB4hgl7wGuBgvsGbYjjenHU6Zo7QEQzHNnSc4wtt2HCr6nUwI8ZGAQ
cEuuUzd/uXKheqX6VEtC08c7M/gxHjn32EYPmYpyMM04l0I5k/IBakFXQQlc
hwNizfjhJLaMawVWR58+OZueZd9mCRigjoAuR/tA9O5+xLf+EWgE5hQvgwQF
CebSJaBRj8e6MMWEFskILpNBP0T69KvkcRfdDLAnkNt69udSbpqiaMsIxl0K
YMF8xSqC37t6rRXBKY4uVE+9ILQkRYicwdHre+FE/gTUMx1iNDsVI29OwEDH
Cq0qDNEqgaf2vXMXTz+1EwczcG5HHnTrjLwgkBr4iAFMwI+XFwQDLH+C5NNt
jtESdFOBGZoOzUUEt1n4t8lutCFLgEfpoSt8sITITmzSuuAZwQTwWauXFWK8
ULVCclB3peWF+REMW+6feyxsEA20tG0HXO9eIGY4kDRhqWoRoRdnoicMJWRN
nhJA+k+/zm0q5TyVi9fMBQGdvj4qHGXAILdtLqrAxYDg05dEdx97dX4uBXqW
WALv9Wr1uPT00PALUuwGIhQBJRz40/RTz3f4ExBVQ9pPwrl/5mBBAO1tdnBD
3PwbgX2ICYYH6xVngln3BHC8oXvf6hdocfQhBQ84XSKAo4dEgxNAmbUFpRk8
HrQcQqnRe/2CdgWqQo0egrQowTJAndrc8XTM5OBY61Ok60bYha4LQafREOyO
Fe+KgElGuLCMgtnlFLFHsafU1OnaHHXzTvVoDY94wBn4CWgXg9cJDkPgW1n2
/ZhvlFZ3WJLipHrMOJBt40O1Xq0EtAmTlaalpA4nDeRmRCNbAVg4L0iKlq0G
hgbO8voF9LtkecHXrDSA0cRCjEj1l2RZ2/W4jGhZnh+N1xcjDFtdM1RreS5D
XE6y1t1zj6lFnkDSSLCRMaECS2PGUzdfoH8gjqLgvtKrf95MJbiQ23PLR94D
5QYBh+ec9jJepOZuExxDW3PK8TrsfdfNB6Xeuz7UoLUHVhg4jp7PNx8mVAET
h0EMnuG4KAtKFlorGCzzuEQqUPU8ZJHHVVu0u9dv2i9aH0eYWubtXhH4aOfn
03aOJKM4gTY94d450NuZWpQaIHo7vyCLB4gEkLm5qz4CclAeJOY8ZAnIeHcT
00Hnk3vg4Ti7rXBl1JBTCxaQRvcp15goMoBkcaDMhkot/KIABxkiC+MLnzcD
5I6Hsd7OBNE3HjI0xulQ2V74Dl6bJwK4S3B6CSdqEs1x7XajFqm8VpXMY3O2
uSFxoVaQTj5p08AWumxmABtwtdATZ/Kv4+gvAtog1/3X0/X8quGkHJsbkICA
AZS8I6AmRNq1QdG9osg2LU4EC55ItwK0JjfEtAIcP/7OfdelIOpyaMt+CALC
Y2t41uPc1hX+EhfPaTpkbiL16hw1yl9uw0Lz0lSaF2QwJZEGOSZYgHMPGh9A
tbIPGDDTS0DK9XgMnbnoI6A0QNM2yM0WGgYEg9ZhokLq4gnc8TeJd2/PRKHR
pwS8V6da5ZbErNUCUOC+BrIls1ZXfgqDGhqHkRX9CEhWulGPt6g3x0vymD93
91fEskmryHIxL25b9Ubg9vDb+GCKQ7mUmSqaidJoUY+HbNfmNjHUcQm6fkEK
mfYONDhz2SLAkX489fIywvYn4ONBqEAelFpdvke/3gwjj2Fi14+ApKtpCvr+
Xoq5AsSizBgdlabix/AIw0DqCUVZRCh7TXFttGCq4bDsE27iwcIfdXbORzO7
COhAKKVakmf0R+G1Hs8qustGbc8dZ27QMr9zPRWH2eOJAb/vzHxBAF6bTgwm
sFfqxfwA9BqaLA0q/gjkMlMFoUkCRtp6XI82fRiTQGLo8x5urvPYA2PS8gUB
GV6G4RKOP9FX9OAw1u0BPSx9+hEwb4/SOjdmgHAE2PlJyLmcyb5LMF5MEW7D
qS0KsRbKz8DaswIEOma+ZoIMuHiYf3YE0Ei6n8tTL+ZHsN6JZKbNOIm8EJgn
g3arXQ0uh+ZDR9+Ma4BTv36x3/nk8Ez2UQ79ws/X4oHOsFd6Iug2U5usO8Qk
v82wiIwBzjB0gi7MLAkQYYYbw+rkTr8SQAF3G4LuFs0IqKYM99dqX4c2/7hx
6phXRCpzpn/weBbUNEHN5XHtWXZcV2CJzYRWPZphOatP5Ry4zKoqmdG7l7U7
Gi7T0sxRwqxJehchyKqbg0d7iRkmKx/dvt4SmAHm1jFZ3U0p53jAodMiVwmc
Lezb6La0D5EaIPHBIEF861AkwBxPCw0YDEoIASEg2G5OJuXHONESoKTX87Lw
XWFchM/xMdHjQ0PwybBWEz1uhn83Y7qCEHo71QBlEInAgJiDsxxGHAg96cYa
9Yv+jhch883QsKyuyRYYG+gyUpqtcUXJLlMrYcBNpdsQLIikttn22ucXhzhl
GdHt9rwSeArE+OPgTFVmuXWPCusy3ioBFnRSoJCpelNsuesezFu5XYro7iuJ
wATONGmO4VzIT0Cmf74DOKji1YbzwCAPDWHO8R2niFABEkWXRz3O9ScgmdBA
f0KW890+nYaDbTWHoxZDD/8j/Px0/JAuqrXq7juBHc/8oqfuAd8i2PDLUdSp
e+hadD/RbwW6Jt+jAfu2zXTzeKIJ5vw9ziPjaqy7tCjYOeZBdSv2MCEc3BFa
0z3ckb6mGQFKDDQjw8muECvCnQWIklLtNEndXYJhSlSUGYf9ioChkhD0Uzob
mT7ELJ1mBUD/JsOZSnADb7hMZQHFyS4BLaFkGZxCzjmfLrLACsEAq5p3R1Bk
HkrcNJNv5XG5r1tGqUh9AnfiKhgtCYgNm8ibU3HdADK6+8BjWKZbg8xcO10A
rV8wJQ3WCAIfIukIIGUAZei5wuVZIgBQTXbscUUnAiDNQJ88qn4nQTdpDGgm
MdyeEZR7OIZxOZEGzjCeMNcDljtQdKZWzIbDIXiIYcgnsNZZXRr08bKB1cK4
u0uw7DYDFkc35uabjUhOCwIh0hQluD1ukkmbZMmuEkBmQGsIGKl0yx6zSEIl
S/nheUotEVp4ujst8ZBf1KVIpQEOtGm9azPQkbU9XIR6UqstuuFMg2KDMuep
/C55Tfc5Mq4MkH2eijajbScK0N1IPDhfe/fOH6H0mw23lnm2mNPEKkchT/eG
wmMJe2NNXvS0dhL3tPZOE0b/BNNjmeEi9cjB5MJpjyalD5hs87l6CbipO/Ia
tYjcHKKgbnwWXWujPhQTspgfSfoQAp77I6BdBhpehtXVm8M0RvkObvJWE0Po
MKDPkr5Vul1PqQwzFxp8vaa1ZgQYoWOUCUDEKDJGJGyTTRtA9LkU6FJob2Bb
APbwFXRa2RgDwljaPBWjmyHrRJVAm5Gb8zXQZAQ5vbozESwKLAxYsPrZJQBw
QqV8kuOtE0Xe1WOBO2FkpnmYM/txo/X9wsKyiM3D8WChR2Ov7PYB7AWkAcHA
rP5aB5xgDJlgAu3R/ggYzz0Y6CFfIn3CRkV6GgnTld1zEAGsHuRDtis0d/2C
ag+YU4NSetzat2IK8JI46oQCl3IF/X3MhHEbQzKQEFLZK/IgwDssBTQPwytP
E5Sbb+oFpUeAdjB4Cg89ynJ4pud81aKBVhGYrOqGlwyW78/N/Qkh3useqplL
MeypAb0j+b3Cmk0mjGMIMczCgcxmIAk2wTlAXdCK3vzYwWeyEfOUF+1bEXg0
Oa7rejunIhictMezu8+qdPSg1ID53yZwKYyXmV7IhxECsLnygsem1kneZazQ
R+BJtLR/0+uWS5FEMhnxprO36rWYG0iVhjvAdqVFqNgRQ5GGo76eM+hGBvLk
XMv7OwJPjqUtmF6BChocOZPBYVo0mMCrBEyIwFdj4NRnJ9K7xItBDuxg9idY
ZsGlQYxi+bpKcHwGIUS8wHXkBTFNFHaM2p6VgIB46liDgmJZGSF7DEXFh8Dx
hYRvlcCgT57A85VyKXiCGqO+SHddlRAaBgBP91UBUapPq7iYMrmWGdhZ2rMR
UPcF3ErWvyVigXkcvsdtgo87BBQIcAVxuSg+he4RxC2MwxSA6Om4kwOgsoXf
w9nE6Y/94Ajf1A6ozpJiylORKh1UDeE4po+nBMMd1Yywxs/KC4Kxvs3z4KHw
q35BEyelgMf8mPXN5SVCyUcz+YsqisBtReAutjtwcimgeJ5WT2vYXaaInAO9
WbeJaNgQEcCZ6GSGRy1HWfKXLtMQsO1m1dWAclvv0LhOK339grmozPI6th/J
w8EUQ75v2IE8mWlhxjga9mnG5pnyzfs7k3g6/QPstn4xPMGtjRdaGJezGywP
WuQdy5Qtio0HR3XcgElr2E/g/mQeermfItunc+FGnwrbXv5Zbm4mvwviBDOW
1epSwMXRpiHFCdAS8LycXuYG1jcH5UTimm2loPDJpzV/AG1ueF6tehpw8Yl1
XbC9XLUtATNMpsMbSOjqUuiDbkABZ7Re0DuE8O64xzh71+k8eMYxC1AA1S9o
JH3cP0CpuH6xPFKFghR4jc+HWsS/3eBiYq3U1WjtWUbPgbWmYfEnAEPNHFzD
XGaB8cCd05fGSBLD2LPsjJmCucX+CpF/BGj2QyqOgDhDIkj8gaU87g2FFyAb
bhpPgENPKrDiQco4UGXonE+ystGJ3aN23NtoIsYk+9HBtCkATzRDXZ6Khh9z
U3YXT2NY+nDB1v6z53bkzWmKeDx1irpFr3t0kiIdPjA3DH9+Qb1mmswXfqra
Vw0ETZ8eDT2qs/h4lNh+523rCFbxvrunDpTewDuoSNjAOQ/VoDOGnM2fgM4d
OPn1hWmbLN3ugQ+klJqJ81eSgEBkdTxR/e+hqkvNt3mHHEO/y42CrwrYK3lt
ckvx+hj6B/rL87kgXKxfMG4GGBZ+O7xPP8ENuy1FJ+K8XsllvCfsoscfct1e
gkYpc7nqXcOMba9gYAVJ282b/hNcHjNFTs/01Dk4zd3fqGIiKgpiPwEAEp9Y
uKyKwAhi9o5LQP0KdpGYVBdRXRyAqONUzNnsSG0iVWqdLcmzZsTmY9rzSS0r
L8g2ww/0hPeWOSbHYEU6Q/GeDXUrAcMYyMRDzJWhaPBXMMsHyAg/CGMWeUr9
H6qdjOwVrklg5Ac6RmwXlHqBeIDMZxqKZyIBk7wjMHeL3gEvHUVRApI0D9UH
F3siMHoeml2u2QqY5f6cDkSPDjdQtBHIxNL7cmPXRvhF4QYBtedhopcZXz4C
sqkEBh6K0ktAqzWhDGQhVx0cJtGTZ3BQuqsGSaLWxOD84zT5T2BabFoz3EhU
mVQ695abKaiH4cBHQHoe6nP6QPXrvDk00K4bbPeZnboH55INzKlrBZoCmUv/
zHSBkif8CYCb0/WG2+uBwhEAVHGCGXKKCsmoOgB65ct75UvgdIEDRcrr9Wm7
GW7dVsBdSgF0M3gRzDTvurw5+DHSwRBtU5sYJaBSawvYTFgUAVWdCcgMvrv7
+QgOQ3agHnlpiEvgQe00G1LeL13iAcvPOx8T7Ve/IMHTGdINCjOc/QxngIAf
Tn/6Vit7ztBqZpASZHkIaglokqH3lVEJO0RltBSRGIT/wQ2aPwWAYFHXcpMy
XCL1C1eQaW2exnWXwETQptiF+e3nGiCAOfE2yoF8/4qgW/Fj0PFRfnkfBBRK
CXwXZvS3GTa90S+vOj0MQGhKADcihDbMmAvnAOQk0+4oquqpKoC/8vCESkaE
ntSd6YuG3wIyfJo8gqyBR5v2Gq3u9hyrmRe8PPkE8pLmOZO5OR4r9S2wzjCj
jhKYrBBsr+vxdSkaKZj/BWE/fPURLBczH3wpwBgzAhz0t83TfF75xTHyk9En
5JdyzhHgENFqdnm2eL45ZS1mauNDm+87AsJpXHMUL8zdEYAjMrARzHUqDRve
QqwUVBC0v9Syk106zkIwTyUsgpuUDBG1Z6xdlZnw9D0a2KaTVyeTSRF4/gAB
P0TKM9sHlYzGArXKUPgItgesgOWiGTBjUYHTQ4POrFaTUz25h1bbgO7tsUGB
nlJrJ83A5C7io/bkUsuoGWa/0mWcmcVgy4axpc2Yx6c+7TIBhinL3QBXAnIQ
zolCHhmO+O2haFBc0Q8D3imf1iNz8R5vHMLQETEA46H6SR7r8pi8CGhZIOFL
n16V4s1v3dw2Se/4Dp0dTbqex0SkNait5QzCLjOgSSKFA3o6AqgfaAO7GTeV
blkErAPYMLbx9xfk+roHFhBf14YDmdw9/9BUo70El6HXqCvM0lUCdiCNud0I
n5PHHYY/4WY8Hq+Tm8M2TuvG8/aA1BalDgZmHB1G60E2A3O1m+c/w1iS3BIt
CzTjeDYeM69LveJoQlZOD4apokowfV8jnp5V55xSpeHXRrGksO6sAHNtmabS
PRShBKYvor0P7t49SkB41cxdDVdK3pz68UPjGz3N2g55QSpqOOaM4yRLmH2F
+2vKR4MUTu0SuIaMc37Mtzbr5iRwAZECFr+D3jF5IH2uVL6HK4slgDjZyPf2
YT31/m7uUupvqvgqgck7XIPAmdkRMGZiQQcA1X+iCerND0Sdt2edjiCwEdDy
QnAAp2OKrAiao3l4haih1z0a5o+whNkWrX8F1GKkFU1X8kvjmq3ueHonAcAM
mxUMZaaYuuyxVE+D2cHAHqAvFpPOSwCl2fC4xkkB/bfspC9w5KHHWR4vU4Jp
ChgSi60wwu8Mr2MHZ5stvi4FKxUpYnl/dMI+EUwzKtL3RsfqU78gAnirdOS+
ouFAAr/2kSQOi/YTnLcN0WOkPRwkAtI0k2LRY07CUQJ6cchQH49xyD2IdzzJ
lIrfDi040CampHkmwjYGKgJ3T/vzdriwshnkogBdI4wFLHbVpUi+QsiKoZ7B
J75tSXQDm0aliE04XTSlg3cZNkW5+TJDrdMrkAzsEhAy0FmEn1YsNwjcw085
lWA8fombo2jcIdnHB8mnpTIAZ6fTBAwDjgCgFSeXZ1ufnQgeW7oNZIn763Lz
aUonev7IvYalgFt6kjijgcHSxZkAfc07Q7RJxTaK7KbCg7Y0S8TIvO0N3yjz
3TbQk1aTsxCMl6XkIZMVMgILGLYDhMbv97mUtiLBX7+MscmbQ8oCAwzpu/sZ
ta+c4CdjgymgiBcBsA75YxQNYYmom9Po6UGQAOCDjsZsDvPcwqYN5jL3AD3z
sqGT9g/YiLI1Jm15YCzDmnIPmilO93aDiWY8JTAfuuk0rqIp2Y4WGKpBsQRd
U79gC9AAgevwBGwEo+jt/fNAKlUTJDEREPyCq3Yu/iOgSkebh96jX2Hl2kxS
xeRRLnECYkVAaAO7jr2HpNu2x9+g2uDzhrcr97g9hQpX8WX6HxGwGFDEMap2
ZbqjfT6T1lJIZ6Lwz9y9wchxZRbUSP8ImmfB0toPAOaO4MZhBioOsiZwYyDe
9oEp11JTjAK4PPZ1mK6YdpJTl5qOboB30g09StA9tIOyGpNBYmsBnpFqcLEe
bzsv6OD4MTM+BZN4rxJsz1ZmkIv1QwnQk0QbFLBbNDWJB8iWCcYYoR3fB1ea
aQV0pm3S1PULsoWwmz42bqeeimIi4RjT2O6KIAGkkfIC+rlhgsjjGhHLOA3m
U+2MUkcwvYdgiYTeKbuEGQL0eW5j+JPx2pcxonQnMmT1CYhtg2R8gyta8GDo
jWBygwknJ5/95AWZrcbhIGeARc43J7/CRD0AcwyGzOMSRMAtTnBJhNlK4EiF
IgsEANdXQHplGtg3w6vmgYGEwriRpn4sAbw6BGsNFZ6iN/SvNx4zlekLtom8
ByWZ2/YfToldR23Yt3zcvb2KZ5uEHjgy6hCrG5sfAdliRiw+ZlJNDsBMliBu
zLoEDi0CQFQMrwZ0CL/pTwB38d/QQApyce7ACpgV3E3deu5dArLzj+fam/Yy
AteQ8T0YAH99LmUsoMG1nOnWS2DAFhMC6Uwp1denp3o69wA35kfQGf1FYAB3
wqh7DDf3Qy2i159xWHAFSSWAqYC5q25O3r497v/0GPgcA0hKOxjo4xELyUyY
4ZfJDg9V6YL8b1NA3mZkpNv0czjb8qxJuJi7SVcicDmY4coMvaxIGM8H6ABU
Xc3DZUsw3AhhijQd6d+lKOCifcA001IR7QMqY5k2i5y6IrYZwaC0xpRn0yTn
RFGR0GLzsQC91qaWgFCDjkdMcAVx8ElIC4MfvqBEG3UPDBQYb0xFC/6KgMiw
cOPinlFalNZ7rAFtGR6Wc0eA1drkEmnsSTMQyTlPdwbkzRzuUb8ACg/kaPp8
xNaSAnc63ZHPyAiO7UZhzwCFFG3PeqoLPTqNjXA2u5VgmPwC7l1onOoXHhsD
Vu5+TBETAYmK8VK4grDLpY5DSlpfGbTaPwLcHiZz3e5Qie/j1k/HZU5M3Ilx
jolCgZwwXIvfRdAesxFSXbs+J+q8OWGGaLd3dMZPsE0I8jiPzRiTLLvH9jAL
fjI4K6li2AlxAMikXA5O8uYAHz0Ej/iq5uOYkwKAo7umCH+ydxmH2P28NP+l
ycwCWDGNwW5kEX8CcDVQ4xG905WYp6LyB60IQAxGvN4lgOYdKI5D/jh35x2Q
0MwHC39SXYrGdnon4Ft+wotDCnqSKPX4HqoO6yNQfG8ic7go1+cX8N7N42kb
J8xGnkJBx4RuTu3uru8xmYBFX1rzAOrEgyAc5ltINrhm1C+Ox/LCY8S8gYR9
biYnM9FMttfrPfCkN/SmsF3clVs6ZiunBbOh5UMFb6J+j7/wBLa+6qgN51yp
EXZYq+JyskPpXT4OEz8pJIwoLQQNojsK/PlQDCmh1tVca/2cc+j1tjGTzbby
KUFfL/aa7pRR+gqo1vN27013SZUA6BKjc8lFhm4F5C6WFyIh8CqfD0WfGMUr
Y3j2RyF3TBwTMt39m2nN20PAzabPBnuCe2VeIGNZb9ovaUyOX+J6JihTXBI6
OHYJGqqa4h7NQIlSKSk6SIezhklHeVxaT3nHBdgQmG0JmBBnxiVwm60u5Y3L
WBso/p6yBo1xkigSsy5mgAMoB6dGFpwu4PSeCOjoBVr/8gvlUu5bonsJvgCC
4d8LbnA4jHHkHDCqrpVgwF/AxDe3Yd4RQBuxyEwCO84A0u1uQMLH6e9VfiI5
ZQhKbjPg35+nus2KA+kjRAxPrNr2OHg+HvjCVZ4M7d3Oz3F5GnJzKffIgz65
DeeMi8MIx2FyCvbPp8xBYZCCM2kA8l1RGTjuAHWah0I++/OLl1idMj3a965f
QGoA9pSgeJciw1cbuBNQEY0qrG+8InCFpguiFS2Xgl+MGT8wjMEbnl/QFw/o
A6g8nEVZXfdn3uYYMZb2KYEbs0C4rk/XL72LHodmljJ0chaRTPXjEZxAwMps
b0fTnrgEB1RFXuhJwGivuzQy2WF7HuplkkmX0BK40yfCC17k+/rIpA0EWJD5
0rNhdUsAoNfNJ0Teie7cJ2OSouXxxR9BY1T8cfkTkGYvQYNFiDSZtWLuMdkH
N5TrTlfX43oUHa3mLi1UwpRB31ZgN83y9MBEQODDBIE3fo/22U4jAjkmxfyU
ekXAuGAYV6jQrbo5DKwkkuGPvkMct8nAwc9Ioh9y0nrBwfSBYSAmTZW1RbHx
xgBQbh9pj0AASgWGdmrDmQXhD7jMJXqbMLE2g9n6N94fiYC79i4IGjMePrTN
9M+lGqS5YLjogX1i1RjOja6HccGthPmC9HO7SEdx7brrBQFNUDCdRiePUjIN
rxzvFWpeoLkRNPesU2IeboD/CEg2QxvDK+acU3Si+YkXtYHZJaDXr70zgO+q
G0C+R+vXZlQFMxvuCACJWKGYk6vtj2C7netxeTKuGt1RMHWB3GqeWVKC6Zbf
7pHTAZISZRsOQ7a/g665SmBMBIgua5QRARV9XMLW34kiEaCeaaynwvNRS9aq
neoVDJy7Sqa06ACPwprDpp3ELyjS24QDNHzg9UdASphxV8fTCmLPKZCRxvEw
AcqOdQ9zp4AUmibSyFpB3tTNLEiG+4lHxtGH18jWiEzR/AgAUXUnHHalDZfz
9TSO4I6PEHC/hJgAX3BQAUnWLzohiDYnJAqtKiaktRk7tN2AiXEowXs2SWns
atrY73Rh9+q5c36XQCv7GHrSGKSeCtZ6U2M4lnipwSFDYWGCNNPv4gZk2VF4
ILmaB9lXsoaUNSPdICLBrYmhR+exxAQGw+wRJaC67Lm9xNCJDcA30VpjvkPo
SPKhlnEcTDE19W+iIlQXrYXEladX2w1sKbBWwBVAhj0NeQjoYSe0Njx71M2H
UxAcQiDd9c1Bft4mEXCYPuvmoHaAbXTQ1K1uDgCTVn5cqU1zTgQAmslLNlgx
MimWSjjfvBnuQ00w34PpG8dNa5QpMv2UQgw5aKN3YcBNht6dAQAyaalmwsz6
CACXo5VMzFmXQnlymUlNrLKcy1U7g84exu0kT7088P6tky3P2yiBH2ai6jwU
MwLAozgFftzK1oJj8nQou340af0E5ImOE+IunIwScMiZA6ffwlCxSkDHhGc1
wRYcr2/Zs2HE6DTtc31a6NhB0ZmhAUrYn6A5nr88wg17nEvBMkcABXbGdIUR
QKT7tszquVetLp2TbNkBrq+f+rStueb0mNKllQPppN1lIIlZjOLvmnf7sqdC
P11IYBDQRwOiiBbFk9od3XhOVm4a71cwqfQBAKbc7+D3HjJmhjcBT2LKI8WO
0M17asvxUHIX8TL2kSQijIf0W1Hyz9jHzXcgctzuyCeNVQIjhJsRHafSVAg4
/ATJcsYDx8e9ImEAocV73FsEdPcOOOLoCgm7sUw446+WB+cANWkluOxQXkzT
YA5pbn7hand6cczunMKhbWx7PLcQzsMEcfh6bjjAj4C/pX6x3C5PUyzDqK4S
ONlD/+u9PKiyBN3za6iCsImziFSDTTzhQzprM5DeofYD2yLDlEYEDmY8EwJ0
YnzRdxwcQC4szv15XE6m64b+hnftkg09oV1z7hzq2G1+NkY1eurjzHBpLynl
MexBazW0HO9YytBlHliDeqwanhUMBqy4nctegmNOiNvcPyNOEYa0GbAGlPZk
BAeDHunTv9+gG7qnCDzqzXOGyZ/HI8PpICN8cxKorrUSuA2CViEgkPFep5uv
TGN2EXfX3qWfD0bSm/af/tnt08Agd0JQ5K4Nx+rZFWN9R/DtBEuU+mn5YwrG
iFqC7Rj4M2McIcCt3e5N5dQufslKNEE3IclP8me4jLHOOCXkMpdNDCiiP8F4
h1NqOxMHV2cYrQFgYW86s4Fr5OYMeqHhjS5CXP5kB923PPljT2EOLcaGt+jy
JEX4/XR8c4+X651OpIe2jRwcMh5AtbuHY5AmiwBYz3HSAMha3NoBkzaoUQ9f
/ARxdEsARCNuZhBANvV4OfNIRMNY07KINkNQzV5uZ9vBTIyXMPghfc3nraeC
AAHsYqMbBwB6BMsTsBkpRUU+fslwvY3Y2XM9K0dmt4301WaU+km7/Hbh2lQ+
ZpqbtbruB39osZtOOnwFtCHSYGuqzbzgxt317CMny5OzpKhPwEQdHlsUXUIy
m9Iq8xJgPYiLQ7OcKflwUq8elgJSpY8TT+TNtCtqX3mAOioO1gEQHz/BdCft
emHAp/xdGMSolCxIDTy2OAJGmACXBjVAmuwn8IRvWL+BceGflwBHja4FIxGi
MgbrDu8oVudmASJYeAGwooOcrFQYtSggDpSplmOXCLZbfm4ylMxZzlpRknyc
QKboVD4c/g6Dilyswq48JTC1wILnmGx41qq5tZRWXCAHTzwAZqHigdDYxyiw
KH1qzf1Fqhn6mqd6eWnhxKMOV5MEXJOELWObbBJCrwg8wYlmD8ofYWJDcMFj
iZJxNnWWwFPSKLCRYMuyU5SFVRZGaVjB6uawbjF6WK9BXjr2nGw6WpTaGnX9
WQLilfnylLnr6ydgsoiHErixeqRi0onOnxeESTPwXb+AUcYj2wlg7wTutNfB
vQO9GeF5oCoADLsHhsIX3Mty4hI8wD5JPrl3JALg+AzKpfrSTj0VKXqQJCTF
oY/6CmBG8ZDudoW4mm40DzF1BZDW2LwHOVamrnoa5sp0LgRkP8j1M9S8oNnd
/e30JrJqNVpyM0aU+IBM3ztvIIIBBgBdTavT+QqOh4aYNO4TO+PfkwODP8Ds
/Lk5MJW2zOmmhSm0CMMbSSUAoCfPU5uaYIthHt2UgBkMsv1Rmd/ezTCWFj5w
buaTA2pxkaPcJVgepUElFe+yfuE2k2HCAyakZTPgaJPSNn9stTVv0g7gOyBj
AzMVF8ejghl+qmPFkKeoJUJUdIBtGlWsbB/YvSb8nvAUnlmPi4IkMW+kYavC
eqejGRJ4OgzZdVkSurOb8bDu3oiBhG2cnBO6crsJNAIs93oHWIJ8y7LDzUI2
08jh3uvNjc/hBfEoWuHCQc/DnEtufjqP8xNA3gnwk4bk55OnhnhreqQOxeEd
CiqmJWO58Mth+E6zHPqDGPWivfYdwBiBG+5xkyDAKXiSke1MDcWyoNJaBLC6
PCbgpoUnH6o573sYCkhCN6TrJEVetNiyU5bB6E7sQtIEdpE8/Kx7AKsxjRBZ
w/KWmnm8rgafFCPb0pUCBI95bbcJ8HeGXYClJuU8DUHm4+wSkPy8DPk3CvIn
MEUKBZtGa1MVwxre0PYkVSrbYYKm7YTMrx6WWHCGg86RQfMYARKRdzmQzbBQ
dCkwMtKzJTBrpj6K914tIrCumzojhv6q2BkTxwcC5wHVbCIWBhldNEa9i1sb
TgLDSGczOf6I6mv2GWgzMQir1TefnotIVQ1bX8qyOcZupm4kf5+gQQJwxgyK
A1ldGUjaOJ1omJ75+NlwADDxF2BvoRMr70HDH3lJ9CLUQ3Vz5iAxWhFW7TvT
uWCUfcn5KXnRpJgPNTjIuHa8zy4ADRlzbC/68DIE/ifotuQLU0v7YFS4K/x4
yG4nW5VP5BCDAyAVTlkxVs2n20A4mitBj0XgnWZ60ebhAz9Bc7MhYzlcgYrx
ovuMbiRayvB/YiboODvu/VrTzZP5HqjBQbjiGcW9VreZH711U/yQZI0A+2Ci
RFCh2bvL9JDNIEXy5+e3d+mBwRPG3ezAdFsJmOFA/H4bkPeUAL1KBQIm+h1U
8TIykAKsK5pP2pqXSzvHGL2Hw/xLQDBeBM4dT7dm/UfuQVcL1a0LfiYqwxEw
udUd4Hij10/pI1iMzyXwo0LyO+fL4FZKz7B2mEU+gu4Z6u4RmtXIxpBIqCuv
NzWMsinBW9uio8H9uhHYn7jRWODsdglIpQ6Q2XDUtXpcEE2QtV+ukT61iGBu
tolecYTTEgNRLlE5bMie/PpTMggayVK8GOqDK+/hrghybuiR6pyEecZ01826
4z71PYzfoR8FJQ+SpQRUFMCqNXNgngjADwPUI0ZHxUWwnEWAO8bl0asE9Adc
nos+a7wSxQ93enr4EqC7uhR2Hn8MnPxIsp9Z8/A2Edx6pe6sLoUrAL2Q4NG8
msclCURnUnPPemA9Hl+ConkIPU2CG4HHe4FGheM3bKEIcPBoEoI/cda+AoLX
HEQB/2h11EilgsgmcQCcOk/1R0IwjThiin0ETOcmtUrUVh6Zz8ANCpuoG08x
96A3AeQXs8j1eetDoV/G4+HoVEevCIZnuN3Dg7V7ZoZ5MiVkfZ5ACmlNlp3p
CaSbwH6QosvNYeMEwO7utJEkOQI+qH7kqWnpogMGvDz1rZmTpNWmlo8C+w1D
luYuumCoVKEROgY9M2Vsl+DNGBKpk1DK45qOhCJOAwY4a5cANjzr7Y1i5esX
jAWm/LnAe/ba1KDkaf+6XZwZqy7Fqro4AA9DH9ntsABdHIFt3/bpH8HwCFeD
dU5tBsCG2x3/9Hm0+lD9HZpzcLpJfmdJqDezOxgZcp27FpHCB5Rmk85MWABL
MOzwPYa3Xa1+wTN1svbUkE5tajw+6KNdwxt3HU7W1RN0h1/o81QQ3zASzMC/
QMw5MmBfDXGFnvcXIiOAhx04HsxZgcMgQOXSv7hcgy4BTlx/odmQ3tel3E5B
AgnOnJBpLjrDaBUasLEBdqynaqa6Ry8ApP0FvIREZB88TZxZzU8JYLek2IeP
eqW1Byo+ZlERdzouuUtApohsLbmAGqu9mJfLoWIMICHHLxJevJRJfyiRAEb4
7XZaKDqL/rKetJl74CFDyAUfI20xeUFTk7g2yViRsJijQ/ECtxvgwANG4Kk1
TGDlkz/J3CFY7gOgS+CpqQsUDRekFyTkGcIYzXBDGEzTGCR1TKuvS5FEvuFV
mN8ENiA047vo8ngweasEUg0kpVAk0ktPBBSrcRHNS5LGKQQkisyL5TRP+whA
B0JVAKjq1D1M9gERm0fC/QLeZaZJpmzBp+AJvRGY4VZaYQDVCSE6AtenQJ9g
EnYrAehZWnJvV0nyuG4DIkWGep+rBNMoPwDXbtSN0oe6z7kqR+OUMCM48LNB
0GYm0d5LAMX+ceMaWYe6FNkXMpk0vp2UGmGRvshRvwSuZJF+ggElP83xDib6
dX0EgHCvv4Ez9WkHcViHg8f01HU46TZEDzu1vq9adkpLpDMB6EGHekoAAJKA
YlhvlIC+Agofb96p3nw0s7oDf4NTuhaRXuD78URM8jnxyMDAmlGFEskuOqLl
HMnlTCpsRU9tuOa5mSCmH1PK5XsQmC6GnpjQZ8VAQt1DScKgccR1KY/4Y2dD
d5kIEmQnitdD5ICgjroU82HoPSOOoYXhT0BaxXMgpmnd7l/wszAaPjHQjuyd
XDgCxjZwOBhgXpoBHlhcELQFpPCnBMCPlvs2nYqve5B0NgSL3GGINJZHmALe
87DTVl745XHT9KzADSzdvyKgKXTRjsuI1fJ3L9oKKIVBQ0PT+CwBdKfsNajX
yutDiTJ2FkYwcI91D+wEIzf7C//Oqb3euTwQG4KyT40FVmx2FYAqxvclxQrq
+jLSH8sMd+4uwSR6Bhoh5R/UvfnncDvcr2Gg5U+AC0qHwuNWnbC3MiEWPLhB
McOIvQjIi5g3gl+X5TS13Xore7iPve7B+Yaq0Yr6s1agtCASBkqzWilLYJrM
ocPQ424kxrlg+2Bs4LJOq4Nz2c0Fn0cOYAQbtfy09hfMkPdZknd81STz8Zwa
YL3gqWLSD8UB8sh3/YIY24PO6DdOSwwznWj/cG1LLlEZL1o5XKB3r1cNTIZo
1m18y7Q8VzJFy80Gk7FMwA4ob0dAtrcz4afPz6wUuEndmebO5vmJ1S5TIZvR
nnrtVUsCDAc2t8kYuxVmPAk8VpsWiG4v+SnBDbHKeCcDjjU/ggY5FQ1SnIe6
FD3bHgUMs2Pqaggg5MUXpebVa5eAnR2MqWZ+3Z15EwhIjQA1d/25PSUYNEfe
Hs0KRV0E9EVTRIUYsLV63GWinPMGDDQSROBxiGBMma2b9mxAVlaUD94508jz
VBgIcKekO/quQNFfDzsObyeF7tzcpRoS5xPkaPgTF0PSPBjPTYors2sYEQdF
vFG13Rv1J+APb1faIABqPW9OGQgXlrwFjLAlILLEDFESYs5HBPCtMVoTDXTf
danuxk/wK4BlPmtF+yzVET6L47MSHE8rY16t2fxKIHtCu/77s2Q/EPBAlGRp
kRhZROpOGA7IeUbRm1MPAtluZoebb1Y3B403PRga566OAW3vQBmhN/ZojwiI
V26O2WVC+LoHGUuAUTDdVxc2Avo7Dbhx11EE7XkxFCwi1fAcA2pQ0GJc548B
LALsI+x4ZMmuUVYNwoqBsh6gKSq0RCd40jGk7NSe8wWbmYU5S3ApZiTjck3Z
c0vpdO8hs1nkzRmfYIgSkPK7BDSeEjB6BHuCaphLmimAGbc1w61O3hrUInVX
knSpO5su8noZ75lp98R+gK7C4zavNOmAXQKoBrqbv7CcIwKmH4J8O56xEEPP
pHYPeKTH87rTAWrBIHZb76i9VU8F9ROpGm5MZF8C4INvdx9q4/dpQeJwClhd
2gjrHqBtaCtk8i2aLEsCHOW4EOWUVeIonHU45twI9mif5B4E1DfZIsYd9rSl
LZeDOANUrykK5nGZev/8obyenhok+CACdOwRIf1db05PrJcQqPHIgBME0zRw
MIN6CEAJIBu4oDK7ma+SN3cXJy/9vPxpTwngNe1uFaBuUTdfFAaoi0C5knZ5
BG8PD7EPAyPqPTrdZTDqdB+Sujm0m7QsHDPI1C7ZzhvhrCjkxGMqAZTGUMAx
1KLtjwA+KTg8J0NNk4D4o6yi8gFj99VKALpzgDSl4pGhaAzOZbIB8H24mvud
RSTehnjscvA1Wgnc0AlSxBT18ZANSYR3hyZTBlXnHos4DX38vA5LXYq2jemC
W/M4owioiNCKRIctLkUEAxgCo9rwplptOPKelJsuQGOyw7kH1KXL60LV9uw8
1fQgSncxE2DeJbBL5Oa046JNBEBYpsEMmNwrnxZU8mMUEpmDzwuaTwD/1Ob4
s+wDd4sZx4Cz+1X6CucCrc463bOyanB20w7A0NDbwypL8M41uMxC28fnF6Dh
0Q2o8ae0z6DO6R56cqOBTS+6AV0eNZJ8hHbMuHfQtXg9TmzUpfDoHmeJHs8V
LYG5E0x42grDwsl3z/tF7AEirt6c9LCJ4MCdpe5MBgAjq10w7DMmSmUBQdrR
UAHut97cOODHuQe2cN28ux5DFPLX31sChudAKg2K/ypdYpQR8P3GL8ZsJSCN
ST5jmK0sT0UixmjYC80QflGa8QiemCoxPY2zfmE+ZHrMjZWJpja/oDaHiR1J
Dl4fAYRPZqg6T9qgPGSKRCcd0vL8wuuMwNhW0BGU3JKT2c6SshyP55+0+gWA
jwZG0UMOovS3S3ZAjiBKesqZMHEUhUAUybwyM4ySwXXcOAGkp+BJEkARZOpx
JjVmNiACT67dze3eKwoZBMBlp+6m4yBgbjwLGtwYtEzS4IoW3R5dTTNVMzIm
oQzMDWYDop+EBEIEnkFMrARa74RxcdFY3206mHzNmkXQKMl2z4tHl+VS26eY
EmyjWzGOMB1uJK9IOVEyi5NKe81jchjzJITODu4bymYQr823oTQCDq5+g3b3
nOcSYBvcbQUxcUwRyeZtYkFUdS+vD6w8tSri8dvTjn4CJudQzTTpISRCEVwv
sULzEPdQuriKcDtx9wxr7XwoFOR2cy24iYpr4VKzQ+1ER5HALONb6bGlm4Ud
2T4CYuFF361naZcAl4+q5AKmlKjIbYmcQMBTruZEcBGjMvMO5+rUwaHfCC8Q
fD/dbrkHJwYnGcpa2JXzC4OjAAJSeblbLTv5/4u4CBtWk4HgvAF4dpsZ2NDt
CJhMAVcPYKieXuQFIWan0QA4Kyi07KvmcjEz7A6V+vhw2w+KFSFPRGIjAmox
xNQACAnpIqDZkrDVoXtl6EHaEx8z/7SZji0CLrMNl3CBP4/LX6Lx7kJZAcD4
E9BeRxZ8m+21zY8Aeo3uNWaaTz4UZRkIBwgx9aelfdbLtIQ/iAefKWMkXMi3
ECDgIfREXsuEVOA/brrvK0SGswB98sIgYe6LwFwE+/ZUMkogETACbDvzba6n
vAd8AsAyZdQZVVPvgQKnDcN/CuohAuAudDpAvllM6QiYkvlgiI9HvEZglCzF
MrKlwXLi6V7uJSG3Roa3lQCPE1tAUmakRLeo0RLBMh9k1wgnnHmmpA6THVxX
Be6e/MWkwsfY2nAVr3dIM1g8R2Th8obwj9qnef4B9+cYsKsZoEay+HoKpYcZ
oBsWmmbqaOGyQACwZxnLYjX0E6DR30EJnQpFFDL5N/e5Ur0n8b8imG8OzvO0
RuDfCGigJwRhuFVPGL4M43bxkwzWTqDIKFsjA2jiO8Uqz3h65iHidMEP8+Sc
Lyul8fZ4gQ4ZJSAnSi8yTdKVYjVccxp9jeq6akkGphZlj2P7ZA7vIjNA1hDc
EvskCnm9hLU4DWTqykNeZEMvZuF4NEd6RhEMo9sHaLVr1KaGcgg2ZMCU7ZMp
WqTnGbbA1AdSz7kHQ3xwn01tvsIX7snc3u/AnDyJ/CdwoRZMCPqQAlMEFzwO
cOWQTAm/DwLTATYbmHHqzZ3LoHjOqZ1pEwR4SvIDP2CSckrdAMGE8Mlz+mY4
Oayd4bcCF0WLxPgIKJ2v5dLkE2QmRUNQ9LehWbCcPiUgjXhRE9EPgjAlJnLS
kEZ5ihnRu0RjBCV0jN4maomAHjb6NXG3n6q4T0Jv8K1Mtx3F8UtTI8gZbccJ
FOjzC7JZk5m9/GtnUL0JdBxH0M7mgZg/gWm5SOvADDHT4MKeflyjJrUOK8oo
AcnVa9kHqdlnQGMcCDPlGZuQlIU+UffsKFI+8leyd3GUjksw+M1PiE0Q0DiE
D3UbFVSCYYQ+Ljsj27J3J4BNKFwv8/Vm1i9pFxjVoOp93NiZm5uD5qbGYZ8s
pRT4IEDW3VYeREAR0InLVMlmFy56l/oUhoiUnukgs7rLE89IcrwzC8ZHAHAX
tJwpNbKvyN0Rt3fku1J67oc/3MqE3RW+4qHBHgf+6jbmNwLWkVCF6jZsRiUA
60uNEsR1mnupgnkgETmA7X63n8DdYsPdSId0TQncIMFjUcsMmPsFY14umbAV
WoJqKwu9wkVbBVC6rK6OEpRfhKocuNpwIK/xQiHyoYhWAnIF6Nfl0VNxtukW
m8wkQZGQe65f8KE824rG+TSTcobJ3pv0mbxl8iUSUE2dBItvu3UEhBawftFt
cFVpyzRWIC/wF7/onQmBOtw6TIWY3yUhJAeAjntDaa/ugXr1HDCi1LT9M8SD
5yGTTLahkrLcYb4uNUTYLfuKoRjG48PIes/gqWlfNeqfJBUqvwSUyD2W0Z+x
EikMKuVFKOFeLgZEQM11ouRMhRlHmIJ7M0XqbfBG9BWZ29vEUBRZIZKM4KKw
Q7bGfUFJTQ6TTYLVBDgxe938Mv7CLB8AI7KIxHXsOg/8e2pgALBhmsge1BPG
59QvyG6afw7f9YprwGjFTmcIPVLm+YqANfd+IwVcQAdiDOgliObmU9w7pg68
GMYInyeTTPLmpvD02AiaUwqRAncZ441pomf3xBTRLUF46uQocMdcapvQZBub
AAaufuFBSqgRz+2dJaDj968xDGuUN8eJa8sjtHnsJDOZiwvjH3FZp0SXS9kX
BGpAf+ROKztdVExbcGuzsRZZdupDuAU3U17k1WYnQvLA9DjmsT07ZMykMb3/
yOY7qKpfNJrP3ykASPPNTWdAAY/i1v+j6s6OZUexKIC60IMjEppNKP8d6lwb
ONyOqI8KeDdTKSE4wx6Wx3oEXQ/Fv0/hvl3rqqLD1uveAeTX72gEdg8Pu4EW
rHtFvg/4lBDKsW1rXbW4MJHA6SKgNaFF455b1rgh9QS1/gxD1pLa/TOhLPri
LlIuX5fLCEuKTASaxsGaaHTNelMROqsmtieUcA7aMD61LbWYSSlTxwBwX6ud
cgsX+QPa+ljZttbHhTDlmLcRze/YKXG9QZl0PMX8qD0yllaa7elZEKjf20HK
4krupf2x/oL3Bf05YH3copqAXEa+tGN8Jfyj/ajvSzmJMPs66H85B/BApOz0
E2oxOPwvvTumCSk4rglMD1z9uATXGyXNv5g+uL1cgK6aOOLgosab6tlTE+yY
nvgWgQl+66MizUR6i4DAXcG2dBaHTyfjwGBeH4VWcHdvoO1PH2ePF6tXlGhx
WxUW5QvdOTwAX1fvh10QEi7OUnac9RfI5aJ8CnzXvu7VGdTexg8SgeL6MxHY
jVjJ9xQuY9e0+G15b1bckv//TaiB01v4DoTc9WglnTuA0BOpkHW5Yd2eVLBC
kK0DknCI7SSSbPGRmRO6i1esn+5Yd9RVER0g4MfzTjW3vpxHPaRzdODbqpc4
kpkfy8rCSX5rglmb/Rb+6v3Wa9BCaMJcTli9nmCLGwsRbq361QbEn7GelPYI
d9XBooOLXItM4uZXmqGDulE6YK3xHAtT5LAhT5c8+FiyGMqOkMH+ZusKGTUB
1fx9wfb+0Y06w62LkpbS3R/MRFy2400lr11+XmdwfgqBSM+CuPrl+aQ3qiZ6
a8+a4MHhLARy24pmnpRTUbJrp21XHUV0kfIRuoxIf/O2b7H+cSxz1rsXvmSL
ATdmAu28b6GKI7KAT/DR6/kW4I8jx5VYSaVqOUimspFM8YiE5AomnNhvvCv2
KHTd6y+Ike15+2DGastwDoQ0qZDtBqyr0lVyckXKqnQ/InmK0O19paVcMcMW
TtYWk9MIvn81QU9Wk5Wi7ld0YLjHN6wjTm6ov+svQrbBrd+SOawv32OxvElG
n7etW/JuUU3RSYWZWlf1xMTpoCOWfue7JlTuHC8fdlqtEtXP64oBxofWVBnL
FmhNMucjdkV1rzpTpcXrgojU+qhkB6Jjr/baGWB0LYgryPRnVdXIrz2iZh8V
3+Y5AVK4Y0+iHS29DJ0xQTZGgw70+a6/QNG56G6Bpj9V8doCJWZgDwB1rXY/
BTI6gRQ2KCJWpcgWltoSmg28Sv2O647r2R0r3q/8cTykIxancBAIJWviiIAa
DeiW+1YTbHyQzRXY/vTutmjc4MWmKLNoN9EbJnQDF6MXWH8BGBokYtQZ7j8T
PiIl2D3SIn8m3lQ/pNRp3qwJjMIjWzsgRv3y+IhC2EJMvGtPFDx5C6MAyBf1
WhPxK9hazLiudXdFtZ+yGq7bW2xZE66VT9x7h+9YEyF5xVsxpeF6cQ7dSY+o
RdLuXBP0GfXW/U51iznR7lCsuDhIIdflykwUqXjUxCRjTShtsxKHm1zNyS2E
PxohvF++ldHHkK0L4IMtl+45Hea925YzM/veP9/BY09HmoDU8or/vYDYOHd3
5tjucgY6Iz15xnaCct+qt2sZhE+VsNYOOCey0hSvYlq0QIUEFVxTRFXgrevR
bsBz8QVnS7JQSPrU8UR5FCmeBXwP9Qz1hCUkpHJtfdpRV6wN9i4r0Scw0q5Q
/B9NQ62CmmArcCQqO9NOrYnoaL2dmadE82cCYYKvXggu55p4Qy2QPlKRO2oi
Rn54BV9XZl4TooYnAPCAm+aE1mtLLwDsvTKWI1RRFN/I9rfqIgMeWIcczhLU
3vXLUQrPuIqKlp51uYndUi+COCy6I4Frzoh3t116q5F7hMhF0Q4iXol0fTnM
cIuC8bsv2ZjfYuMSwnvhShvnqx/IPFU2jVUVaYeacKqJd8lc7SXccITv53rO
FGYLvRNRLi2hg538vbQmIzaiUotjm2JOTVxvEJvM5K/Yz9UEdC1ZzpgylZoV
bequicVh4Vu0AmAT/MBPX5tlwrf+QsKNcsPX4SlBQu0bDEXxMI/H+6mPsvFB
ee8xbLhaTdgqQ1R6Ik16P2uiWUHiViHLV4v6d0X4OOmK2hnXXxzZIk8l+Qid
1QRMwpHLviNLUBNkCuCu4K+va62rFkw8pOgeCFY9QVLSFCfPSOGW570J25JO
BjWaImEeX94BADAXvvTbg8YiRMZfDYZnLZ+WI5Kosz3tavVoJT6eKHhIwGo1
EXMzmmSUya69lihZOrRjmPdzmcHoNhGbtfnz1v6z4HSdJJzxwHm3dXdRo9Wq
9S30vddH8XTV/jzCmF23RE50xh2QxHslDUAJr/hCm4F+wLpXG9va003Cblof
RVN6s2i5xVjBa0IbcUtef/1RUBYw3/KfvbPr3rkhi8nVyYgBaSFV+mpC6zPG
QS2knZqwq26UrBj7fLXaJfkbjIVe9LaUbg9M42A7LCpFzbrccOGbXp/3qSpF
OGJSRWkXeagyPjjow2oFpGp/XuXtROqME9Vwu0FBWRMyVbV2bYK2LldOjatx
9Tzx+dbEEaxzdGWOauRqPnzxBL0iqldwyuE/R0Lj6Mq5R00gjGRNEF0oScnw
S3/7O68v5afKtsNClK9B97wUt9eX6zn9lp3eAA2AmhC8sfMWRfJRrVtCge7D
1wHN2EsRSDtKcwKaAJm0Kl5HALcqd7TlIC3WXziqg/KiCHkc9Wiv7GDgB+GF
/bmqhBYEoulmnutehYyIh+Wrf2txXxPkrw80k5yT15ro2Og3vjPrrYWS19Lf
lYpiw/5nYo89uqPnLMrxkcURS5kNL+jPKrFLerp6v5GhqYnOADvjj3reazHY
mNCwAeiIVtVHUdcBHUCBkrfVi3No5hN08DK0ElVIAYr8LrgaI+e1RH8BBjVt
twor4Ksvj30luSEkorOaxSZ0IFIQlxLX9voGJXaqQgqrWx30r7ff4bsnjPru
WoktRQTkBEXcqu8ekWB/RwlXn3d9lMNk64ko1an1URjNQeTrFX1/vrw5BAnh
0Wpp60FZ5ne4MLQSnrVftbDYoKRhZasCaQL4NI0TiOi9rYn995261x8H1nP9
Ds1r3sgvNsezvjzqJQf1pNyv9UbpvdLTkd7ZhOqjYh7ze48b4dqnUC9HVGGV
j4NMOP9s4b4AXB3QIDbINUGIfgv+ihjD+oEpYagCRCS1oHVH/Cbjdh/9z8LW
HuHHqE6RrriXasTRA7gjqqiSwrN+4BZDar9BrF1aFhDUu2Q3IH4s8LMmCLLj
JvqGo8pUJlJS+v1wrjBlDpo6N7x0VPbvvTiKSvLAl1+c2uH0tz8TeOotNaOr
nIGObG+UNT48bAWaNQFixLBeQFaYO3ZEGlK/n8/55FgPipktWEmgEan91kRq
tafD5q9wwxEgbItpngCv2P2BUkaWm4SXO7wmYkhu22GPsa1b8grPW4TxgfIn
2lB9BvJaaKKT3P58R7hPeL0MDSrBimaK1alLtEXYck7AFz3CJKp6rLTnBOW2
rjF65xTZ18T+5B3hIXWUyqa8QllNwJKAcS0GXr57PGQbrH5tloHfxHb9i4FP
xbuPfBKo2Zo7jpKggqXEf47Ja8gF9VG4/VZVix/w/WciVTM95Hz9eoIIHEgu
tLNFpXV3Bfps81qEm+6zlo9XxqmOVfR8a6eOxbANi44pMZ97TURRjkQynbhW
twR7qQU7cCQZ/WpChBpFYKI4hd6JbsAvKzvh6oEe1+84I3jwO/qvRJB7fYeD
27vPQYFYXP3F0VsJDHW1jes858NiCTxd7u5YV3UEVw5KrZBTOvQmhOECaHzW
+6qJphaFyRodnML7mAiUUlFP86dCZ+qSVsEVUwJQxZpI/7o3r55lkAXC8vuX
AOl0675jvR/0+MmLIiRL1t41ocrY0pHjFFUfJXB8As4I9mWvX75T6eRQI4fU
8agJkSgNVdXl5Rnm38lHn0Q0MoX6gerReF/PFR24ylhCFVcP1ay/sUFq4rdX
bPGuDx37XB8VaHcH9gI81SoBGiKUA0PPyW5bE0d8JyPvpapRE1bDyZhLA7S6
ryY29r2ElY8kAzXB/ULOThziKCQgFHL07mWCfl9t4SKFVHJub8FWpmg0gYOu
vAW1YAdrwqcpTrz42/v9Z+IIaFq/LEdYTaT+flCPwvquTT8CgR9DlKYHVPXd
yA0eeTHpJbHvq4kbsgzD5o5a170m9mCgUtY61k28oSxE8jYU2N5tTWDJRcuC
vPusvdINksMdkE7qW7VfYTo7amzuhFjqCaJZMYUm6EWrrNaVJhFDhtjT3Kuy
bcIxlEch6bvXhJNbh5fOhN7hmriDvaSLdxzPelBPpJNpbCRzrvAcbUj6rQUE
O1U7QxfQJJMSxOp6OVV3uPBp9B8gweeacKZsce4F514fdUUQhx6POnZVvO47
UuK4jfh7K4CMcgDgx5WnVablRw7+CL6p7V7fWiVXN/Lr9+wr3nY0vBkx7hE4
2tZpEEdi9WmKGj6qrgrAAUgF0Z2sUj0obW/14NhLHateor2wI+tEyfer9sCh
0QRjESVUaLl6UHo48URyeBFMmBPI1BGJS9xyVGR5R9i3xbZQ32ktn8akyWvV
ER7f+ihKS80munXf7zlBzhb+QvyPYfNngn46a3dqcM9RO4P+2wu8jDXVVtHJ
m6GBg3fsmKyYQaWbIEdvGt8lvWGCmTc8RdzotvVRGDIRY8ALuddNJJeA+rUH
pbTVpt81Xe9YcyomTwzkEVURADn1qnatBOtKmeaNcvQDnjJ/IJsJQcsd7Ndd
AhQmYgbj5Y9OdX3HG4YV7ByQa/G8gqZNNwqfNNa6c8J2tYW5iPm2oiWQZMes
pnicON6a6JW+GEKqul81ETugz/bL97FeZ1EUWbHURmJ6OSfiDktIypp/rvU7
7iRJwdviIpzrL7CWBEq6yU8Be91yIpdR8XFAVgbpTOlCifoSV2lZHHHAbQmT
kKqedbnSYC8JAcM4MNeEngGb1i/U23pxmAVREhdBqQPWeR4VAI/woNN6lDQN
dYs7fua2wPcpUR7E+fC/aWbDk1bMwD8mqgWWCvfF9RcW4ytaTGHvWH+BgsAA
PEbLhXSCZQpaO5JR6qDrqqB9kRNFhMqUayKWJSSrg1Go70AnukJUCNG1chyv
kTd636Mv1tYqYW/GPFwN20GxrYktpA0Sn8qN9VFR6lNG9t8yyIo4GpdE8olx
hvnWhFz6CMAltLya4EeO6wzC3EouGHyXUfz3JHn9im9wRN4btOcUnmCnrgly
gQBYTz/wa4LigQZ2RNNXhJySIKFrWHnLaP1F6DV8EgQU6/BCcW4IeWRU5Qd1
E7Edr1g7kse9KhDOhCqy7CCKDDUROpCKuvbA862Pwt3DQEOvgeWriQboF5h+
ihF127cttaX0whlfzfdDUPu757/X6ohHbm19Z7hE3jXL8VwRANXDN2/Z/YUY
PK9KW8KmdAWrt6wMTTBZh+rfAk1pa8JhExRfr37VRMfOWuw2xtoA7B/USHbX
JbNcH5WdwlbTFGtrL+HOBTbNwSV0nDWhR5aw90pA/mdiD28Jc+oBoZkTQDhK
CpeT6yjr1SM6Jd4eCvHvsu0ysbWO1B2OO3NCXHvF/UCLvsBGRy9NyZsjulig
EBMeA02lPbKzdVVR9/UlTIOPVXrRuH/pCmC4xQKyJhxbricQmvLmOLrFF0g+
JPZbCn8AANT98/uYO6x7BSlFzcUhb5nWM5ereM1+yX6CgTWRdOkNt0d5f31U
nBrTIQ2x8lsTW0wWFeIRRup3EDPgJxgnkL0AAukB7tG6Jcf+ltaLMjOMEXFz
pOpVlIVbgzU8BDrMc+tywdIxB2EqAlVYEzZwtSVlje9eH0UpfBtwnCXxCZQY
MYcrprBqKnMiVPEWoRdo5fZnQvykOnJ3A62aSH4aAIasujYAYDi1HygXAKVK
4joTQYk3oKZ7vc6IJXdo9i2fWq/z0bp2lPx8u5/1PCTu4EQHB033uSbQpWW9
T2QD2/qLO5bFolpReOVRQQud2rsb1tixVkmadmjkWzxva3uF0wVFBOvjGnz8
mVCQvHuY8zt511XRuX11c/VAt7XJoBKkw6A/AdG+Jq6u4wkXdq06teNKT1gw
zsC8cs5uVxFrZ1j8gpEcZzwGoBGDdC355oOCHtmdI9qRiJd/JuKv9hDm2EsM
zZ22pmIWsHkh15d791p8FONJuybI6AkA+FFtRZc/wumDcHXDgsarid+5FBX1
3yF9Kc3UBNezLXsMI/aK4aQYv/x3D51spyQyJoD9n5haHnEbqgfl9b/jhpJM
+WjrL9IjwsrDpF+NEREMvBaW5RMhp5o4ovOYd5o0+VMThKGvcDSUHP98VAB8
QXjpi57rL0JDkAu+MZjb14SQhAyNZu5Z4bk+4J2DE8v/KuE47IfghjlobmFJ
1YSt5euatggJ9R3O671FmQE/fN0rB2bI22fc9ipmUO3/Ui0RrJ0l0Rbg+vHF
VHw7rz8Hy+8bQT8gtxoV2fUdELcRm77RhUvsKciqowX5Gte0da+eGFPYWS/y
q1VnQNL5bd5xkMkp/XdCqCQORVEs5ICNiK/SHmGhq0RHRCOYSJo+WzQi14R6
DHew1LC29QPvUWuiMhdl25poMZ62M0sNK96VKXYjTimeyG9OCDzUxjjeemu/
NZFu/280OdhaV/yQdZ5RaGyA9csVXvn/quwIWOqj7NGYONF8eUrd+AgHWXSa
HpfebE1EOVIZC1/5WBPRklF+TWO0pEoPZvCywCuKOUuz38QViw/R0bEUYk3Y
/K7AENSj6iZqqkMsUfmh/r3+4iJdLl54gsWuH8i7Kds7hCa43JxoSIp25ZBx
VkuIsMgZciZJmYWHI4XG8ZpGa2BgtScSs48VZUgNqCZrgonbEd1XXmB1r/Y7
DVDK0cpFa/fZA0pXv9rDa6zf4Z1HsI89+xKBwa+UbxFuw9ddvTsHGbgmYMtN
xqBu4h5xVm263S+qBo/S1RmaHiXxa1sv52+7uuLcgNx0ldjsgZbWOrDQUbBq
S5DM9h0bKdn1e/2FnPd2qzCyS/D5yCYpsfy69VsVtrQdImWHuC6oWlfFUEbe
Sr/qXqdzo/+GlK6hwllsq4kjwqDQVgSUa7MUSzJDeCL3qlZVE9RUhN/R4Vxl
Q0tTsqCOfMcbck7oTF6ENPG2tnIAS5HoS1kdzHQp8JvI99+dMluOOrrRYjGw
v3jJ1ckZKQsZ6emfX8/6gSz5VLxiugnsNCcepV3SWwqQeso1ESQuyRrZXBnC
CoyBIiKb/bx/kByWbYxa3m+IkNbEoczYHFXvudhn8NWqWVHSO1JpXBMe4CZn
eWB/1l9cAeoGM2K11FV1KcaN2+i1PwUYZ++nBCoFVpC5KqCngJKKP1HfAPbn
BDllKxqCB5r9zwRX2S9ly5h31wQ17pAndHNXb9vbQnmKRhm0T73OLc0MB3FE
AYtRhUsMGwAMc9B+XDdRpx2VXLDkha6rAqf9Rq+YCkZdFbZDFPX5tNnK1gSI
t+g0+L61SjCq49iItnXs63noujy9+gs1X42qrgAbA06yAHvtDHv6Y/DtdJr2
p5r38GZb1KQ5HB8Lk7p/kaQgaxpkeNUyRHXRL4ah4+UyHy06l1aiuwsYur4D
EUEfUO6ApL7+QpHhi2tQNoC7JiBizpBeBD/1y0Fat/BRQLToUNcEMtPvxX/A
S69VNdhjzMerVRXmtwfVRzmZWrrIO0Z3lYr3oOCzTxPMW+BIsWEwk1tXBirI
5p4nCudw0nQ8K10irrdpGBKZQv2ru3vTJtgitvLlJ9aE6FzgqhOyfAHQrwRW
fA9lsStLZbP5pHB+CT5WDSCYrCilE+fdF7IGl+yJmQbBSfKWawLoBJLyjSB6
XRXinJPO4QKteNSENQfzgRwjpaoJMPUnDmvq0nWkRoGNLYDmEOeePxNxDMBV
QxmpRU1nKnLSyXCvlepnLWP8iwtpNdctgfMJE+HNqqzSJDsXfncQKyKD9R1H
B7ze8VH8vdnPmjijMy+9aX/CWpJ8EdmP3/Uy6A1aMKqnyWbe6893pCsZRT4c
kW99FL4GMHycoleEjPr8us54GrMVronQ4uW6AGBvFX6DPAXYpH+q7VQTEIgW
eUQ29gU3JslFFPQJ8eh3LK2JyMNvkeB33NdK/B1oVttmtQMW1roKMoE1gUrS
vSIydhOp0WgHX3+S6pRogBojRfD8ue173oyo9cc3aU2ccSr70t5pf24iFVtV
ETWsJGBrAt/gFRJ+MRxZEzbF1kO4c5042uyqW5GO0LOo37FHYSeMpmhXr7+A
hY9laxrxlX8IdluHEzpyV2lyD6UqxHiNv1ZNPVi7h/WJtv7xp6Fgt2hB4ylc
anHVhJrdERr0bTF8a8Imh5+ojbeiPugRBTJRFNBc7aIbXiQLMu6qpNvamlCG
Cr1VV7puItQQJMLtm2GP14SLxZ5yql4LL7rJtne1MHToP7glE4wDY4fSztLL
OMatSmWLV1V19aUxjgNlLYHTuqo34atGjSLa8/cvED22mMJ6tjUBiwERckUU
feH00Su9FSdJwMhc1MQdHSGlPaXfQn9uIGInJWjKH5RZ10TcIPYsorvYy0dn
7tkMn4Ama7P0j+4oWmKAPn+eB+sWRkowmL7prYkr2Q/qAIpI7dQAtE942Zpq
W6kbH91ThjZ/bHhKswaa8XenIKAU+sj2rAnOn58kuRGvr1uC+fF7Ur9Lkxus
nldsgbdEhYQN2vqLy9sibtf5OdYGEA+BM6gbp3FJx5qg7YM/I7Lb/nyUKErG
jgtwr7Rvi24DGWgUoX21l6U7jC1FkvGErntFZDd6pILwcx0sbFSt6lDEfyt3
ffkRUfdwJoVL6wmCwHk9EWaSBdUEFXqx+x69lar18bS7ooOmB6PmPidaRGMJ
1KvirAr9Zqem5qDSZs3XE2wUM960lsOP+TORRBtyStJfgfDWlGO2tLuc0ZVN
bJHffwQaWP5tPVrgKvn8G/m/lcQhgAGl7cTp2C60NRHdDdBL4UmVRdLjTCXA
v/77oDatAfEgob1voankF0/0oSB+7nvdXRV16Y/mOhD2+qgzj+KLTfDzrt1H
hfZRF/XKsfdbExqmyQXpSdXhhRiBNyFHROqeC44WTd5lIGjIwhmqtZjg6gbp
kMvL1l8I2nfvzC2nmlFfJlTfpBNbDGXnRAj0lsfOjruOVDDKCPvceYBPldVF
5DSEgHu1Vco3vGFgRiA1nn1PJaNMY5w5wAHJhrf68ueJX/jJ51cSXV9OlgVc
DBJKJ279RdrhN1Z6dMDfmkAgCbwG7K1qZJngTbQHz/pWAbt1JQ4UcZWv345S
NzHudJQQpI93tTMzQZVQh44U5PutiWzKL70MPOH1F1fUy3hLov9+9eV3ymxR
6Nbh3+uX005170K7/j2O+osr1OFkfUL17VkTKrEiaAqyx7U+itILbTzo1Kc8
Jxu7AOsDBJTa/v6tieRdR47T38qr204yERWwpZZd1hV62rvyPaGy91y4cOK+
QDJ0c+PUddWXn0gLZ0yvo/24viMN8Zy5cbNf30FbD8hVCwF9c04IRQ7coXQD
72P/MxE6bmfrFP0UzGiPSwJQfFoxNbEneQtiel/xVYseF3/H1OLuat73iadr
QMOmHXVVDbzlt0jflH/39QMb5WrEJm3FY1v3Kq7rEXnZ0p2ptUvcl3bMHv3x
/ay/2OkvCo1RFCHp1gQFnJvBMkrluld7yNRcpRxQ51pwexg0qbyS+zzWR+1x
nN2iEvfea8vY7EsbLejXXrM+Kn6e0Luni60yFUXOrW9Liglf6emrlwE+xnlE
0Lf2K5WJI7KAdocSMMKCi8UyGghJ0fqLnIH8jLkeaH5dNaEi8sQ+WLt+Yopa
VFCv7vK72/7Xd4R/ykMyil73+ij6mtBor0r9d64vB/r4LewzOt/ntiaINlrm
RJL3apOrAUa9VPP79fuONaEEekebCvirJn6pE88n3grXt2yDTdhx1Z6OuPbU
dzzx8RUBdFjFXRO0J0noZJ0W0bPFLe0KU4Us77eu6oko1BHfrL9LlBKXLm1L
d5kM5pyAKJB/wE3aMetyCflJadOZeArxixikwocJGc+wda9u2LLoCIWdedeD
gtd+j6DeIiyzrQnn/xVr9qCa5oTzCTXh7AYOX92S351WqLZQ7hywa0JaBodw
hky8PorgV85yQPIi2OM+c8GiWXd1yteawLzdU5IBpq/fAQ9/R1wVLrf6aiba
Fzv4LSSzv39BM58KQUtnbH2HCApqh27VW1oWJmBL77jV3ssJ0wT2GmmcSGee
6y/URcBlROlbufC1kLjvfHj6ye/6cuXYruKFr3is77CZfGQ+Oju1fqD8EdiB
vhqF4Hrm8Lh31NgdZBV4sYnXWOMwvPeEvyZ0pJXHoJbRNuYEvQ99QGi2/bcF
1V/o3Z8pat3dorcmpLR9Bu71+jNxJMh5qcpcx7qJ+DOxu+logLWuSCSC0YPe
I2TWVSUX3WLK7nmt3YcTA+Au5p1mYK3ENMFsLrqgS8u7Ja1CWt1oUbQSJGyM
gk7evEd4W++6KocH9FHcTK53bQCbkBw264nPeIU4D5TV7xmCwyll1EfxKQAU
d66mXfTWBKLfeyexh8C4akJj542kpJJCrauHjLXa0gOy/ZSNs0a0YprsBNCi
KnexbbGrgn4/Ub2riag87kfkxLfKa00oW9oafsf2U8xJPrevwhZt1ast157U
v8Nn6Ny/EuzUQdIbZ4wQ28t6ccQoyf0BXzYw2D8ToHKoLTbOtiYIduGG67A+
bf2OoES/gOdOVOz6jjjLQ+7fkutv3fYI4kT5n1vkVsfEo/vIbOaKrkRZJVAR
plzy6Dii8K7bzhxGrZjDM4LMWRO686ddCMa0qrVCXBHMFTV2Z8bxZ4IxJutg
5ainJn4b7hOINOQGCFxN3MG0sCcFavzzF0dC4zNtZCX8miChmSjg4dO71++I
BAWJ9S/SWRMBYYLY1EXI05u1FrWqC/AQzWOa6/XlqpaX8KpxiSz6aYundiCk
MRQsF/AWBzd5IAwZqE4989hjUGEWQG/v+h2M3iD9N4WMb9v+THCCBZa41Rbq
EI4JjoJXdO2x7GoiXEbCpEqLJfEpPbXN7NgwaibrQYnrAhDqR2qdzgLTS4Pq
DjmuBHNM7JgTgbc/yyqhQfuIdy1SSjHnn4kjFPQrIvRricZFKT1cX30WWJXT
FVSrJJmWx17nuagYddiLqzxYAb1znyeKths5qHoHAQZIRDKvSvF7/g6IXZry
v2hbda/oKiY8pS1up3bM+o4njBwwwXbEeWZNaJaoBBxRutxqAkBZ1qUd34pk
ZmKPmIbo6zpKrDwT1OslnXtb2m0t6DL4CA8XmmpNgNPF6S7syXt9h1qX1XBs
kc+uiQjUa0E6YL7iWrYYO2sVU6BNDXFNbHE4P0Mz29cTvHOSb471jvZaE7+c
NiI7ftFRqyRh/HVFs/KXwJ/n+iiV2qODZGgu1V/Ax/gif/UchRfNBH24Pd7g
R9H+TdChbrRFLzKr66MgelKIhw9bh/AdF9jUr70/fxacsm7eM8Y9Z1vPAzD8
1Im8e2FqTaRIjccTRZs/lyv8tbC/GPSsJ3hGg4YyFf7GW/uVQJekA7D4gxNc
z+MM6hT6nsNZq4BFVH58AbiCzBbSqTlpYedDS2U5uCboCsaiKingeoJaqXKb
G4xnmRKEDCp93PYYCZW5dItgvjdQkMHHsr5DFZifRpAf+9rCHdXs0ls0yba2
JvY3Boi+GYJ+LWoJKAwt71OGCWsi2sJvAC4aQLUY9vAyQ+hqkciaE5T6j94B
2PNgaiKEDrFGC/a1HpRWH+ibXEJeWLcEV4TFyRZK/L5+uYgvTo3bF8Gt+Z6T
c1P2UfcNBvRbE5T0qWJn7VYanrcAKNKZvv2pDqIPXXFAU1C8SuXGhBJEgNHH
tuRWTMjSIlSatuVWE5t8190AoanKtgl0WGfeTcKuFnWk9Ty6EC3eFUZdqUpQ
O6HP2KqAbUIn0YVFC7o2ABK+OBAPScJnOXRnwssMhQSlW+8HanvCKiIIPrUu
N8J37AmFSsffqxLvxoNPF+eqHc6FIHlQlKA5sv+dgAO6Axl5//zyp9tmpR3+
+8iKwpklt3Rmv2gJrechjkLBBssOnqUmWnY8qmiB8dUtQXeEk7tUW59iA5r4
nQanXAzpYKvKBGNiOh17HN2lLjVhfciolU2vlQ8GQk7XfgNzu8pyzhr8HcDu
eHB3X+UGfEHuZNme/LaKmQwGYnV9xFH5/PMXgEH5zXvsHetBKUqCUnzBFpcG
XayTvKH8e6Mec64J0AHKmWqde21Lv4ltj5gkZ+LVwWoRF9WmiU776kd5hSBG
7ngKy2nq0apafzYxKJavrasKkCnSML9U7VlhLbZTcEi8A/1/3RLoqlBVdYbO
gpG04HOizeU8fgu/q4qJU8T00bGzr/ccaYAes4DsXkinTvqM6snVd8f7z0QY
Lg/FyacYbq3T9MOAxz7c1yaTrJMkl/1d9enPBHTOfkWo9Wnro55k8/QFlS72
uiWihqY8GbOY91nfcUW/LwKGx/6tBWdlUX8LV8c/WxN7HHv3qEYcf76DL8Ed
cdc4k66PSkOCxEAwTPv6HUFBgef9ltZWqDDfoK4SJW8b/LolgNRNUzQOr6sU
hicnyvCqPxAd55rojaJezzsrLonUoeqnlqo3qn5gPCU8Ef+3F5UdUvOOPgw8
0rtQYSYAEC5hcmCs66NEDMyXo5X27H8mHL9HrJ/Ioq/v0DOAXWnZldcvR9gO
/gsgmCJATTz2BPSvXPf/TXCCZnFCTGDtu5yC9mjyKhusPOrq2uZfELO6EPPL
sUXJoMKv2tPqozhQYkiTtGHIV1nqGR5p3BJtcGUxYELqKp/eI+W+vuOJ42Ts
39OQXxMn8Y07TI8lHg+sGd8nzSugzT9fjnfHdrEjDSa+pAm0qbHqiYTR9dVE
yhuKXS1lo6Mm9pg0Keif8X6ZE9EEJnADUKYTuCZocxIZ5UlZwnFU7pTDJXhI
hIWz/E3QJ8D5F7hIFudELJpftBfXV44hYRqGYqJWJpCrqxK/oYVoReh/ro+S
WrZIYvCWrMMLuQIoW5f598CeiU4wQfRQ72NLQ2l9ub0HFoYi6rPaTnZ05p9R
loMCrZsoYsXQBFgD/ll/oed2HN065lt1BuD5Hr+ldHKu50Eb0V2lfy9zr4+6
Y1kW8U2op9peI6qi+3JHo3q1z6IpHDGrvKSrOqgi+8ltQsz5Uz3HE8fQVJPB
kljf4SkRzrXD5tnWhKBPETNCias0SStDpesN4UhbcU1QNbNa8G6LV0Rb64x9
rFvcFmurpZGnBAJckMuoCTSvVAeDS62Ymt1SIpM7BO5jrRLEoStQSFpPbS2G
WKg/Pv+LyE/9DoCWIwhsf1OcuHZ2t3CMH93vVT33Ht1MnslQMZ+uqxKRn1+n
YYBs1EfRw2OKxkaRM9S1Jq4gS4DCFZfqo3anH4c/VY5jX2s39hREUqGq9hUI
x3yA5ifY5va2tWWwdY4JzRYkcm3IUcFXMQA+gXiqH7iHqEbguCWcWB+1pVl8
Ro9+acQD75HsJPr4KjuvN2oLf4045RHd/H1NpCtC2q2ncWPCW6GcmepkbCxq
wq+SCAvg9hLNbcH6x5P8iPxpRTJamba3Kx7lYE81obshTVZSXMYgwZtHV2yL
r3hpsbY07iwPxaRUW2tCtz3cBZ6ha0NWotaBhBWDd65Hy9CRrkAsnyBl/0zw
A2sxMgbFvmpC0I7IcXap+vqOByqK0E2g5mV+iP1IFOxGdI9B8LkmnjOYD/iw
vWSutHZQ5ajWqIuUrUSLBM3vqStYpnj/rInYhu1Jpd5y2kBfpcXUNaT/KFPo
sX/O+PcKIGntiWg+Gz2kO/7lXx3bmD1JOOEM9BDrO3gaqP6E9fNn301YF9Xh
blN/rYm481iDFBbLqxFkkd9ljq5keOsvrgRK29WFl6765dEvIA8rArpWG1AJ
FbAVB2u/r79/IRgDqmFdSYxiTsCIohY4Kp6tfOJM0PaWUcuj7rXg5OyI9FG/
WdQecGUABZYMkNIlG2NCH4GqiibZXi/nEUNkxCYKBs9K4o74zcVoL3vguipI
FwJFsdDmWjQnsLtfuBRi3zS7a6J3go5QKtq7lk8LBPARKqlbrveDcZY2RBfA
LAWBhqLAJoGDAfbWej9a1AC3OJknk1sTTB8SA4SoUDsDlSvKBfbk508Sl05Y
uui0Ou5SoVWJjkzGsQe+XPjdFl9yokK33wpjWBPUiyDPAwJ/120XjThVWroR
27EmUnG3jQHQ71UcwPD+uCJ9cnoYmpogO9pAKpyPdx13TY/xDhTFAioNiJZ2
qMbvGUDuikVlfU/0Tr7kyLV2fxN21dezpcT/rO/Q5E8RuQVUvtWENrRQF3Dg
LRmfRkBPn0onAAi0ajLKMJ/0g9UhAsO9JgLA2uNzdJecdgNL3oGGXjd36dwl
14NUFW2+x3IaF5RAFEnK9mD+/0x0KQfZUlsmjuLoOz1bgdx7FmmcUVPMrpkT
RIS0fsejo6QtGyj9QgillwIpQ/bIG32siRYYftjYf0rFdoM4dGndte1Yt/2O
jDmRuIPkzfry+8y2Bx11UevYa0JhSdbSyROV3THnVGhENcn5UlclQ7IYwhA5
186gHBWDQS454tFnTbBeR2KlibG/66MirysEwtoql2MRVzjb1xnFoiLRMLVi
k9sZhO3+8wNVUnZHsGRJJbsmWvh2ni/CfoW1JGSevsGQKjtrF3U1OxECZQlK
W++awMKgeKZwsQ5IchRnbFSjGLqtL/+F4fSIlIR+2/S3FrXyiu4kIDa89foo
pf9UpBXvr9pFYziy6Ue34KQLvudMVfx9Y4+pV1cT0aaI3BUnu8KREU7jFk8y
KPzaeoIhWUTWIYWpCu4azWqpCuTy5XSpCUAVgish/pcGHZ3b6FVQ/j5Sfa4J
XcGnNyZI7dbvYJWsahEm2bdACFHKfui3tBQjKowCU09tRPF6W6YEESj9vYVv
rNFp8NZ32O6wqtVkpBb1yzfkzN+Ol1x0W/WSln6+7EThZymlh3FPtY13RHQJ
1oRn57YSeH9XUbbFlCROkUA0qwVBmhbjRjVaXe/7M2HfBhl9nVaVeUWlFL+u
wR0TQf8z0QLaALG/7rVTi/AvxTuuE2+ZrzeRE1XTl+g1Xa1WEymM8FaiLLMK
plFHCJmea3MrJ2Vya0Nz/Ipjcd1dDtyfAhl3YjFZ/YX6pWItl0rojTWh8HrH
x/i209flBjQZtz3d8KI1c2k7wwZk4aBTX1+ugY3Tt8USongTrKn4qhH3uCMz
eKwJIjrpTWR7fWqClDABx6Mj7+qqMAaEC1+nKtbpHL3OPUQdpfrvzwTunrgh
BfdVboMXhDj/NMu2xYPkNBeDH8wsu1MFwmxXrZsYKt7LSNUE5a/fDUNd2kq+
mUjodQTERTL9Kmc5EzjkFMMwK9bprFb55JmCsp6lTWWCqYpU7Ymsd11V8Lb0
IYIlL7+iFmAXZwD9Yi/ufDkpsyXA+LrednUt92EWYuVqlVdwt+N972EdQnTe
6+4q7vjHYVcfpRceXhgjH4ySMyLdNXHFhFM6DcZTGWSwD1veK0XQ8ucMZxr3
W0bKQ6li0ZiOOLvyip6r57Wn93hecTlzVtYE3Nnr1eehDdFQE8qucIlCj+vP
W+umcCS4dQeUU+YEKbnfkorAosj7WxOp/DR5bVu0tAa1JOQE18QFu9dEVgM3
pSzitTOEF+4UfLWjV4XFqanQr6uvqrk2gPDrW6BRGHvHuipkLQ1yYe1TzPsW
WhqJasgCGi7rqmygdxJ3CPxvXRUGa0s9T8Ja9XYfAZnBqTHZVv0FH9aQze2t
R+lythjX7UHDOX3WKmHVRn/ae7n/ce2JNHWsa2+UtH0l7pQ9KcykbuoZfDWB
YhL+10DAzYnukCQVfTCICmwUy0BlvZuXIUfBNdHpWXsYUUXVDfU6yAT6f6lW
14TXI25zwsqSYZD5e35BhGBt1C76u9vxgyNR9ggtjzXRAg0XQN5oQTVB3oP4
BnjisTAsLJF0r0jWZM3tNeF8RdXjrULioyYUtmEvnzDQ6lTbcrEEtVzyvspU
HGCU9BC4dzlS/UDn6d2hiRxFapVEPQjjEFPqYdBRE1f6dr+dTJi14El6iEr5
T16tJY0pj9GwERZu8cOu70iOzWeoBclSKVm0tI80yXr7Yl8TuLWOVLI55bQR
7PphG2FrDPK9JsihfW8nxy4vCEqO5HfpJ2GmlIShA45VyUsz+D4XETqJhXq7
n0n8p94PB0OcaYJVedpaV7/7FAeHFgLvqvsIZChMUIkRRK9Hq2SlNCkOj6VY
TQBz37rwEV6o/YpnmHoGsL9KwZ8J/AttLBIR74K9aTCAj8WUxcdtfya8bqJa
Ec6x/uKwGIjBaEEviAcATosMLBTR1taDihOiQMKJ+La1AWyRuNDjlaMsUhNS
BsIEMoUKQWV3wPARHLY//fbg9Z6HAtmeyIBnW6kJ5zLONQzNWWdtHLUjH4gJ
wthvr4kn5B3KQ8pks+e1W+S6S3oBvy2lzddgV5SMR/QZZOo1N2QTFNzvRNbf
WzIlPZmWwRFYw8Wov9CqVJfA31XCri/HBfHudCbEse1r4kwbQ6jzbvv6gYQ9
OZME27hV5Q6dUoxomxPflrahCYCBD8Du/INu061Q/SMA1Rm79TvwAKC/YgRO
IaImAB/vLsENNVaXizWoofL790Das0b2myBF+FKTOKJZVV+On5u9MDe5gjtK
pEcKcfi1wqL1UY35omoeqmRJBe1psuNUK+Ej3qyrSrcvCfxve3jfmtB65IvY
0BD0oNaEN1zmw2a6vExNXOhcKeBE+ezPhOTG7kCI+l0fFXAEL6PtiFfwmnB8
DBrGWe6n0Zrft0gU7oribX1HarjUg5Qnz3XbaURHcEEYuaJwE1bH7wsu4VEh
6OQ+KdLu4EOw4XUTr7C/b7VcXvJbfTlzjSNuBGRGvvU7+K6iEOiLehtq+aDW
s5tx2DCYqh+YbhSxdSYN7VhXdVIxtuaFtIgpNRFRjujcyBPbmpAyUJu4gD/b
WVeVZhE8fvdRW/cKzzEa8IGs1+nMnhfQwQGduPKoy9XoP8Okh71ra+2moJe3
2eG2tVolRNSfdA5V0Y/1DoJWfjb4O8q2rS433t/2MDn9s60t40ir09t8bX9k
wblp3UGRqyLF/b0mIn+jwfsk5a2PanGus0ZwyavcZgIAWwBOjOlYq72pKMMg
aL4sSAF+Y8RNUxjW9P8zkVNQWkgeaq1ETkkbgcSHgEjhE3cVzoegtiadUmBd
1Y7CD43++xcEQbY1cXSzoltm/2dd7Vk9JLAhmPf1AwGHX3BCfeev2JnarggK
siZVmeqS7cRz4CB/G7YHvK3bngbWzlWS1XchGnlG8fGjbMaAvmLq/UtYBcJm
M72vPxOte3yI8WJrviYI09EXEhe+69FaAfLQqOfrSq2JFg69LsSxoBFkLlv8
wkXJKrFXTWip938PxPjnL/S6bAtvKBuz50WshQ+LApK8oc0OVnhJSrVHx0CV
kPje3VvuyJEDlNcBmZTkCsxji3DmXhNqbKf0Nlr8M0g1gdwq+otm4L0m8EUp
+d9uSQGBFKIAH15nhLjvru/Qx+PRdW3pPq8f+FBGS0b7xOm4vgO3PE67MVgu
1YieMQdPSe7lLOo0fRcsecm24tDzrL/YWux6QCrhvecSfXuVNJ5sXsc6vMDh
46upXmG/aTWxuVX6MntMXuvRXuAiLxJkSj+1fCJ4fsGfyyScYjVxZSlCWkV1
qm4JUqjukkwgqLU5gfQZE8sdiboox0Q87zNGF1xXWgnBmmCDA/J6xEeuHhRF
jFsi4Jl/RRrP3sLAQaM4PZs1gSKs24AceR/rmaO+cuxBPIscfE1QIttigwlp
tdfvsLfrF+fg2asLYDUHr92hrAuFtMf17dyyfUcBZE1oAAQVc6e3XV9O+lY4
e8W35LiPNcGRSL+Nbu/afQi6KR2CQD7Orvrl0dhrEeg9wxqtiTsIJyATZfWn
ngeU3m8BqobDBLU/E6qv6iswq39WuwpA3Hwp4y57V0sThzX6BDzp122PL03K
sQKZFTrrun6dvax8Xs2w/U1u1bwLOGjrSI1Bq06UGDFZZE1cMY2IlLAYoG6i
1vIROIpdpQjE6dr1nu8BmV+FxhyiOkJvOoVXiZXTfga2fSNeCROzJgD4jkiu
9g5aTUT/ImITUIH1DnJD8NknOBAFy3dNcGq5JBlCwr2+4/3tBrfGaBRhS/dc
3Vd6R7/Hoz3qHJSZRrnxCwOnuOGhhYKyq+Sot62PivY/ocm4WBapiS3EGXGL
I/Ly5a9mQrTiVH20ASs3UHS+Ys6jTrZXKx4J8okWCSuVyFzUhMYqSSzZ3VMk
/t0La8nGmUeTdD5zaRpdeWlyo/9TVwWEcNuDRO1ngdIDLaGssKUw+ZQhU6x6
XjKNSm70L/5MwNfGnZhEQ22WBJhVETqh6yubDxO83QNrgEir4O5JgihViZlj
Zak4eCl9pOH+rpqMmqDGLEMzLc193UTOP+6W0tq+TG3o30E76X/sAYeuCbHC
Fhhvi913TbSY3JzwwFESnxOSHlqCqS1tf1Y7RuV9ZxuI6mH9wMQQZ/RsnpCb
10T8QpGCJEx1eEn6Nr45saq4SwNb//FDi4nhMFDJ+nI4pDtg33j9rcvdw7TK
Ts03qG4iUxwMSPqwgr/65YjFlOjutP2r6rxHw4u6zU1ctZXHyB5LInD/DhMs
ag84Jp3JsNz049fz2HXDnM54lk9VPzLRGIDiDnjK66q2qApoVh8hMKwJ/SIm
UnHurK3P3QbjtIkqJ1SuZgsGOI69nf7g+ouY94JrUPfa13seaaM9Bnpk8mv5
8I2PNWqLlWv5LtF6i/uNbWy7ljKeCaTmO0h6L+pXE3sEh91E7cx9/QX1toAB
LNHiyuwRyYosth14W/HVrf3PoDaJlNC9Jig2cot7g2yuTQbyi/6s0yOikntN
bJZBi6B1xJXmhIa+HQHujhbbuyYifBFv72xYNRFz5zwXhKd6HndKxA9yb1SB
6zQwce3dRC0YvvUdnX6AinOHSVsT8JgAgqogd/Wd7UeqNd2HXDBX35GGVsS3
f2f0XhzFHM1qZwKmPYCgNdFdH1CVEP3qy0Fwgz96Q3C8/0w4tFsMisVe9Tuk
gkQMVQe2pZGyY8TEOsId5pVzrQnh4y3UQX6vDUCzD6iX6jHOar1qJONlm96M
6CH8+YuWbhhQ4bXo2Tt5a/shadMdwmb9hYgOnQPYohVLqPuLpC3gnLKA50Qa
fdrISqnLIGtn3whDz6gi1h31y8Mi036O1/d+rb+AF9FT07U4C0yx91rbkYu1
pK/6HUfkfuiYsiXZ1mo/IhotpVG+L8fbPf13agctZs7HuiUAp8j9uR9b6Q4y
x9H0PVJ3w5yu9wPM8yGaKUxXwVgTKdgA8URQpr4D9Ar4KYCN3zFSvzwJmTr0
l5ZwnR8iYEZ0+CI2jbV26bMFHC4zus91SwiEIPsp7dzHufaS7YpESOJpUmn1
HUBfsoOTdkJbtQxVj6O7pcBa/rkl9uPHEYKv/H7rQW0gxl/ECJutev2F7hsr
XOacPD3HRBwrnxQyiJmuksWFsgCcdDGxvUoSbI/V60VZSBJ+rLjde/MqKulb
ANHOLweogdG7rLXzWkXAXyQbKD7Fa83p2XfGLo/2FdNeeKpaJeJVCKjGj/te
qsC/iavjKzxcpIr6KNGYEFwt14Z5rwlJ1p2KOAmBtiYgxfD09fyP2l5Rv6+o
6MZ5fZVxrySQvGlINH4lLWBC0iGKALAtmqBu7ANjSONf/6p2uGiw/c6bqHKS
vL7XhEa/xH3rrLyaIFUjChXmUNaqid9r/2CrdDZ2HV7pnwCiNIG4NKUmqGwK
Gd4YZNaW4SvO2KMjsh3v+h1SVpvl77uaI6ZuIvS1hJD9GSee+g6Va+CdI5it
lSJfMVVBHID7IEZbEyxTtbccFfvKOa+I2amUcA1iqVETe4tk3hcnmrbWLnBJ
ApLo1pX+1R7t6ze1ZcyfsuBwM6KlSSXZ4Vyvmng+tgreNLrn9aDYQ3T2DlLw
+WcimEV2tOSgS8PURFImzRoKhOuNYq3SlR1/b6b8oSYU5ezfwTmuYr+TALIf
p/j7li6OF4+M1BH9xPdPFSf047tv2G+0R9bE1QVnoUCeVbNEGNlwdfQ4c4ys
CYHm75G4icuN1oSQPa+A7f9ev2ML47bHUuSz5oTivX33PiOkftXzcKU2LVhO
8Urd3b3jpkIqzQ+ZE4pcaQwBXx3fWokUC6IuBIVxFwhBgwbLwCLC077WE4xb
CM3gLxX92mQiBgbIHW7IUc1JTa2wKmWDlJUqEI6t0xnBKW6HqzdBs4VScjR+
JOp/JpDsX8Bamoh10Ct8nvHUeZJK1otzRo8HRIHIyFlABxPBFDn+UW2rMnGG
NPFEThLgZlvfccZ2kmoF0YHafWSv7m7UoXTy1wQcIDoaOfx3lV7OCLHtkc0D
ia3znOFAvHCuT/q5V+5MEiOWHVHT3gphaqLF8oBdIe59fYfEQ5yvgY+w89ZE
XM4tlSsSjeujtmBnjzsA/2qTp8q/RyI9h9R6DULn6hXnJ0nyVRPd3JjVKvz2
uyb2SFwRbnqTxs2JNM9UTNHGhJ81cUW+zcqJaUpdldbEjgr4xrSs9sSzy2d8
Wrauud6oE0q8RQcXynMVGs+UbuLU4vtXAHm6EaKnpM9bWR/t4T7EBUd4/ZUq
l7aIllKeL3pVpRk+6RmdToT+taiJ6KpGKx2qsR1rAhItBJ4zBNmaeCkChUYM
GdPWR7mWLW634uDayM4IvZALPaAWnmovB0KJWp+A9C2+gaYd1Yk3zr7bsTay
sxu7MzSnyrjX7uOYF/KdR4SdVpx4di6Vw0Cj517vedrF1hRa7nKvM3GDqNDN
lhXvx5rQgD/TDoDbqN/BxuTtzZmOZ18TyhsqIFGCWDvDng4qO4u7J0JzAjsH
EI8eK3ZeWxNk4BrPHBtyvc6hx/xeD/wdMKva+pRRonhEeku9Y02Q1XBZOg2L
d7cH0v7FhULlslxJTITZioCvvlQhzhG5UHokajvXyj9UGWwaLT5frdTxg3mD
pLDx4tjWOzjsrsDRZC5lWEZKNlXUg4whNdz6Dsxk+R0Ffq5F35+JlM9JPuGl
1Q+knnJRVTsT6a/LZb0cCezgs9aLcwQec0XtQWO41i7hsByG9JLVI9dfgNzl
0X1qT+3PBJuIOG0L4c71UaeQ4ZAgg9HWAck2lNwC+cTo5tblKuTz62L5ANVz
1sRFjwyrS6pfCCHAzEDrWofFnXvdkqP75jIMjLBiPdp8ISriibB2t7oqNlAe
dZSuzzJl3uGDsdU0Ra8YQNSE+ANKgHTB0h3co/XjSch8ORTVRyWk0yju/trr
o1r8066ApBgbvmviDCHtDmjsWM+DJjif83Tp/pTbjkAdrm7e7afX8hGYbmmH
HcHT172ygMLqpnpwrhJrZAV3SFXYibME8HYlsMdezYAF7KW+A6II5HiDdHxW
kHps3YZFHWfnml7PY4s9E/hpd1NaH+XTAQHEuqSHakLJcpf8dDri+o4IXwMa
b13laEwwSbP1JECnknavCYAlhCSqaCWLkabaE/+zGB2tHmRLJXr7AsSL/ldN
sK/1Gyjs7MW13PNAVQztTt8SC4xseqJaXL3AOtYE+lKQ6eLBfX0UXuIZbfFs
czVBkgE4yR8iT9VHwRnCGUROe7ltmoj5H7YeJfo61SIvxpk7EpHvCgfdBA8d
wRb2rN7a8M5VIN1iImbrL+hZswe8g/mrdUVR6e0up6puRSsYNURdbczCb73n
LfpeH0VWIf1emTAnCX3fx6npIPwz0RCIQofiXFz3ipWHy8LlRwQ51oSqwJ5q
CSuM+h14Uar52FmgWGsiVtFak1L+vQ6WhqiHwgyW/VzvutzwVO+B7nkKs+0n
a+er/rFmXbVXsiXwxti/T/SgamLTmCQ75By76qBvwYVF6h9XvgTRHdUEhFuE
Ybh7v2siMkJ0o6i8/5mQlJ25HwB8tSda+LKc32vuUFooPfZhEMXy/bA315fv
8ROK5uof/UTPhrkkUA9diWtfEyF4R8Xgi8ZgTYgkoK+Ch16RjLgnZC2edCg4
35pQMdFWj55/PSgAFkz2Cw6TCOdbE2r2ggU1aslFTXgOKjLUN69VekGWuKPu
Bd+1PPVMyFBdLhLl1tZEI4IUo5ItFldrwpnmwLYMS755B8bRoXrjBnWsBAu6
hYnhF9227fo7ccRP6/c7f19VnFHO7m8HeX3dprpuiTgaAer3L0LzWn8BuCPu
Swa4Tuc9wij8aYSc3MVrAiJMdUd08JQIpYkE4CcKDXTKviYcpoSMoCxWUp0F
jdVjImXvmuDGHHNnffzVOExu2qAK771HOjXxRPGIfv2rfbL+AriBUUqQdOef
v7jCuGvREbsXtE7sG1HsE2zjLUUgsVkcmr7s/ZhpcyJaDm/sLLRJK1TDiwhR
H+oIMK1+IMKo7eJ3bQdgb31HCAJYWLem2zroTaiN6bZGDW19FEyNNgf7D1Fj
TQhgtUUJB9+lvyvI1dyNE73OU20yOytaLDIu0mFq1wTxvsTuDsKFHNgDz4V0
jKD+KlmoNGKFBphhA7nXhFdDBKsFW7Lgvwli2ajK5JPPlTTESc9PjLHGdqwl
ig0cOEHQzavkvffKbgLOCC7WVQk3CZzGF2l714IDPEKmJPVAAKhue1rYtoo7
8nCVf9hzCZqoeNHmrthnTyndmtWpvos0rmuIiuMROTy3c32Ht1ik/0X2qELO
ndzAG8CI16FcF0yc3a7LawqDMidy0rycLa5gga41sSVu+JRkzlJP2veEVtbb
Hm7x2sigx5nT6VEo2Ky/AHB8CC6pxS9IgdNLHAwVqpZR9cScRYFAMRU5Vv0q
NSvIvmPr9Yb6iyDqVNbEwss2eO9UTa6OWt9knmtCue4NUv9OalgTRONO0tHR
0qredmzrqaM4ev7wcaAsb7LdBIhPmlNzXcGW/aIcMBO3fUUysU+44vqgV1eu
bwkBYe5UWYBmCtwSEIAWgao+yea7JghtCizDoCpNJ+IujxaKu2KyKixbTJl5
pomit+KY8PlSawJU+0X8V9n5uLdMSuCHts5ZXxOqA1gvTCeuyj82gU20Ql+k
h2JtEbpHuLmy2cR8eU5EPlSmIl0DkaoJDSR4SYXya5X0IjqhI0vXIa2Dmsjy
lJJQm11YAxunsJHs2O+1buvL1Y0ipK9GfZXiiUrJQ3boDWD1WAe9xgeLVV3Z
uOjWR41IU23kyx/XhL2QY+8eN9naEyHOvwPXEaHpKCmttN+vaCjRh/l7r6JG
pncB0Hxc615xBSSzfYTJf611pZuJY4lBcAN61sQT75YnIfVXXkIm+NmIHN8n
QUBN0MrAtkxR+P8mCJVo72AhFE3QsRwXWfKljdN43V2Ufw2ZOHqfCyezdZs6
FLZQ+AvP4BVswQFQcNr+PCgsw+jbJKcvRtXeYR0mWfS1BUKAC3iDs4rk7QKM
b4hpyPo56v5sZPQDrkAs2UrJoP9MbGnLYlWj862JOJihsnv+9/qL2BKCIhn/
9jVxocqBd25YHoXeSeP8CzgRNm1Va7FdxG6odWlb1DtoHRK0YAFKOmv9BVgR
NKKgsK3sbtsDqxeU0ETZKiLDdkIZ2btU+r6eR0BWUTB7Yw9QlysU+dKtIDS6
iCF8sLT00hrgX7z+IhiuN/v18a5mmNaOg1A4BnNYOaccFAVd+dWHVuWO5jaT
ikDCNfbaP/81EY5FgNnYrRjRc/wWoomhzq7ZX+OAi1cSfYfYXuNsNAI45Kpz
1nh4nL8jTTjMC2yOw3V5X4lhpBA9xvEWky6oSHH4qvEjBwk7aAi6MR5C7x5+
R3ti9zrHiYDKqXL4/06mMR6hM9rQlF40b8Y4YqoNLbXu32WN8QcDCFk0yuZg
XWNcAUHvzxr47Zzzc2xoNj/kK6Wa+pwwPbG1Na8VTvo4XQN9SgI85OfXOPrb
7y1BX6OLOcctL39xJqG5532LH+wR7xAV4Hv+e9rNmv4M7AC+9xq3VKJFwaaz
nvsVR9bu00ayq8ZVGa7o0N3UtO4aBwaPN3rExOZ9po6EHRmjcWIic5xXI2Yk
4AS/tjEOk8GADvYMym3/M95ylrJ2kD2O8URQHjhPACY0Y5xsC5n72OT9ztox
nsOS/HL0UWCZx/jbgwQep7h98/kqqNhGyGWRZnlqHHndrvpbJGmt9nGCtxsa
EURxBFjHuP4Ax0XbBRHcOa7vEKVBddDfITfHu8Q0SqL/q+uUeqkcR7ow0Ng5
3rTVAEpDmzxqHDJyv8KlV72d43hy1N2Et4fKdx/f+JLHpPwKR2beBxt/42qB
8gEeNsfPIIRE41twXXP8wB74oljDZ2Bep7ZvzDBOenfrvYgZ9sv6We7Z5v1R
0en+TskJz7lvGD+EtFf0Ych+zPFuRx31gpRqxrioPd5SqADgc2NcvqL3qaWo
cTHHw5HT5OBlfM77H7ASyNeGl+WUr3E5UKAtSglzvaWNoBNmzaYTV+Nis1Mh
Rafv+zN+kYA+Y2tr4x7jEYr0IhIouOf7a92IPL/4TGNTjHEyMZGJABWJYvMY
l/RHHnF7wm6b47+NzekZGTRUgzneLJW8eGKLd14Pqnc8QtBTFArnOD9jWQi/
L/XYMQ4dCqqjtk3eZX6+Plikc3Z3U5VujJ9XxAqkMraheX96rRYccGPxVvfB
OYofopuECzJ/r1We2rI6NSRIjQsoIbrOlHLm59snvTDK14edbI1rbih/UkJY
47qfWBCPFpKsZIwTnLgjmXdwqZnPJWo8R5CDUFXn2DfeMyX4TuMgBFfjT6xF
WvcQa/W8zrzUNJ3UPvjvrnFOYUdc8855noIL0EfSdE4nfN43rz7NONpP9tZ5
/QSx3Ux8Ddr+9e8dml3EFx9zfY4Wk+omBIfC9RxHOeXP8BCEe+r3cr26HBQ6
f06IMR4V0NhV2+aPuZ93SvmZRwhl2+b6iRgj1CFTV7X5Od7fc23pXxCGNjLH
I/8jghcZrc9hR4InRNfgUTgY44+gUKVeWrjeLxWT30b59YScnvYYZyAhB2cn
Qr66xuWH0aLnVXfVv0e8Tx54i4rOq8YD/oTb2btKwBj3siMBy1732rehnB/H
sl3gxIir8a2jnijB0dod4/rKGMUx54tt3Rgn2wjI29I0qc/Xhjop0yNHKmP0
cVZyqW9FTU5hdI5z/lOA2yJ4Mfc91uRWHBYFDOOMu0CrP/wX/O89+Ls5rroQ
A1hV/63+PSGvSARnnc99/lHJOdMJVFD65vUrGOz6A8AZerdnjZ85ODG7KBnV
53RzWfAhK2L9e2UPTYvwXI/5XjCn1SsjOKNhPt93p6nUMli9BxB0jDNl/yLH
GPXDeb4Evy9ucNYFnDHG7zh9wfW7rm3GgZouESVHuv7Ev3PcFUU+1W783Wt8
t7upoEYbeP4uKrqckk+EUjnhGL/SWk3N/AUhmv8e+O+NaEwYYfMcfMLnx8YK
8bf2Q42u7eoazPDwR/37vOjsf/Y9OhNzPLikT1KTI3GuH+AhTlO/1ebYmefC
Ey08Hhc5rSu+fbTusDE4NyJlf3O8q55daFZiqTWOw6PRfUrHan1i6r7BZ9lz
t3ouyqCKM2qE4FXr39P3jfs71e16Xsh3fGp0RqTl8z7E9xQGnMyvCvsc90/V
GuCLnRg1HsF7HYsrAvtzXEHch6UfUfGJJQVhddN7hm++avzsuurSSvd1juMa
obBv6qNEbta4T0gt5zhnPEyH6GNS9rT0Cee+HTLN8QSzeNJXruuheNZCYt1j
7DTHdXx7YxWIvdYP4vkVP2LF/opbVGh25G81NsymOa7fC2kIuNRR+GM8VZU7
gmfygHk9EZE6Y9O19+bmGCevcvW0WPY678MeXck4aLptb31OkOv3y4KK795c
J4KZh+3fBbDfZh76dLPdMMekeLX/UPnhKxFqzm8bm99L1cEpGxalg7uPAzPG
HdmDeLfKR+5QOdDuj60fPHM859CeI08Qd8/x36OzxRGO+kLcGuPxGbjEuQKC
eT/vrv7A1c7Ke+b+o/aYgmkqQ0A3Y9xetx0RxuCWOeNGbhzpYzykpbUD5ji2
y012iCrJn39PQ5PEvh2HkPkcj4tICMq3etD8vW+Hm0d4Q/+4Pn+LU9Bvd27W
0ayH/MZ/yaR8DyaJh+oYf9J4jM7s63nNz9dqAZ9+4VR+e8q8noBJPlgmTIPf
iz3H1clSPv6lJJ5GjafiSFGP2ND7d/wmjrdHxHvun2zF4Jr4jNxIJE+N5w1G
nVWsn+8Rw0+w8D3a5PahOX5kq0zMTTt9fu8dPnW83FvE4uc4A+A0AgH/37lu
IRYfnInAF9Z+i+AtLwu8jyFc/fuWm/nEvByMYY6H7Y2flR8x6wDUltNvJmYt
n5v3GWaRXtTdKaKtxlMB3yKo0/a1Dk9thIbqvA+AcB8HPY5hhyT+t1Tn56he
3oGF2dCuue+5bZFsdEeJgx5z/E6f1uLkslPXo32wgc2p3YMszXG9p5NYpMiy
6gwc3Sm6Bz/r8J7PERicvKaqY9Sx53iEVNVJFcS+GYeLq7bQYPhvXZVvkql9
MLXp97LpmM8rPisAOw7m7Tzqc/TQIxvSH/satyvrKZORPuc5nlYYQWiQYNi5
+Xs199RZQisnuzHGg3ZQCA8G8671AIR8ZFmdma5/n6aoTTp+jtuf8aRGSmQq
UzW+hf2GBR4J2zUOyvy1uOOJfvs49OMRpNObFsJcb8CbN3NVwh+A1m+Nc0lQ
ENFSq+elpqhJHumYuEnPcUIE/Agi2Ffxv3pushcCKLq19e/xQ4LFl8Wh4o5x
1MsnVPWYO4/7H0ewrctM0zSdeaX2tIOd2VNXzZ7j4LfvnWJFdo45TrUMtvEM
mGm+L6qWWYOir43y/Rp3TJy9q/XMfUbtkYQK4DGzl5lP/cZPyRH4jXLbXG+U
K34/LJQSjIR5Drqb2FswKFucuuZ4BL1EdYQIK//lUv37AHIJOf/nPnYp6nKO
oDC6xS12jF/B/CZAT6lpjot+1BVJH8KujHGgfuDEOBqCL8/xgN6+6JQrZ981
fmsK2empWc2635Uf5hkqEt5VF/2t8i+9+xijIqfUuEjzuyMRIqKa41cEsO+4
y2qVz/Ez5UOJEFjqjOdhDFgnxVPhWue4l+gQztjIfNozx0NdE3m93r65bxAC
dO+RCukqznPEB29UDVGWbjTeOe44Q8IPC2Gv9UMuFSBSNOvv5vVD8AZIA/0Q
aPUc31OaPslbX3WO09nGJ0uNnhtCfQ7tw+gV3EA7s+4HS/nF1Ain5Kg4JNKu
d0Iuj7nVe9edoq1ly+Kt99R7fkfXPWaIs17UxyOBI+WvPEJi51X0M4IPn/cB
w+Ls/NqEFl+Ne0m3+KjoTZw1zsaXOwzJh+OqzwG9EK3y3H2/t753S8Fe2TTK
Y/P6scgUzh5FXxnPHIemuWJtTSp81hlS9VHi5mz0xSV+jLccOqCijo5aV6Tv
osCCORSlrDlOQ/u0a3FcrP2Hz6zFBrW2H1WXxnWhKH4kcdsqHuPICOcrrtTH
v741zgrnisf5UfUZWh2gJCo0CSjr80l3vmk3gT3Xetti3iHRJF741X6iiIcm
GQQuHtUcp7rAR++O2PZenwNmSdDv3EMnqn+vHdHiNZADY14PDG9LLzCMlvn+
np2b/T6pKv6i732OH2nJ6OKc4EtbjfM/Z/FxpsL1zHHtCRS3LbrdM36TKl+B
1Zwpxc/368zxlNaFrzrn81J0vqLdsXmLa93+ll8gXiCOrmm+7/Cu8Pded/iV
Y/77CNKj9gqK0TzmeErAcnJNln3mlTHGAvIltnys9YOWjKmuGo9+OevSp36r
c0Ti4L2scWrUtN/ebI1z3w5JkkwdXGkanWP8iokdSg8B33urcYLFZ5RfUN3m
+scXorp8BrGoBTHHFQVUFJ3AxzfPhbMbhqgaXVFon9fDeQpc1DmcHXaOHwHG
4rnw3pp1b9ay8Ywm9bP5b4z3g4iZ0yXJnvXwcKMjZgzSzKNjjtNcl7DFV+jb
698jFpJmAph4qm4f3zaVgSvl6jbrq+Q4nsB6YU+e6iP8AniMfA6xxJUrrog8
e2SplTuJTq7xTUyDnIHHf9Y4Cx8a4gLK86x/H6y7ZGWLL9d87vRy+XiFlXGi
LffxiDCeUWyKjt68z4FViMPQzGH0a1w5N452Z3Qj53i0vi/NQQ2VWT8/A2lT
IRQVkdioceXZ3vcXvNf3qlpCjsE+OZrnuOJMVFoCKJt5JWBdkKNvyAVn3R8i
GlzYCbVG4mqO54X7IhJ1X+f83lgc3/GlT5t8fi/bVfaRH8EgAIkaRw67Ig9H
JLbV5+zBwxxHHIquuY9BtLW8wltEw2YcCMsDkMOsCdZt7vM2hS3OeMDAWExj
/NHNZp7NmemsfekIyBJN5u6R6fxeDVuAeHFRkv81jphKFg4xvdW/t7npwLeY
iW71+V6jFmVoOczMI0jOHDSQnqhf1fPyst8pbTNdv6ufEsAQuKUiRjoSc5xs
60XmFkP+nuf1EU+17iKxd37VGKc9ymb6QK/c5r56hNoAB/DZUI55nkJ0hDO0
xY2x+mUy32BT0sMkwjDH7xw8h66ZezuvP7IVCn9bp0PVv9/pUB5kEXHEZ/xM
c8g7LwyhrzjzkSMIROSMi5fS3v6MM7KVA0sj5j4gznsDTfPCEF6ucTame0x9
fn83z9kjGltODe0X67HGj0AOUJf/xCFwbuSTqa4nFpq/a7Te326BXvEJ9x6K
fwisR7qTcxws5eGPFWOVWb/y1vYURvnj99bX5+wRZieGBkw04+1ukurt2+j1
bXNfpcPjDsNdtvRc5rg3OmzfLZYM9TloAVfAUqoz85yCTft9RHQZxQYzDgwc
9wux4nq6rdkYJ4XyBBobk4v5vXuk8J0waPfXrNPiCRxdk1LzufAe5JA6SVGc
f73znDqSR+kJxLX1m/uwqqX1Dfj/RTJyjvvnZ9QleR3UerPvwSNn61t5CuYW
lIQk1b46zy/d0F3bDu3Zy1Gfo1XGWpcdDX2KPt6i7X9EV+ZUKdtqPHILqTZ4
jZ85Lv45z64EpSA8xt/I8XeDypP2zxxvcVfY2RLA7Yz7H5JKeH3RED/nemu2
zhDW4asFTHNcj1oNa49b5NzfZEf4Si3q0b8bcs3xK7Ii2sMR03nnOIfd1hU8
sKDn5yjDf6pjQKTkGOf4Az8B2rJ1t4capzl9e+8CrNvnOMwA0ZebFE/hfBjL
sJh4wIy/p+qHQE5+LWWJI5p1c5wz0BZk7BUNtjkesETobDS363eFht01Aeij
znpgBO0R8Ci+vOu8izbNgQcSt4GKw1sYIw2mjIHudte/B2vB19PTiN/eHCf5
2H3ZI2gxxg/Hn6jMnrHyU6vsCe+NNwDV3RpvoVU/EUPY6/kmYtG7EIUgxY/x
Fv4TUMb3JUKpcUyjllIOcPu8HiS2+BS/3VFo3jcqBDFhCif/q/Wvuw9OnSBi
b7U+WyAIJ+D6HrmyOb7D3HXxW6bQ9b17Vw/kjBuoyxjHqSESJCujsDHfo+4A
F9chnc65T1o0jnhyAsy65vmlePVErHWHhb1mXGppqATc0V/9xRvz+rc4RX/p
fAIu1Occcej+4kBxVjwQBxW4AS1vkgXj34uWfDyoAzP2eY7QZL8ZCOswiyff
OX7FGeyLet9WcTXoEy1Gepui6LneMItUazqEKXq6Y/yw3BDAuE4e8z6QeWJE
RXr4iV/NGP9tJ1cMM86cs/Xv9Smiipui0TfjDaYUW9/IqLDVfugiN37pLAH8
wrfGyQcJPIMUXp8Tf8FIjTj+J95M1UbCkTyeGuBZ4y2yOr9cEJb6rnFaHxih
vl25v8avXgmgNLfVOqTYBhqqby6p2tf4HhfvGOzG1WiMnxF/i7qT0uZe4+Si
AVZawBo1HkkQtP0zfvJHjccfZOsWys+MZ2h263gqo1KXrX/vC+MMZLciNTTH
8c/je0lK5J79vt6miRV6V16f9wfn2KVG0wHccI7T9vqtBlAEppXze494OMWN
lmD53H+8WLT6fLgc55rXc4BeU1zZibFUHR4JUuFKlNBgR2rcznOnEkiIae6r
yDiX3A9Kzx46r8cpskW7SR11e+vfa2xeEfwQXsw8i26GNXEqJLpx9e/jTmCr
+n317xd8NS6ui9pigGRzPQTLFtI5tv024/w98k0nrUb+vG+9L/B/Nu6oarzV
Z8Qsi0E6GUsEqa3GCQoH3rWlmj3Hu6ezlMna3etzZC5Pd62U93xrvKVTp15B
PGyMb7HJ2amb7fEQm+PCBIAAPYpWOEyMEgCgPR/mls/xDgtVd9Ed++V9/zEO
2o6gGXk8Xnpj+Awo8+UFBkRzjGFydXoyQetJQvtwjD4jgkcg/7enjuEtRWO8
SGyPrQ/zpbrIcMSIhdNMH74DOqSE+FtxAvY+jFp9BWv5+2Gsk/pwnLTd9SON
5GsMp8MXXO3X9f7HcPg9jLTvDkrLsH/5C5A4+CJ9tfHjCQLYDeK/wtliDlPF
EO9nxd7jK/lokR5nsf4loe7DyovRBFCL+712Y1jyyoIz+fzvHenDCoRELjgx
pRY6hp+rN5dv1Nffu1jDv1j+imM4OO64kq4jlABR9W4fV5LqAPJsPJqO+kq4
U27L6tZq42O4oUGzWIh3yXyWwRwBFZzgn0g5GXan0rHyR0TixvATaBW/WEWp
bdxvaOvYFXKMg0ydw3s88PSyZB/j54BdEiGOVAdWVx8+Y44AbQenJ6Duw/qo
XwxJ4D738SFeNWCRIABJN89hIiNnZC8FEOO6oetpLyrM/5bpMb8yN+Wzeh7K
dscaFrnufKujGj6Ho4/RhSAhC/swmht8rj0HR6QPcx6SL34xc73mOlE/oO8n
ZZFNjCevYqbYdpPL+fb57mgNkJCg2IjKNf91xC9bTuwtNYs+LMaiUKi3pO0x
h1kaRiBdX7uNO+ilOdDsWS2r64xhDTk0tXQ0f9c0hq/o817CTxv9+PHBHhO/
aaS6f0dqH6Zbvac8ggP8zuWjThRJjEbqD8anD0e49YoJIj79+Oz4ZdkC1fgE
mnNY/TcyiPCE+xw+H33KMzL+7P7GMJPHAOJidVVfiYcnilBHomX1z7/7pgSV
FIU1fpV7H0W0Vj8DeFfGnKPES1RM1MB++VAfpREbV+a9K/D2UZjNFkGEgzzm
GNW/1NjYU6sZo/byO3ZQMoHv7qPeCc8Oo/fW1f53j1pUnVq49pxm//nXbzTO
Ps6J8CjePmgt7jG9JyD3ewEMXjF8i/6mOPXog2BKxMhB0ODEDbJ4YhF74mP8
Uqt8vX9FhhOvCETw66NSVs01aAO1woySidQv3GKQ9I6f1XCCzng4pRFw9VHl
LYB1SDr0pD76br1dfvaCaxujXDpURuIsNUd1YVKiFmpTSDYao7Ne2BF9b/3f
HvZxAHU1ECnCGNWr+3DQN4rL4xNahONj2wB+3x96DCLUpF0dzcs+Gm1TJJeY
frf+eEP4BVkkOUjnIqOu1UZMchUG4hqjb1BROF10+fqVReMLDiPKKYx/Mwrp
K3KDMiR51Ee1NHupQ8n2Gf8WJrKnzpQlzvG5aLRAEm9Il29fYicgjaSNfi1c
Yx+l0XP1EiiIax/t9I4W7IhYov9iQF2HC1AwqPgYPUMxstFCJ59j9OrFBaA/
PMBrjCZyEKG47ePKIAdsiUR7xSnnGFVEIzdLw0k5OqPJ0hx8YM6/GCujCLsQ
cN/2dtOHPgrmEz/NM1tYvwY07V+4tIVGhNKXUXRkACSFIPXdMSpduiPnyRVn
PHm8MMVdzHUglH4NT7K0BpYlY977b0MXB3DogpXXeMbi8lDrQfp+Qd/8t8FE
72EDaDP2Uax1GicMSuSHYzRUMsYFEZPoz+0FC/5tAXT1t3jVZTRiiXHtOMLK
6KOirX4NKUb3dyhIE9Td9sVXol+D9IeAcNMPPecmG14PtjHddqItfVSr+wm2
67eTXOPbvnSnEURlI/e4O9DOW4sACIuQcR90TO3P0Y+japadPvaxbqw3Q520
jeEDjU3z4474+fzXVz/5CcAksx7D2ILw7Ht08c5jDEunsWNiayVnzHCkQFP2
3VL938aw2pPbfMBy/hbnGLZdouyGJXSM84zCAqdAHhDRpJ6f3fcDDMkvinhj
mIfKCb3m/bUNZhhVUlRG4pm531XDyFLRJUbBOObw1U0Pnigsf98cJj3zQZao
X42jn6oS00fhI5zh/JXhAjoNUticISKaPyQk66wtcohjmHbeGYj5tUdmvg+f
hACc//j5QC99OC8gfwef3EbkyMoezQKJiBnpPv71CRIbdLzg4jznMLmT/BAx
0fPUsMIPprblN4Mn/Vj5t0J9tPnOORyi/BEy12+PHD8+fkcgvWDCefMz7HSk
QsaPilPkM4cV6VHTCAkfIwJDJpYeyCEvYJ2xIGhORs2spfU4wv09NSF0jiCQ
fwt0DMd7BVPkIIy3jfV9R+/mjbqJ12oOq3epbl+KmNsIKKNg8MSuAH7tavOz
QzbZQgF0yI4PeeDSdCg4MDrQxrA0ihrLkRBlhIgByASpToIj3lx9+LfZbSHN
XN8W1n0fJtu64VCGhjfv4BPfOsIrkUiYT4cPHyDM0dPL+c7rzJL6kLnIp545
HG8XhnKA3iPOVIOOovcjH+HJOYcB0oHPY+D9zmHL/UpTKd4v40o+Oz2tQPE0
pdwxfKrVOqFQ2e75kny9q2iZSXSPcd2iXVIgqhMx+5jDqsq02Ek2vSNST6kz
FSzletoUGcaKuoN8AnQVBI5h2vZ4xlIuyc4Y/rIqT93aTyegD9OzAu2Ihu/x
jHUSV2NdcyJgqk/XGFb3DlhD1nre80NuzeU3DrNxXB/D6DBnd3fCD+5PZxwH
ijZXkFDjXzeOY2f6aCmdjV8JIgdhS7bgqDdNN16R8eqqTsfYekOgpm3phNDf
GNctt79CnfVygZb24SuaYQG1NkirMRxBZIrUeP3v2DUbVAUp6GeLs/r1zGEn
xZa0PzaBc/gKSfXVkZEuj2EqXQ4+QUvEAsaw3YV1nq57GwsiVh0QGR++yj7T
cLYxFAtczhblzj6MG6auKDqUxYx/zYIu2mR72uHXHP5tVHEDpjvIVmYOQzju
QbvYOccFQjiH74+ge8w3TdD+pS1BT1GLeAw/kZSkGC1G2ue/DhHlCpUYz3Vc
yWMbcb6LV942/7XEf4vEjbbuPX9lCqItigc3A9g57OeJj4h1qQ/34TfYri9P
QMtj/Ovw8ltH5FpX40rARfQSCXkHnTyGu8vrF1m8cwYiEhXtJYQeum1jH8RA
i4POsXUc/1iaQdkTWFa5JWHbh2OM8kXHmCTmOOrwVtINF/b+woD5dJQNiCh8
e5ru49DVlyCdBPyC9Xr2f33ATcTTirfLs4/F9htGjelwx9/PGscohINN6UTm
hMXqz7KjoKKh9yCKjq3gIFYEBYdZ9/ud4wU8om95XMEbkvcaX7nHX65BpuxR
f5rD+DVXDGx4wMxh6iZRjADge8dmqi9Ipk4Vfscj2MfwR+bHsienQ+Uvw6SI
yJ2oJ9kpnzmsKUa6dk/f8x7DZzDwIE3dc3YOhx4STJwIZvx4JSNnRjQsnrmq
KAwpx0jrPYT5GA57byyHrzjC3jVMSzoWIqQYxh3kMpC0XsfhaDUcrC+1dsIo
rT67jXYJEwCybWP4SmnrCHa+Xm5ZoILPprtFVPOdw0fk4ejN00vf53Asjxov
rvywPnyqMm+BocLTjxVL88a6BgjDWGnbGFaE1+11dMl8xvAX/ZJYeb+R6s+w
HpeVECH0bYbOfExOMVcquBLyMYyIyEgLIikmYRmmoIS1evfKxDh3IO9Du1fU
OtNHG8NU8X6/SPKBy9yHgTvf2MptKMbzoel90fYijavRNu4J6Y3gP4C7wQ7m
MO7allY9aui4wHCjWjxdkVzGmUYfJaIt6qZfFIczTGt/g2DI6n5G6Q0Hm+pj
C6Vb3DKGEW9TighufxwCB7l7LyH1eUphzxx+Fec/SLJDcaQPx8vYKlcrebYR
tthf+Dheoe+qXI3hK7odEQD8fcc1PyTxgD2VzME2CqMq09kfOKu5vnMOwyTG
0cpeM0Jn2+UWF6orYKCxhZ0O/jAPTj34b9zYOFzpkWhSQTYdYxiuRezIG+Kb
jwFA5s5PubvF+fjsaH/aBwNCeceTFwG+kb5Rj5BJzuFfXBbZxxb82viVREnj
MXxFGWK8JDCVcCmKkps/qOGmFQRO8HWjhDEs+91CElEBvedwirZyNIz5sUMg
uV25pVH4n7XYkyMnxbQrbah3VMpllngzEomWdGYMAyfyytBTkpD2YToK+oi8
xhR6xr/mCbmjOwrzrpkgUBDTTJAJvvqRc/ika61Ru0c8an42Y5rwQcUyzzU/
m5THFpv3uH+MBXF0OuURb077ah8WaeEdN8gUaM0xDEUWPy3uHOfId05A8j1E
0wfyb+xVQQS738SvFbnGlRBMV2lMjrYd3/xK9BZteWJix77Nz8bT0diiZA1J
0Yc5iUn0RAQ01ObwbueIRxfC7Cjlk2ejp62GRKZ1PnmS39cRJ+KTkfJYgw5i
MXUssglRzmH3NvJoZzThx/DNUjkBWPSr55UgyruL3KucB30YWbnjR4D4f2Hy
GCaJobWRY/EcJYQzBu+YNW933x7/+okUpzInhbx7xMjgy9Tj1GBfFiXnHCaZ
G4MsQJJRsnG7N2bpsD62hPGIcbO7Limu7/POYZA+ObC65jO7NSf4GMXc44yZ
2DhJvOWUdqDCUgwbFygriGUkJBRBlDEcGTvdo+i5z7c4vXqp19FF4MeVIMvp
RLLwIY08HjHjeQxiqCCuEeMrv0BlwwU536CixzAnH/GZPWImHwhrUrdUg9SL
+1dyXgssQo3+lWyOYdz8O3r9oqM2/7U6s7iF+h2w4RimexI95yiojpDoSs/C
1hsQzDWWvQILz6XfyyBqvUeYCAzeHP0UQ1TOx1eyXuHMhtQN/TGH2Y8h8XOT
UwWdw7+bdXYP3RCAxjAQyL2ltADfuY9hTNMYmkKm7XUltHx5Nr3JBa81/Dh6
rpSYv5Fce6GkUxYlKb35r1tyKziXeNSNYp1tA1fbAj/JIn9j+Ho6GxDrBCjn
zzBRFj01aPM5HN1C63tTTBn3m4oBxxHglCtyXGP4ic5OFB73Y7xSNgh9xzdO
jFARc7iJnVhPKOrMC1Rk1wFlQAKcOR4DdXj55SWr+u3O+xx2acH+58wc90Sf
BipwA1+3X4zhMJMjCxjX0nFjUYxJjOg/qV3XMAE0/lZQDLOl2bOA1jqu9pnF
o0RfDSbYqsW6G8Oo1WTIEAq+d95BbjzO2y3S9+/I6jogtW/ghKxHfnn1/ZU5
me97Rox8qZRuJCexEH73cixNhZkDP1hxkPRkH46zSrqaqln7OHeuWOK9cm7l
qm0cMBF+JjaD/s5Wd3zlHWk+oLvf66Mn3Ycf/xICWvx7zPpgNHXw60CvuHKs
4d8SvuGJIw4/7iCR2Dfvzx4g2hz22nHPtCdrJc/h33bVG6jgrQMfcvX08Uyt
WjY87okSE6LokSD+ne/lE+YhGbPYktzzX38XRVkodoCpd342KWc4IfagdFv6
cKT+lIzhZVE9xzDEj9Z+VyIeJ0n8A1NH5RrxzAMdev6KBSrgvKRkDqf+cOCd
JCAZw10CG95Uq2qEzmAlxNJwwHhyj1qYImLcyxG/088YwzQMOAY+KSHc8wKV
yCCPkcz3iSbpPQahZgPePEeJDJ0wlSzhI/Oacw6HmtLiLv/OotcVOaAtn9RW
YeqOS+DezQ50mdoYBshgQXKlcVHD/jE19UD4zvEWxxkSGYFTBOjbHIby0D+O
O/Y9jozboWqzo4Ac+s4YHkC7VLO+2YNhwXnHEBbXRpjah1WKb49oo59/j6hX
AA9Ph42dJ3WN4aiBU6hOZXLEbDdclvdOFZXY3zOGRb2/I/584jQ8IiWwC/j/
PUrLGnVzmEEjawwc0FkRueN57VFQv0eFHMM20N9zUUGLQeIYToHy6gq1IrU5
DNLmtWRx9Ywaxy30ibg7P/DKi+9Edbel0tWjx3VHMTYuZ0xZr7Fi0YxAE8ly
w3yPDEa+ERefFMXaDC3u9JlFfUEZ7fNKogdHeVbOba3P4SNEHRELc7lxT37x
gST0S82U0NAcBooOC/RGgh5XQrAT5lkdc4uiQoZvBRSozy015/nQgH2vmHO2
s+tajmGniJY1sMI+F1uYBOlqRed2Lp87AvSHfEoFsc3PFk1Gl1+Q9jxzGDs1
JBjWrvuICmisaO9GgO73ESMHvAPHhMxKxPDNz35Sc4cEOILsudewlkCL+OL3
1b/Ww8XU/zQZxjtvGPiMnOEXL/QxHBNSpYaNtvbY1hMqYNykhQW2N4Y9mNb1
ckR64w7Ccu9xwjvi6Ds/JJnIGXYxLNBXw0DCb9pJVSu4o2gGZRPkbBtnMTyC
Zf/En1NRYgxLSuxvnAXPCbYjebN1Te8t4hhj+XwoBUBOBHVUAMYwoGiLFd8X
H9YxfHKwzKl5BdM0h18KaAJrTMf5uioEgM+9to1rFgViBLEJNbxAcsw5/HSb
n/gvHmP3Sf1KjVbbmpzCO4YpjV8Rxom9SRvD4SlS3WFrf43w9umeeweTlxZv
+TkMRxg/3diGz38tHmXpDBt/fNf8SktP3vA7fkJzGsNPRNhcc7zSnzlsWbdI
Psr25jB1XdoxKHrU1/pwTO11q4Q11yw4RE1Mi+2gnaH3OYcdrQozVxx3xq3a
2dVElPxQMxnvjsww/t5KuEQmxle29KYdoAccxojWicLodpKHzzH/zmFLGTcz
7kJjo7ZyBINRk8V5mv/6VWX7PS3qcVT4xrAQGcPxBeY+59OBOWU2CJLJ3WsO
4x3K9KSu+sFz2CYVFQhn7vzK+GW3OOVqe44XkDA+e5jY/3WFoDHcoi2sQS/J
rn+NKbhH5y8cqxomJoz/JIWbXxkSrYq+Eu0590HJgb7bnRKWJk8fhhEkFNAw
op5ZGVZ4oqV7UCeEvp/D1h1ZO8pQ1yyURNHF3vtBTp21ThTf9hSTI8wyryTe
W2eX7rmqaQHi7SQ93lg5z72KVGG891RPKCLMYUo6sAgbz7V91E+eOK1DC9k3
NH77MN9mKx+ERRX3ncN31P7SqNy+GlZsIfyMRRPdxj58duF6zo+2kHFPIvcX
JELaQc8cvvlFItTyyrhHFfSxlWt/P9G23+/52dmW6AQpCWyjwPPoSdyhMEp6
vtF9e9yQfQsnCu9tPh3LBEIbsgmhZtwTSClsHEQGIcb4SgqZVHRax8WPUuqj
JP6kFg+n0+aGB3apL3V2kY/5NqTtq/14Bj8zTimmrx+cs7aVMHp+COY92SyY
M92jMUznJPgYTYurzev+AH1IjIHlzozxSVnsVaG5Y+87rhvB8Uur95CBzafz
xU/v7t1hjnhjmDwIlK/6f5XcDUOjBduxrwv8OlMax+sX4t6j1PTk9Bf5xapi
tpGfdCK3mCfK8N76bP2UK4v+3Na/BgUI/JPiYhsxhOyeyiM5LD429Ssp2CoK
IEpss8aRDpYVckZi5h04ZzlvWpfxG6Zt04d3TETlgy/KmyMQeWOCJsGknn3P
I9qBK5Kl7k5ceKRYQWvE+wtOGa5xDEcDka57y7n0jWFv9J0X4Uv7eQ7DkhK6
Iftxjdf1DTM18Gkd/qvNYRgH+7m1+c2uSqDaG6CThvMx8RC2keQIe9S19md+
CMSCWj+YkrrGGIbDTFMEE2Qeuhr2d9JLZjCsnPswmCeQJXleOcL4SjgljjHM
6fV3axgbhUAEE8dtbHhv6EJXHoPcc6RvMn4YGUF2RGnHdUdYXLYc8aOzruSX
Sv3CKTReYJG6EpLCYhm4mmPCzS0E3ydPEG+MYEEpnA40CoJXZN7BgIBS/OfO
OuuatsA3br0YdCjCYxjtv0Vhl6b3Oz8kAkx6YVgp14g1X8nFlj7TkYbd+BC7
I9YccLGy+/jXD0AFmIVaDITuGGYz8vuy0IdI94zh389GMGDQJ5Qbv1JvzTl9
p1B2z6cTiokEU5AoKBrDIcUQfKHIdda/Jni7hXMpEp3XDU786Lx5ixlCj2Hb
cJTk39TExrOkb67aexF8Iro4h98Q9AIaeibyiIqMGSJiryN5m8OQ5LIVde13
vsVvT4h1Zrzz836/UXMi2kdj9RibacrSiom4scF3jmEdf1glyqjoR2M4wohP
oCdi6PFzPJUT0AfKDdphDFPJ0GRqseeat+qLmuVvl3K/rYExTK31t7YsOiKL
NRy7oRjyvO+k3aDoAPK2pJkKlHM4ArR6P1fM4scw5aiNGd9O8GS8UqhStlYy
wK/6xTuGI0J+aigRRRyvlCIL9zrFf0fQeJZf8ihUTDFhRDv7sIqI1XRFAWgs
H9DAJ0d5i7vd6JChKzME6SGa4LUPt7R3xJQEbia/RkNc3/n3ihG/auf81xZb
qG+UvZ/5r4/8iGiH60KNTECnl+InhD8Q0MjnMQu4b6sBn+kz17BCJVJiLMrG
j49MW9QnANs5aGZYn4VIIQKZMsy4EoIsAh9IZFXDaw6T+Zep/BbgL/hpc/iL
LB/w304yfAwTfQI5BtGjANaHbZSWX+xP9zbqVRSNKKiDgQTafM9hJQTv/RMP
p2MMa2rtpG2emDTPf02hN8hwfoPz3NFc7O6EaEMqqmOYM2TsSjr4ePwcyPXd
j38j83rPfx0vC7gU9Y/Zv8SYJY4RIpuC/FjIeVDOB+iRyrk1f88odIOV3BPV
9JF4TDZPzuH33MY9iRZ9vFr1t/axUX/AdyRrnX934ZHDGgNh0Qe+1PjGsGqX
JyPP/yazinOZmiPaF9xZq2HhCSebDpIZ1800kDSLI+/UPxnDOqZnJBg/dYOx
Th5PM/ZEwLCT9xZipChLMq7yMy7wDX8h0AKbxKg6s/LJR9hhhEfjAl8aELEJ
eXW553uJobxpavFhUgpfw1S/vYm2k30OEyi/gzanOjWeJfChDcixTit4fMhH
t+tLnpHF2dmke+Tov1xlbIQHqxbjSGZ4xnRF12ub48wwzzho41YMFQ/vwmv5
pW2Ie9/meExutki2ijz3Gk81hLJW6n/zeshRaHF9Copg8nMcyAVIswVzMlR+
gMki+6/HHtL6VuP6vfCY7O6+oRqgVCbMZV25B/hW4w9ZEiQWQvZTjcv42x1D
0cFYN8xxUjobmDN24FS9V3nQsgbKw6x83nk/YTLiN59Nc6rAMI0VOIhisKae
Z42rnyM8x370nNejJ8XY4wrO6a3nqNnBWlewAbVSn6MpTSdaTyX4tD6OtERg
i73VJpKqcfCtN67djypajd/ZjmP+B4c4x39hcEj0FL0cJnOcSmKXeVYoPuZ9
I/pEETc2Wc9X13nDZAdxcAYpUuMtYrb4Wmok3/zepGkUjYjC2srmeCwIr6jh
EYCtf8/2bUcWF7a+53xeoflT8QZ7iyPsHP+CrLVPpmQ7x0F4ybndKJvvVeMU
0ekP/LZ6T2euW5rWylMJzY6prhvvwYDBHnE6PNEch+ZIrZ3N1b7Pz6FyxOFU
Mhapnxq3+0Ue/heytW/eB8AyqG+Ny6NNtwbjTsrdfkG+se5zkjrp/0OnvV3z
ehCwIoGEU6jCPMf1R9JcZO2wHfU5n1Illk58iu95PUzvcUG+NKyubT6XzxKK
7BixnalyCMIKykH3QIA23Rpk1wJI9PFHe7LWG6EsBP3/MXUnSBLiSBZArwQI
Ibj/xTLeJ9wjx2y627wokmCRfPmLdzn2sR0Hqpxhc9Kb7OPBNi/2Glrfez0X
M8ItMNxXi7TeE2+GhuWtKMWFnBXnnQJND1Okf1zxKJ1eFnQAkdnnkXR+XsFX
2brU7ozckbJDU7nyXlecLIaxoFJJftdx3cNIIq5IuFVcYRXhBNijUd8dy2A+
FnC0z+va/Y0/kHJYbqDy91fFJnFdEOWKiUCtz/vXiiD4HW3Q1fHPa/mErWmQ
vNX16G3oqxMHRe+p8wO0a2dwA7Gd9PHBUiChIaCVenXidGmSWpOh7/MA1G/G
qOAwR9+fI04NF+L2nZZUxbXquGfZHjVGOx65WsBa+PC+bxofOwCjGkln8RuH
a4EVlJZpgNbf1fCVThk7wd10/ApDEZw5nIQ6P+H8KFHZPvf5Oz6gyw08UNFa
33tErmG5sdWn8q/ivguudLGcLHexPf0bEBvvj7FgxePTDr0B4X/3+mastr+D
Zv/46fuj3ifsZ4bojuwVN0zT6Z5J/Gr/2iOLu12Re4QCqvdNUpUGKIhUq2Pv
4Wzvsc1ivrhq/dzB+4yykfm2s1Td4+oMGG5EivLS7+eM0coWQU3Q4vq96Du6
PxHh0GCo+Ai/1A6iT7XqOsGgYdK0GYJhrPiF7KaU9AEetR+96eAWljWO017X
gynwChCOO/SQbxw6j3oE6LmJf8ffNjM4B+R3rZ+vZwIcSvTbet3LQq4mla5O
e1LHs5DMSBlTEv/GUzkycwV9eEplBo9VDTmv8INpclacn70JvO7jU65XTDzp
DBprRX/m6Xga4cOrRXOn40+w0ChXsJ97r5PSk7HHQ50AeL//kbA9tKMj29HP
l+h8eNGm/7NU5MRn5udEjt2JPl42SYScaNk6+j6kyb20NfZhJ+u/G5uIM9Ch
7fo9F0IxTySIc0sq37OAERWUFfgHZ70PcmAdDELkEDrnL/55oe7YDJKs/l7/
15o1lIZbT3PvuMHVm0wdQRJ+4xbC5OBhEY+Oj7eboMeQ/aHiT9yZsVTiyva9
Hm7wIWRt1rdZqn97vAGB46CZUHe+64Phc3ZxL5bWRcdhIx5t/j22e/V3Ubjm
O6QjoFHrP/1dmuqxlsyi/42n1UOQwacWfP83noECXUiZSKnqaJWhCa0AITN9
rrgGvTf/iKD29otnimM8zXusnssRUALBeD0AZ6r4RB8PVcdn91XF+sQvH6lu
uRHZXfvUkUaiVHNGG+9fnNoxrpGisNQA94iwrSfmPJHZmB3/HJdKRN/oqDzZ
I4orlfZmKEoVByiLRM3xWm1W3CQgDXXNg85n9AHiG2GyPSMd8MalpFu0eyg3
XPPoOKWfPcLKJnd1/6+wdmYEmBUJdR7wMVB2jP4nuOpvfNhDaMcQdO46S40V
Ae/sG3vnRSRMCPTTloYaq7rv7TE9UpoYVta6cdi4JGlIoOTS+ngkAX2vJ29X
rW9HxpDzfD+ZUa5LpLCObJgrC3K5HMWKnreSx3L93Bcg383agq+PAsTqeMwU
4xS2tfqw/ZuGDBPquIPXOjw209Er/RY6/fWdjtghJ8eBalj1/r/igR4hzs1R
7kp7ltTntR6nR1vfRfzkDJ4si5kBVhxgeaz8XFJJR8ejS/IShUjbVhz6IGKJ
OjydbxuZG4TgbNuG6/6/5tVPHGazadR5AM/Zo20IcgbJFYdxvvXQog/Uv4sx
+7u3sLq7a31Gc9ru+FprHV79d6lga9zLqLw+o+KffMPar4vsYiuulvQ2q2XJ
39R1vgZxxxVVx89qUddpWCVx4YO2jVJbC/73CmZthyBYfZ75Oo0bLx9BFVcc
GA35xsR4loo32KcS7zRXOMdVrlTiR75pxps2p/67M6sa/0gj+X5eM+A99lzQ
z6XaJn4rezFdkGXvvp4VL0HTFQiYypcMkVR4iNn4e3dd5+tOJH/U9ijVXdn0
iDKxtk7A7BWnhvUlWIAJjI6bAxhISb96H9fKM0X0iWlY9PsQ5BlLTuD+1fsC
rUc6Tip3RPnKl5S+PAA1nlDgV8etwJfqz7K99XMBzbXy0Q3i43Z0HCstiidR
kFkdlx7Kq8Guy53aVPB5Ud5xEdhqH4nrWsSuY3J+1zo/otqlY0Dp3xOuuPHi
g8rOHKxU/FQoT5LiNLs4OVXcB0TiPiOJq/8uzvURQ1PYgNX3Mybde7xRz3Hf
z+94sy/vfogLo+MaBHtqGqJGvc4YMtqoQZFi89Zxyrfq4Hgp/K5HYWQXxulc
XcdpTCr5Z3INiIWOL8pk2jDas/X++3pQS8N3sTNfFYfzUGVP47/nd374EJiU
Efemuh4CijLWNN+81H08sVOOH1x0bZUVp6mrq7Onu1x5VywrfetbCLJb7RfA
v0bUrLaiLHxU/BV3jrgQFvzZcXKD636tl7pOFMdI1n8OJWRU/DZgflSEsReq
uJ6lqUUgl3u5jINQu5Ov+YkU6eh4FCL8BV2q6meKA41R+LNTjbrPdmUtfKnR
oONb8TstrEVmwwi7jw8K444OEbXAOv7zxmzKJjkjnEldf+jNdM9TmHWf84xv
6IUKSSt9/eIWN9o+2PPHNn9x+E+GJfziyv19B9XmTgq9O0NKrbiXM3iFFN/9
vORvIXd4edjVfuP4WapW0vBIMh1nhxffdJPK0fdBGw8yD/8IiKKP1y7aItcQ
86y6D86ihovo213u43Ess4vOOPSFZ/qNxxJZMh/jq/5enNiwgechOl/93gzA
ryhtzn0vdU54WZ6q/LE04/fKD0NSjbwBxZwx+z3PW+izU/EeXe+cId/YAo0u
Rrm6ikNovBI25lfHL86eCO708t/1u1b0RXVhjjRk+zwTGJ4uDrWbefd5MKxj
D0HHevVzzMWE8zeiXF732bKt0XxFTWjO+rv3t5Fgnh5mbMXtmdRFTF/aJV17
R9r4AG6Toav89kzxoDmse4aC/42zxAvEz+j1k2jV70r/M2zegQfc9/+Jy1YY
w4ajlZ9HuzBTxvgpdH0U6yFaJKdv7ul+5vlkNnYFbgmX+o0bUk3ea8gFiJXf
94QGtiIjrQm0k6vjSPcMASJDX3UQAtdKPYKRp2lScTh9Oa7s8+h6wbQYeZHM
wQjmoeOkyOBcLq6ctb8TPc8eguZLVuoX1z21Uq5oQD8d12kgHk7JrVw6KM3t
XPvgV/gY1PowY0v6Lq6aj1fH7+gOP2rEeDF+4xoAVHVpkNCZrt+LnUvUnc+g
rlTd58/9ogt4SQ+l6GfFQyiTND1sPivv5VmgsJa+8Ag/+jxXrH3G/jW0q+sc
AWcbM0QXr94r8IpzyypjVt99DJWRN3NlIjTK1SmWY+Q8kJLOo90jwmXHcoZG
BkKtfA8JhKNFICTxbas4XNnBhXQFdFvP3aTDGGqLxH25hJKlsSACMNEPWdVf
Iq32TjF1+s/uQzIGjNjy5w5/3ret+vwzuW64PYfOS82Psty6X4vuzdN1JW8F
3X/z9NfkueI30I85lKZu5xsvV0tlp3O29n7uRNoXkgC3NpzKikfbnGAkZOte
fUghhRbMB0vH2k/hBoGxZPtnlNk7Tj3w+nwXpnKr31vd2xs447MHI6H0eajp
+PejtzP7eZlauBNRTnQZ3zgseujMn8rgpX9/40fMF0Zw8HfvU2pS2NjMxZBC
6u9K0c5Ib5jSzr5voJ/qXG2CDFe+ccZBI3+ZMe7odcOCdOhVpMTcex0IuIDt
Am4T28CKp8dpPIP9vFU9BXSB3yK24wfU8U+kylP4BQt2d1yedGWFeNFT3zj7
CQ2wKxon1YeZQBpHvMMJHf/Wmdd8y+2E7el++BVyCWMDY9e952XwqZA+5vkK
j7r+S87lPuzRwt+PPg8ipqVh0czovBooxoe+qJsyh/rFfS489iK0Vft1LKEQ
qG/p59n9Q5rTxoPXFjZ/ufrt/G+zKyO7X+1mt4dIZY9lB22qVtf/2Rw14Ihu
6v9U/mYdjG86BJex0NlxJgoRIDfcrudO1QzRN0sY/cE6zzniRaMqJ6ZY7+cV
FYH1FQbU66v4xboDAYKK1r338XH/i+ObH1H73RWRDbTU95WvuozOBGkdjn4j
fKuK+xppcG+R9K/9QiW7Z9KF2gHWXXHDOxCs9PWffh/0SO7MrqG/fr8r1cvC
C40oRb3PlMM9HGysCPEdFUe+f60X4gBT17kQ5CKV5r8636DkNbIVaRa1e6v4
a98M2+K9+H6/1yukGJN5qv41N/nccD3gOBm5eUcfD1CDeXlktHd3nOnkyxWY
/+pNqyOzukN/LPLY/+Iy0zNNmHK1JzIRBd5oqIPn1HPEldIEtVapP/p4mlyh
UhmGlNuZzkUA3E/KuL3nobCjgQobHRLDr9+LtxlJJZChX58Bxk4i72GBhNd3
8Xr3IfTI+Pdy1RKP1OR2x5LprOeyXrmAsNvdodqnxD+/YYS4+0KOvnHaCjdU
DPfe4+7zyCr0kXYiFf27VpyAtOWs1FfXWejNr2SUtgoZ4IofSnHUMHf0qe83
z9AA8wz/udy4477FS44KAh2Mu49HMaGQTzP4c/l1nfEKiHEC/PJR788Kjy1t
uTA66/maAO2vwI2x3Kh6U/MdoMaJsD+rjo6jNyUyClHmz3WeEeQU+teLNz46
frxV6yctNWKo6zdhgV/EjtJZ6bjiTj/KTeO7XfEML5LFjSAkv/HT5B/+aaRH
X/VputS8wQ93fHaf6oWNmAuAubZbrW7CjHq5d33/zXF05ne3/zzyoCvPVLHS
RPSiQNIWfonCCgQW/UyukavPA+oUyWMcwfvq+JWGtSERRGnfH9RxWUisTNvt
XnfD8ExnICLQhU8Dr6LPIj2nxtXn93XFN/ok2FFuSbuXU6Gij2rU3N+XisCH
9HnbAKX678LImbhST+cAcXXcmhrGvX3kqPMoBW3yFHjTFOk4NMa8YlGmz11x
opdZ4UI87fcq9aok8KWbrDo/5XutZDPwm95xx1O4Wuwhi/s9gYRn/EXYAJGw
3mfsES10yr2QvXU9caQ64khiFnz3330AST2rU67S37ulZw9sLmbm5y8ebbI4
DQHG3x2/zCNNEgNMref+hEuJMmtaVq7GmMCgcRI0/ja/dc9cFWF7j4zw7Of1
SHr8ohPoufdrvfcrqWoW7e4nh+dsWLCnPuj65Y7cNci+St2/U/EjHuYZvW9o
FxU/QyKg3uXDrO9Ruop/Y9PhR1b59h3XNDwJXdS93A1B/Ui0QzHp4Wyz4xHE
+3xIMZHb67uOCTh+/svT7z4MlMSW/4eNbTcm0mORFKNOfIf8VnHX7PsBR/Kv
Vdw6TAloP9NE7POQdA0NaSkta93GzCK3cHw5+9X35km7xe9wJc+sPDwemFt8
58/0z+s8eVJPdCqYvO19nnA4gA3c0XIVilNvMM5byKCz8m25UKDlbGP4es+O
R8ozrmTG3R3XlbxtF0x4j8orsFKi3v/EL7XnCGbHWxaTKBZuv+OJmEfFKLik
6iNZ6tCc5+s0e9y/eJL/z4LCCaPrvhtcVk/lDEizvy/eGkRJlFTQmf1cVJSh
zuiMHN2vU+RfMZpCiWx3OrnVShMrDqQggRWPtOweMQqp/i9+69twJQuYru4/
nT+vbbzo+VBVXGOOsN+ZZLPfE2xCEvDZhme5X6eDqQZS8kTmq89j5Xe0RxPy
4RuPzwlOahqX3VeHnd/ehvQJ/135hvb1196QMMzT7zluX2yyDNkpj3/jT1ou
xEtf48Y6jzeZGiUfdqiBPt54ggYdycvffIQTDtSmwUAWgo5/ahdf+0B6Ak6s
OHCabMEYZp+Vd1FXjEYS+Zft/Hf+lLfwR3d8DkfHdSBZKMGlzz6e+IRbE7PZ
u/shIIGEcva4rX1yuO978sQtaUP2G9G+qus5oqltHHuGX9vHs6yxWFrwV68D
UOnw2cgK1q1a9x6qYUSK7qwgW+1HpIX92D11MfZfxcmRR9nQW914SObH8k/4
qD0iEN/4GZ1ZkIM7MO26fg3uLVxS7J67fxdo8vVKkO8ZEHzjU5foxfI8sXao
+EGiQZ1EtrDcTMWDwNWDz3ynrsfSuwVOfsQjqs+vqa57H1unsfo8BoDhcGqr
31UHBVuiiB9k+qzsv7jnfkYo2e5X8cGNb3tiraHp0HHVRiq2GfpVxSMJ4bfS
QO58/tXYxt5nI3M3Hv4BG0a8OqP+1PgHstHYksBIkC9Vh4IBM+mMCJ5efV1/
ZiVbdJVB4Cr/kcx/vmuFOIGy+fu7Kb+MbbCk7vmLA1zqApsknUdfv4IJHPJl
jFQfg59bjKKI1Sor+/p1gaGdEP+jyf/G7z0SaiTeIeYrz9QHfLL9xoq769kn
2DCYzXEGDt7neT2yNsQTOL4+/n5FuiczqXPr3wtAMWN5hirZdTdY2Ub4icHW
vHt+If66rYYksb7r5LEF7/WoMu4wQreKU+FXehABsKB0PPJq9N8yBuvz7Cb2
AB2x3/h+pxr2GC8x/jUL+J3n0iePlJqc9nc9dmua/dP6VH1jzZ10MB6W0GRb
5zfuVTY6f82W7+/6g7ADHM7wzeOqOhFcLrdSu2pFt6XiYbdaehDDynX12JJY
EbgJraLcVUGfwRvi6DSzXVWcDKotO/IXVT+Kq1Q0e5E/7u+c3QoJ3H55GzK/
revhXhCsT3olNe/W1ogX1oQYYoJaf3fka6TAuqEuP3WdZL5dJLAGwcV/cdW2
eReMzVP339whWkGbMd3c+vgZqRiVoBRx1n2m3LYFaLAyvOrzRK5Zwk1OZ1x1
neFByRlhMc34Kj4QZUyKSRVWHxsBCtD11TOAwajnSAQmtr9XfFZ+xz9ZZawC
e9iH3zjSb6Yh9Ht8UBU3JNOtzaCl8M+Kw2WUGxMBzm59nstXq6UfhPUzOq7W
+aRWxoouuuIrlreSLOrh/VzQ9+7Y7F66+XfFGejw+w658SgejRn9NdCM3gne
3DtOTtkQRvNzP/v7gmU48qYZO113/a7IJRo7GTJvhWP/rHMmpwxqtmj0zNnx
OETd1iw+h/cvHmriTFfwOvs8JmDkQcL0u8fT8ZE8mfP1ZzHo72JlkgCJ8YSf
WO/54joMjx4YUPXfxImLQCljEBd+/uBu8HIf3ZAIMXzj0FE0Q722Z+GX4icc
qknc7uGPKh4JDUYCW4Sx6u/ysPCTUO9Dsez4l80STb5x132TcFz6wBuhgXvW
8UgygYqNKxteH7+CUqHJDzvX65h+vY1oRqTk9149gI9oFS9/oZ67bNJ+oxP7
BBZTccDzNJzgH7ezjw8hIBxYS2B9R35+ZkQkhPEF74or/Q5H03CqfhpT3jh/
IPXQdvz2PULBwSEZgYP83jfozDSxkH2tRN/3eQ+0FLJiZhp41fG05tMcHgZ4
W60nUm+9Q05bI0Deikt7DaR1DI+nf+9BD9CC/nrabR0nqEHXHqxKD6vj6V8E
lAHQWPeBuBBj+Yik3qPPo/e2R/POgvPsfTz9bJz2lab+N6/woIzbwBGy9dR+
t6cHCDouiQBv6PgKkscr8fz2L+K/Wzwr8bDlNh2/41+ntscQqOuh00TNFa2E
QEPHZ9wr2NrDRNV3HeU5ZBEd/Zh8VfwJEmYl++z5Mn9PDTlaYRmUHHU9k3lR
7NEnOZG9zgO3HK0cqvqf72Z1nCAT+IVhbOFwTAp3QHlEazOau//uHT3c83iV
QFefB8f4CqqA3+dRx4dzPOJCFEfnOl57bIvhMMOBXv81tZGPjiO63MXnwvG0
ah8G0q/HQsUNWVOxKi2f/k6vqOBSgUU63Pt9MxCzckZD5Dz6+43OCrDKspOv
Z3ZcSzr+yxRY+7sIK47JQzSTZ98HfmxqRewGCOA+v3LhimAKwbXa11IMGmCs
l9ky6joj2BO/1iewm7o/dyTF8rZlyFH3gewi+szMCGLdW8c9cx4/Z17bo+OU
NY8Z0+BR/VJvJi4lNXoLfc0FxMn8mZfujDhXH6+iItFGCgLk4RvXA4SSQdH6
LAlH/a4nWtrkMa7gPOv8EE1Rx1wxMl99vOx7oYZFFbTfh+xmbmhUjotHA3C7
hV6jS2VguioeRD8m9BkbgFHx09/28oRlXvdf4jKD8grfdx59nuU5edNBIwrX
cdjwws8kWGooW8d/VXmotiJQXB3fvzvICouz1s+D29i+RXJD5rRdHafjp7jI
23PW7zXJIWY64Ai23pe9WNRsL/AxYvZ9nidzhzsvcNebhkd2ezJo0YyvfAY4
f492m5F3rOMqjm22rVBlz9nXE30oDForrs+j4k88TtT1B7hT/V0wq1NdYJJv
Ol3xoYttI5I5rsqfNRlOuwYPM6D8Pk/y1Lm/oO+nvt+IysPPp+99V1/UOmIe
SkjZDyy+wHHEDmczDrmi+b86TkGHqJju8zXPjo/o0ScDvou3BfBPgZMapz7q
6PdhxgdV8wag+ql85nh1Z16Rl1iGVlx2OR/fI9p5fe9HRGbI0g7WV2c/98so
7YkQieFf7S8HgTNDCbpU+j91nT5cblHWBzK5dZ2Gu+bs5IfuUfgBzXkLLpcg
3PuaUyT+YCXIwumbbRXPcqjaDCu44yuaR/sL0BxHvw+49vCE1qpQhyv+eeVT
EUYYcP+d57S1qN1H7K37PBpLr3nNSLbTcS3F/OYlQa3nuCLgAqdBBOro+w9E
GJ+8M0XwVseDqknoLUksnjuuikUmZT573/3+39rF0oIZs8RffMTk9nlN0mte
Q4f+NVXBhr2BOSrO4zLO55a+o9cf8gLRVrFJUgL5xlUXN9yG7HHfql44tDOt
s9hAeqf1XQNFWzT4Iumz1nPXqOJyiHwRm/qKRxHPlW8uue9bZB6RBrZwf2rd
Yz2nb0LuSgH1xV184vvrWa5s0qL/xU/jreST9164KbCTMxUWsB/r6KPiZKy8
nIao3Rc1SlU1ySvv1ybjG8cQPQOb00hctT8STYrlJcKj4mZ2/JWf1IdLs7ji
ukdXJjtPtLgrbnVgJvbyB2sdUPuzoUNCZMld7+dQC/o+z0hfdH47YlD3+qJP
U526ztgEaiAyMYDCqziqJBDc5+ZAn9Z1eoFeG04e47/rB/J25/fgy2atw4Ou
7xP1eSyPo/+ud3ALVg9qrut6kOTPn7DUvDTieo7KMTMnYsPKlY6HiWM4FefU
6m+IPxFpyIhz9fWjUFwvCzpA9jqPdDFYFiIByqKK08veXs+06f51XJ4HMhE5
y8qTsR4VancsvPe731vNONOddHj3mteIX3m1Yh61F3/2CF8p0vVrvsI2HXeJ
qies1M73TPxJh7zT4llzLnEyGgiC5sDXGr+4jjUsJomA1ecJ1iDttKR89f5E
wF06E67LXuvVoB6Btm+qSLWg7v8FeBWpQTOa6icD0pv2R1EngKin4zJfA119
yuv8xckDPrn8SGlXPIaa+XKfaPBV/Ik0+RXbVjSbb1zb7driqGBVH3U/l1SH
Xyu6nmFUxSPZ7oOLeXbljSZZu9KUgymO69VxHkFxelHqXX08MWWb/4qGSNWh
MGaGmSOgOOI0FSfEk90kmgt3Hx9RPNr49B3Pfl6h9TwUGlKv9Ptw0zyAlN8j
jVX7fjT+VPQ3Ncqj631IgzOQF3QOI+6Kr0yt+U4AGv6LR4LVLuzFqP19ZE0F
/sd7HavfcwqVEzguq/Pe30VeQm13E1QI0YpjHqS3EQ3Cyv/FR+pDyJ376PWN
sOGIfxOZ7q3yCogdtHGmXjv87Hf9yYhde4yM3jlK5+c404+GQwp6ufMcMHKI
SKDiM2oKFY/R7OsX7qGeHZ9vA0w/ddRcXto4AkGQiqMBHB2nipbnZT5z999F
GDXvlHJu3W+hgvDY0o6Q08+qL7D0jgzwj8wyqk45j6gnpt1yxs2h4mpbTgJR
ILqq7rMr2JghRof0sOOabytYw5FNouI4p2BZJMj3wjPH1hKqnuginnJff9zN
t7Q51Vq1L+jMPiHnRZLrqr4cGiP1VdMy6IR+XvEHXfJMJsNb5T+AIdGGkU2a
l/XxfLrBxPI2dF0Mq5VMfNdyeIqvKh4bRWqUx+vH/I2HIHsFDKIgrPvDOxZA
Y0ZavfhiAeebVp2hDJBKqLj5U9hSLzL0rvh8wlYKtecpnaUjGPVPdiOzoI3S
128RNjTUG+Y0WfdNX1pSBF6MPbQ6TuobB1fvpuv9kyalbWUGmjT6vb2STiOf
nntETn9xxG4vyvM0fwc4Ehc32FwpfP/eK56mcSQ787C/cRL4ClHeAxCWdf2m
eqn6M+hfx/wX19AnEsjVr8/DCuTzE0b4lIVD+8T1dI38lLDwLx1nYjnD66dv
VPdBHxs9PCDP2fvmGY8vACAKwk/35aKsuoeut2zLlT8oiuz7K3Zmo/vDvsEn
ECYubb+8y1agEbK904ruN553kiFtgOdO1dBxunBRoQxpv57vncQdJi/Eh/5+
74hNHhm1RvG+43IaTBNZd/dDoI72OCS+ShC1X3w+UKmVbEBjt3jQ8fRmmrFi
dkt+peMSLosoosXdzx0KR3swDQ1qgxWn+Br/yBnjou/fZaVlQ44HwOeu1ncB
e0NPlb4nD5La3+MnEW9PG83sOovXHdAQiYCRNlbFr3CNrsg4zuJZi3vxD04j
SB71/kPo0mFAsIykRP3dKK5hMZOCpFpc8SPQUuDESDzV9firIGe2DWS5Ot4E
0uQR/DwODL84I40IEVLnqvNAAas3ifyG31Bx/EBHH6+H4Or4kxuka6Dv2+dH
h/l8YXGV2nqOQ1F+j+uKinMUrt58UeqGDoeYtvd1jrDDCTEsyMra9yeOMo2t
hYbhc6g4ppFtX+eYIEXFF3ao/Nny0HXWPLOXkgijlDarz8P5jm27/rBG8Op4
9JUhlkOnqbxLzqmpyZVkkEu4Oi4IIYPHttdcbNJ2Ha/GtB5Iv58nz/QR1Y6Z
mrficiIAawjKVbiRbB94U8noN5YrFafVBgDBsHkvHEjwWBYAj+pajTcDOkVx
Ie4PgLFqHZjRF2aAiVT4eb/q/FIxHWtAK3+/z/PCVM4I6DT/iDyXd/xVteBP
0eePAsOmoDA7q3ottAnwPVgWhdbveDAPrBlGycXf8QFGqjutUfJM9bzCXbpA
MeRIpY+UwdETRaU7+UbV6S8BLp0NAlW/5wVICmy5p4Fz1ZwC2ijOlJNeggWi
4hGXf2JhiHx7dnxFll/By8Lg6Dja9TvCoUFW138ziTLyIM/e+HYgQ0Q7JmnU
Do/+jp7ICcPW5Tz9ux7z9z17oC+g1yXfia+FyLAcrO4zwdk4847ogPd9IDqA
xRdsKBBfxaMfylNgIPpVvXmxu0j3ZEWDoPbTK0pf6iWjlbvwPOhX3Gqfjfwb
8YZRcb81cn78F7ovfYVBpe7zbGfP0zlBPUcQOzC9pUca74VMm2gqYQycHecM
oMWXXb+vX3bCP8FUnj9gX39Ew6ltoH2ver5UeayynxObm/T3e6ns4+Gp582W
p+KunXhUaFvFI46D166hbumjy1txuihHHLokRau+ryuq14T9eBAwb634/no2
GrHovfTxKAcngt+pnVPf3Qs3MKUGJ6WkWPE42H9WmCO7+e/4MLfUFmjx2+i/
C3MnT5CQMYHruA40yBH1t1HvVYSLwmt1b/bGk8i6wvGS7gFi9fXbWSS+arWj
8NWf5xcxB14q4C9P1REa4eEnfhJj7cjqe0cqiDy9Xr9ace/4PSPBbOYwek7h
JWCWR7CaNUutA9Gaji6zmursfYQZRijWfsfnDl7bL563f1GtAaiqOF2gmGQn
+6p+r/4LWVSvyB755o7Hyxu6dw9Su+PSp2W6egWw23EOIcDVkDKdR3HbhVE9
onh6NX4AKxGRCM5RArf3eVj0BiYQt7V+LjguKnTTaqopfR4EQXJQxK6u1d8F
VP5m2kIj0NZTcd2T/UrZcTS+7hMHHIBVWk8gGX1+RBMpX2AUT7//UDW+h5fb
cFc/JJvpxuDWb/2kDL+4HYpApiy811vxhz3fETDv0esA2WtwbPKpaUJ3/IoR
Pb/tq3HpR1RZaWF4KDq5dR7cAuZXWB6xyal4lIGuiCv4NOp9sGdqDRt8W7Hq
uQMtY8UY8PybbxKRCE6b1CSWa13nHR3Dc0WzllVIxUGCVWdQIEfpn2AFRJyQ
VRv0f9+3t5T1sRvR/94rQHDlAC8Jopl1P8nkU7KJlfeYvb4Bx9qd9UoQeJ6O
X2H6SinvzzbWx0sv6SCENL9XPfWygeHIWW3M//EwbCjlxKil3reAHnP5ANKr
v8eI8PPRjhX0qLk52SH90uu1Yr+rriRlbhlDTTevrPcc/y4JjU4KdY5R8fzb
Jv84oavyduUJYjqH9CfUpW887PPDwDsSqdsvDjNh0HtGMOGo+B4vbFuPjKnW
5xVAD/wBLbSncU0qByBnpganiXhdD1wlQQSihbA99bt0tV5kwuWrq7xixfxw
j/PNFdZgxfHB02Eyau51Rr2HgmqF25OoVZy/tF9rb9k7v9JVdcNemxyN4Ipz
HAY0p5sx9r5vA40InATZs/X0oi6D6+a1Y8ZaeTKMP5QnOVfld313YQyBk6DB
YEXVfY6typXOMcWo6sOs0Poit2fE2vvm0jFITwJszRpXccJe4d3DqFz1XuHf
GSubOGxpglb8oo6qECSxtff9NJ+135zR3i3daS4JEvOdYsfGNbKOl8jMpKek
/kvnGe4HatsLTfLnOvs84wikOFaJ//6uD9dtm8Fx9DppOjRebhYdjtJNNSvH
gPH9KoXP/r00yZ90gQFhn/67GSjd8dmxB1Tfb2ll8amW887WiztC0bsiF0ga
q3GzuBI7GUnYcP6fdZ1wvcaekta7eS5QBcQit4iiR8264iGNbCGvIVZ3/E69
RKLKiK328ZVMD34SfXMVL1XcphPDHbidqrMihS8NZKlCS/oXV0Ob5kA1PJVX
mPte8cx5eUv93KODTEZTA/G8+u+iOQ5drS1AuL4/xDVIHanYVanfOBUPKnJk
LDbuIrPjn+zqhbnJFKp/RWLnc2ukTWqh4l+HzDifoEKhrUq3PBonsOYhJUlE
ro5rLRp/XfRK63vhGR7Y6efD2zIiqzgY9a3Jv+Vv1fW78ZSmztBHnrOPj/iD
2QiJsp4X3Hs2eKkI/nX31RW3PByV0q9v6DduIkTplphrmhG/+MgdTeXddfdt
RbQTPUF7Nq5SyyDmEHIuyVHH04KEs55R1aj7ZsAc0gT+99P5/w2VAByaTOTo
+dcdXAoSKI3jtfd90I7zkY1IEnU+HDXxkZlwltWaM95EYbTNFGX81J+O0wq6
Mlrm7lbPC/pJx8VU1GhuqzgOWlqCK5IyfX7DlxWtEAzDwpnk7muprDDGG79h
e/IXyGMgmfRzn6CkN6cPmlPlWxH5zyt+hNSRnuIBfeLhUt/zVQycq8//REj9
zuh5lh9BtCyQHPGxRgRxOk54bFIJ0eXv9ypitWBk1vOz+HpAflEuRZUcWr+r
4/yl0R35NvR6Hmaxd39PCnDXvnlLd9OrvUNI7PtDKdRSFnbeavywxu0eZVRM
SM6dFQexHrGlyiig7r/yTl1nLSAy2tcvOdRiC9iq8Sp0lzguxZJNUdV/1xgB
Cic5bvETxYmammTRvz/7PodwKy+0KY3iaUawKs4UEbz91QWqtTg957HsXacA
h0sUiHnfgMF1/Xec6w1u2W6X/oYGss+Hdg8E9qz5uNnFFSWA2Es89V0/6Wix
wV7cRhr//2RIiSENS/XbX57kaaDV1gZToI6fr68R3W/YtorD1HsjPumPgfr3
9z5BCutpyZ/34tlF0hd8SfcAjnL8jqcjo6yJKnThkZ6066/v+If6QsXHq23N
YiAttYqf6jHSo8Rnun5/3s46BQO0zOKzi1MdposYa7yz/66+cHrSA3qgnnvc
TQCfcWZ8Gvu/+MQ/gdT8zYOerFErtudy2nqv5G6L4tFgEKJfVfG4JeulpSiv
7wJvWaWwzQigbFsfT3bpNryDrNn7eREZj9hqNtXmoTyZQ5t/UFAjY9RxopTg
z2h+Z/UxzAQN/TTcjE+rv218rWeNebP9dHcjP0y1/NozPCr++6HIH7HfldTP
4ruhSqMR25bslPMXP4NjueRQ/Ntmx29uJWHX8AGs+5MCLv5MPPoab28lXUG6
uaHS4opTkzfqiAL009cpbbFXYHJr1Wwdt4lEgDIuRfV3bVw+xRU0xVHrM7Vl
ExA/mNBwrWMZiq11xm0FlOPuONHhV2kv8l4Vh1siFK2Wbb0LemGZrMmxoklU
x9P8xu7wbahc745bKa2R5xmBto7H0m/E7OvqOR3ZbbW3Zok8v38v9fbzzPIA
v3P19TAKgKODSW/fEHELLuaof3z9zqMAmMp30OLG4TxJoEecOu4YzlbcymkE
QgT9Kn3UUCJIgGkMqnn6d+nTeekMr9XI9d5a2/C+NQpgIer+3GmQuf+Dq+23
7zFirwDw+ETGff3irw4jBRcT9+96Yr37vOX0NYxKSHRW/CH3RF4rdod3nccA
XxISAuxZvk6uQdn9II5avfc6T3QoYmNOELL62yP8rvjr7ZDT1zcPH3yviA36
eSA83/qI6j0gKsX7yFB+680sp9q0T3Rl5/OL4716h1bYItfq+HzdzYOwL/wt
Jlt09OgLZp5/djzMpFzlQbyy4iMETm/WSIHUcQDzTeZJG/So3zUyGddyOl6F
1o7PmLoRGN/ure8nLWvVh85iSKoVh/YlLOEpHKWPh0N2vlBXL1Lz0NMj4uqs
MqawP+o5BgRwpuqw0q+Of4pZhbuWlPHt1nGJRfoD9Nf7eVkcNATDb9h+16+V
RkU9CuNP+eyIMzkjKHCGGVL3Uz/2fEkcdzx0Kg62agZmLW4c/tiy3nreUrhZ
+faI2Mpboz8ZOxwdXys3yHp4lm/LyMjrUbpY+JTOFX/dbCRLZGmO+l3Ts4Dr
IFlmge04MI/XXyfg995Kcq6YB8WV567joREJ+lNIYj3Xx6+XBguhQJ6y/i7q
NXmtvO5X4QrENUEiwY9T8zuPHskguxON5r5vxrmxcNr1joqPIB5j3RnBrufo
87CcwvdfR6yj+775mfxU5PLbv++O0BKhGuTWcBy+8TtE82RNFJf2et/uyFzQ
36Zfsd/HLx5lML0hYIq94zoAUfonX3LW+0+dgn7HvWc23devowvZ5R+G61Rx
WHQpK0/McfX7c78eAia/NBJ/1/+ckcGcad+c/R1JRPYIatMTnXsdH2rclr4N
1kq9J8AElgH6WqRrvvktcczkpBu0k+H3WfERNZx0OuVXfR4Lx5MZiS7fdz8N
++6K0CxPjL30qMcedCF5IzXtVrhu8RFN+qjSXzXfFyfwR3vCnnqsjlNvgT6J
mEnprIqP6KUHOAUcXPGliQSFvFzy2dePP6+zQX9pL11KcWSuqZvhWa86np77
YW4XeZua/8pWH4J0jGQllk/9LnXjiFlPVplR549JyRFv6oC26/7s0YMlJnq/
phAVR8tYUVTwadd+SusxXqOaPHvznWFUOaFdzEMUdbVueCs1PKyQsrHxi98v
EYIU4md3q/t5vCqKawQc1etMnLxvKeCImeu4Oo7VF1MtJid9n/MEZLckbO/K
x8Q9JUYauCVV//pwFDtre59B+fhkooPSqQN8Q8TX/ccct7kbDxBBrPscDygY
Seqld+l1v3E6aLITPLy6/2eg/hH+ZnF91e865di68Mf2eiRUHFvLJ20Srutb
8Rd4a/d5O9MdX2aPaj+SvP+Ov9nYjThaz+rbD6pOvjHCAUcy+I7nK/UJ5BUY
HQ8iIF4rZlR1H2DXseWVm7phdR/k4DbhtacNV/uvFhdf4BVm6VG8JNmBzX1K
gcjrHB1XPwDEXWFi9fO98pMgYij9rf5OM//A0OKu9RQvYwS+SOuXJl0kWyuu
ntfXkMzcpRdhaU9qFRsTw8m6frAuoP5hbHiVD9p4m3UUp02MR+lxjcj5hzd9
vEKf9XzjoJoWlnR1bH3+T7UjrbVfrVE+KaavuDsccyDLn/696wlnBo2WPESv
b4ClA6Jkjzptf6d3MlsLk7f/6e/9c9UMoGS2Waq3f3EtawkhAli9D7gPw5gl
BJ7SkcNYj0AnBYU9gooVj8gCLXv1Tu9He1SqqY/GyWrr7z0uSQ/t8xh91/oT
wRGGjlq7GaR1HNA7Y0Zk2Vo/CX+8o0RSCk/pZtAJXZmLUSvzoPs8yCBRBIJC
LB+6/Nsxo4wBw1Y+LHD5EWUdxEYCBak4ZgkRAIIjq+Z9FgsqqnxM9KtqvhYJ
ZGPHGSVZHfCK3yqVkRcRwGDv+FDPRpUbyKn/LsYil5DMt0tPUvx5Xudmonql
PxY0t6zu3RZG4UvDQDlC9JeEf76Luh5EOFpcK0tB4X8MTPW++SZYbssvzzng
omg12eKf2hcQb6Ituode2+unbDRZRRibzdcbITDEKuI0Qqr++TiiVwsBGv2S
330DB31V2SPxWPsO4OwTgjdV36N0ccVXvKdvU7FZeMthu6PDuUX1YCsehDg2
T+pI20DlS/InoJXoAVrt+vhJQgSWxdUXPlM8mPqRrQHEoOImPD75GQJh7e8Z
RdxUOXB8WeZW/PNromoC4KFzU3H/vsKen5Vau+JX3qC49+mbro6vaJpPA4ar
5ox5itcrOcq9o+vH2G+CnM5MTqr/P16y0Bn9FgDUqu8MmAPneNJfOqrOsnDq
n5BXWxEE+MbloqZ78d77bOl1f7SEVT0ATDAWV8dnvNQNWmI11XGQa9hSNhr7
Vb8L1TkyXTgAjZtSFVMJJDeWQfnZf1f2aSHhQrX2fr5PqDUw30cq3vGLgyWg
udz/8n+F+pUnomIBHqq4Ibcd+7ye0JI7TkT1HT5IpM+Ka5u7LxTAG++qixkr
SmPRGTHQbxyY4ybF7yP9vMS/uKJprGhf3qV3oU8KjKEaRBErXDqXbDAWGE1K
H4UHE79hMkB0dOlrf+SqHaks8+jj+Xf+ZC1X1oOM0Cv+ZAGw4L49vo6TXdn2
eJZe5ZNoc0INA+wg3FC4ax3AFfCGviOYT/1dEwq6JGdgJTWXFGef8lkyoh5b
euwjrpWRbfssq0/rbY78MDvy8SZUff+VNXDSNF2y+1V8ZEA307G6SxdO3Ndo
kVSojr4/QH5PNgG93/G7nriZKVMxCUa953pNuEwkoTCRKr+l4fxZmY8XUTL6
u1Olo/ylHWymX++bIdBOJ1DzSfZS8YUDp3tvUNj1y0gvhcB0XMAL528TfAWm
tSACRqi4cpCylxt0dn44WMdpqVm3hwSl4oYa9jQ+JOfvvcKFnTElJ7g0+z1c
oYpjJvkki49AOgL7Wocb6aT0mSMBf0TI3FaIglZxm4FaEx8El/wbDxcnkmqx
qen3isTdHXcBxWnhyiIDTpXT6zzt2vW+Pel6PpGdNRn4Hm/4F7uGGRhLr0sn
JOS1vZReoIGz4pR+n7gw08m5+/jPK0P6xF31MV8VPx+nmF8fwFrnTcXD0Dnj
uVJ4DPHzdeYEdDlLt9nrA4RH0A3zuXStSQsAaoP72B62o+PcCBRfVnpyKh2n
kGdSqW9RuuXjDJNSnQZm2LouMU/hInVHS3iV3jWy6rJ1ahcBCVUfCQxyI/j6
wm+fvn5dQLbGQXS5KxWnXUM4zHRwK78D7GI4lbdMJYtWcVIZElhZuLF/nYfq
1oqDrm5kzYnYCY6M8kN2Y9lWcRPpaPZcRo5Vp5+kehCkVrS5S4+LaptR7xGn
lHvrPjale5F3Pn72fg1Z6L3XUDL56PvzuYPBbgYJ+nkIdT283k5OcFu4jqOv
x8RsJNMb5AXrPFjHd1YUeqed90b7RzU9I4pefJPEoXtHXOj2zjMNrDTytwBD
rSsVv159Y3XPbD2ctx+HFR/T788d2juePn4AYAaX9f5IhbF6PqnCfbYO5Atq
T7J9vb5OHT+jPQSyziOq+vym2VdMzK9IHFWdcqbEsjhFtfKo9Sd8sSujEG2m
33OUt6FWWSx/flt6ccoKSyFCwerv93MHoYfG60/1VJ8Q8zdCoSvs1K4fsaSw
6fhDAn/XvnPSqMapIvGqZfK9ztSB51cT6/7VNUYa2qpenSsSQRU38ob9B5U6
ui+qsUo77Yjhyyy8nFxipiylcBDmYcWfI4N3iKXxmy+Ik/k5snm2TibFDSU/
L52pv/KLQ3TwxzS8Hnefh1CXZEy9Fj5Kx6XVyqbXSLTjVHUktnHg6H4LkulL
vgmB5Kx8z4pGB8GKpNffv/fIQ7qfJMBb6R1xpTNYkkphbBdvengxId1osis/
7v670YvLtrNFo/sbjyGrggFlfC8ce0Sk1xkTwJQ4tS+zSgMj1K9m4ljvz6QA
E5Muy/1V/nQDaJAPLyrLFrfkjnvJsNri8lbruc5UVqYQqNtnKnPTzGvNRJWn
e8VHPDKTTm7NPx3RY4L6soWFRdTxm2iKeeg0s6vrse8SjUtH4djPXxyH/7Bv
GNVVvaxrGWbkEwvZ4oHSHF2Etq9YpO2Fzxlpd5kLql1uQpkVh5w3KooKZNdx
lPrxrKjkUzOo9TN8K9xidlh0tft43W7DdEjfq/jg5Mv2NNxpKfFluzs+8ypw
XYH3/x1/p6p/4EO3s99D6+oFkvHEV6f/LhkhSSbYLlzGv7juRV5gKWVd/xVj
nEnKL5Cc1XHlgD/MvW72/SG7QT2H3yX3onqO4efy5kVt3+9+n70yJhXppblN
FWcgatUFbb22Po9vN2Cz8AY6T5g36VTEzZDZS+9a/Iitxp5uz159LTAnZbRx
ssq46vRXit3cEWbE+LvjQTHmatOQr7i8c0XnBJS7+gwzCmbHK6O+t16BxQeY
1R4ATDSPvh7Du8eoa4taUf/eR6t3Z/dimF/7WppZMUp5YpnUz1fPcwPto7HX
OueR2UiO8qmNAimp9xznaaPLFueWp+/nk7xWknsH2NfnN5tTG1nl9tXrP8k3
CSlTWSz/uv9xPAmjOeq0fR/QkbjSvCLYhfsaGT8SvxyR1Ss9kwF5s6VUIU10
91zmtVGIrd/096s/c22hdEVTaWiAHB0HS5cjzHftqLiRhl5pOFql5xmuhwks
0IQRx+zreV0pXuIt+GDFccXooUjH997XVO2xpPRREOb6vldmUlsMRA1FV+eH
PHp0fmQneBCVF1E4JHZuguDLePo86c3I3KBGfvdnj+hl9I707irvdXN8wIsh
CF2OPj4OcVqET1hjdf6QiHEWF7j2VfugoYuUzDgLGrbew6B/okijf9B+TFwM
CXdqbCiPim+udMflu6gpoWJVnna98mL0t/Vheg5+pYB8tRMUnJUPXFHBRnKS
LdHk+caVBQfMl8Lw6j4AjQo4zPUqqhaeOQ4+kf9aITuus88TBRiZO0zb7/ee
mggq123TG6k+BhX++HblfcZDrTjR8886Qj1n7qXLGrtssIWgkXFn6vwMOs5M
3yQzV79vdqEtyxv+Zs9nLVZO/Pm0P6naVTwgpCNHo7pD2Dx9f2Ia5FuFI91K
v1r8VQBiFRegyzcOv3sg/ZPF8dFXfHm4B/E92Nx+z0nwXJIuiP698yW8pztf
pcpEctzxOP7xNDtiqVxxdf0no1wcFmfPqTOoJHMU8SSc4Y7ba4krsIy5aj2n
kKVj/0Ry5Or54xXRpchjIyb0PBGI951GQ4iPo7/TCF+tDFV0zyt/xu6O4AKL
RLVb3TciDhFq18EdjbchsUSzEBLZD679FJAw9qamRxKVuh4W5RQk4LBcT5+f
Ox3bYD50UPoVN4aI2gZAW+M0iOYd4Qbprdxd/0ZNxr2+gbza/yJT0uhUml3c
zcdHJlVh6S7Kfmd9X9LdyNIcsQ8sHi7QhaaEI++0SraKm83qDkyPpfdNyl1M
lsIdx8U6K+4u0Ptyxr3812LhGA4zSWL+9X38iGIbswypx9nHmwnuUdUEJrv6
+CeYFEw72cDRxyNlryML3zx6XhO3dag1E+N19vxoRSFgZ5jhHSj+WriABvN3
lh8tjW/cvHuLK8T+Nmo7fsepIXrtR/FhR1SejY329dLs+3ijAkS4uDD2/h4r
eN3v6Ede3f+hyXZntknz9Wg8A0ZEYKgItirhPn7E243ICbG92l9WVFueSNPn
DZsVz2yWEKPar+vHTwqI62AzshM+fX+MzQ0x0xv64TdCDzKioJ3vpbw7PhHk
1JtXpj0VJ6SBPXGv1zm14vpgn4oA85mGz95xCEaVk4Xm/P1djeGxokMGyV2/
N9AEYm650t99ZlEC42Dah6NaceWhdhzlHV9xnT/k0C0OYIrqqstwTHQzs7Wx
iu7j4SaPI2bHq33HRpSEdX3xb+gU1ftAgS0F6xE5sb7+mPUMuw+Br+LNpcaE
ysGpoDVQ6xIG4GFVUkgkHaz4mcaPTQxZvOZxTJhY60W3OfP2ittViM5pMvzm
fSv7q+4ZDffZdWKk31EwVsipve69CN6ZKTaVjP6OcD/jsQSp1voY5ihxiiYQ
oetV9WD4TVc0AjKpfjp+mO/TpX9xeXvFdbhXmGoBalwVt2AcYZFLpuv9CbTd
aBmtnanJVvF7hXbEUhBn4ew4Ub74CGs+VT3LAyuyavoAWox1HhQL79qi4Ma8
ouJRzmGwEeDv6jgpsP3O8CvS2hVXpzPljIlH6fiNGPWA9bKv0Dno48+YrgKC
Wyoq36a+IG08IhuMvdLxaA9hzVlKzz6eU83DAxXQut+TOwrHAJXcxz576+x4
VI+ZqjxRxqq4xoQGKjjk1jjPG42MQlFy/73xV+TxWLXR5UNnrXXpxqDS+4hE
g8Wx46flk0kiROHefzde9IA1Ixr+9Z7AjPAviIFm6+wZmBzBS4REu5de6Fuy
SJ+it390/wq3ALL7hU0c5Y9sh4PhvWNh9tN9kn6ESLG+gO2+fso/GfRxkrjK
z4UDgW3nCLWYlkL93TRHKOV+ajzdrNlxuovxINT4qvwBtAvy9Hn1+csfTXym
lEIAkUrUfZhBF77eKamtfnGTssjhozvW7+LPF2k+vCrtrYoDqgNGPFK57nPe
MWDmu6w23XrujLFJ3RlgMb6OHZc1kzcD1VilO5dJHmY/YW2bVV+/NcMLgjcJ
vbB1fGmd30A3+ldnx++AQj/fV7Sp6zz01MDUo4d0NG5WeiPr8gXtwB11f3RV
rzwzoPt/57Hn3GkynHQL6noWrmssyd7tpM+DE/HQXhrhjNR1LomA1+2IQnrl
bzbdkUwwgJO78GOh+1PmSSJ3dn7FQ2zDxFdUwRSdHYczOAMWBU6s67SzLBz+
m8Lg3uuPUSHtEzBDwoD1PmDRuJYrumTjdzx2H61Z7LO5+r6BRIc852LH1utV
5AS1rdmYHZ1PmgFhVklxUwzX7+Xnq4XINcEiWn9XC16z2sjPdGx1HEHqzujO
IOz7vDyS2IOk/cc8sOKpyCCtZAulK8IFjYA46zv6RuUP6JlucZIBO+Av2ueP
+rPlarOz1X4Ko+hNmzER/awbR8d9KeOVplyN/3kCE9BM8GpBkXQczjKifTLa
q48/otO3GD2v9k2gy0CmdMTz0p3u45EoaRUB0K+ey8jNYVXm1F8hfVlx90AH
0tDsLD0okmxX/iTlA3iQikedCHOcotPsOpr8A2L8HdfUz3XVfUA1Y7tzBba1
Fa4SX4x/LfeNFef1imckHJ1n8KlaDzlwESnZ0vVr3fIRNM2nUn5eoGnP940e
H3Wfmu345aWxVKTuhHO7nd3/0Sy9ASEl3rR06+/iklK6AqeSTtZzP3nwhnCy
xd5+dFweANFPhPap+SbGIxEvaqsyhtFxRnBsMAATwY4rztyNZecWD6x+b63b
M261n2UDUv4bB2aSN+wvtKPyJagr9W28pAjR1u+NINHna9GgVvdsHV+hWlDt
+fFMTTXwIF5PnWS1HU/SSC8L3O/o86D7Ebt6iPz83kPkh/TKH83SvfYpu421
ITKO2gd9vJE2a8A9um5Vj8B+ZFoQZ7N76/u2Yv1iEC15PysPVxrSI0Ld2eNC
XnHN7RMsNDSCvp/gMNHl3kJZ6O9XGhAxnCi47H3f7hjS293UF8fveCReGzLd
zb18PIedQiPH5PZTd8++DzH4fOypWAqNq3niQY+jGFZF+Z+GVW7HliufPz4p
sJeZ+qKed8YFrOIjNkH2Hmr7T59npmkA2xGsSb0nrJpn0nZNjurH+knajL6m
FZnsp+J3TBg1J/fkNt94qO8ZJvo0xnf9R4LWhkLC1u4p/SJxqlFZ86KV/S8e
wkMGvk/1db3IK60cirHUjo+O3/GjMsFCEVjfuDmfUpxSmDZcx/fzfMnI0Nj3
t/9AYG8FYkc+0KzxrHhsQXwZbmHp8IhPM5A743Oct45bsuAWrMWF20EgZvJx
xczImL2OHwGAR0iC38Go45P3BjUEFfD0+SXgmBy5G1ftU2AvUCfYBdrohbPS
XFuviFEwQ6vvsz7w65ihciodv0CCNsK4Vmkk1fmNw03NtER9kldfp9FLmGFG
ck/xaoF0n9S9M2J9NbeCJ7jP3G0F9VY4HDP2Pc5BAdTN0rsQh6BAac6c5Hd+
lFF9W8p8uhQdT58oRZD3us+fMTr6qVtVvFEFu4nNHCFGAp9V/HXvQeqxuvV7
MnXZYlKHabr3e2IxYbh0v6n6VX/3ovtJ1XrHna99VpxZ8JUWQSgkFR+YdtYr
Aju/9+pTa7+5rC9qKz4UJr4erY5xYFhb3Z8X02cMo+wvfJF58CTnC7+0p6NQ
cao0CANg3ySpKz5Tb+PMrYjiVPxKn+p8lRG3fg+zWacpt6Uz2MdnP7iOLBN0
wTtOjlRPVrOnfDESj2btBvQyC7cDlnVyBP5svQE0HlfH6cfaRlYUu/7F4Ttp
rNzKu7qfxBVHlMdOyXqvMwAsakezffVuXScNWxlFRKmv1fdfm1N3OmIPyEYV
B2PMEJw+yXx+cb7vcPi3L6evR1W8BwYYBfrVxwcUZfBulS++Q0jo2wyqVf0x
vnmLftalIUJe5VRX7hWPGwPjriRT37mDLfS1Rd3jI7zquZMJgpCSE2ePOyoO
OWbavb/A7llxGuSffWWLrXvts2fsYGjyMU9GB70qHuCbzJY/YfHozxRruoQA
r/Cz9btwHCiTbFE3Gr+4itweQ1d1L59E8WnihNegKpl9fg7YNjA2XEfxTE88
rysIq1RhxTMCvAHdmRwWItBW188CBQYU59nIoM4TpH2M0x4wgqPug1mSrni4
mq0DDwHJxsUg55YC1LoKzOxmRMQlur8Vp93EgQs65Si+MAejyNxhjtqja/1B
P8RcYwyfdOwXVxid+cIyufrGTwTvTZOMgODWx59uUBSnCDoVz4LjZgbvdGGv
sBAqTpw9QhSk837388QkZcyS3mLxyrVmyJdZISi2zz7/jDzvmz/aAup6nGYj
1/4Kgq3V8deBM55az9HPxVdiweM1h1ZY99m4DUb2UymQsdjq/LqBrzv5QJ/q
+3PFODDvWvwE+njDP9yIqF7s/T2y3Uhba2mgl/4DOwLtdIsYA8TymxPnG6jN
oXlTvmOksU119OfDyL/qfmrFzojWgENeV70nVhPqsorEQKUqHrDpqxGz0Na+
ceMefRvYYTaNT8dJV7E2I2/29PtwxyYx+jTHaB2YxI0JlqSXd2/HPfqZusPu
O/rvEisPm+ZAPlxnx+PUJ90JUrneB2z+EeC46XjNK5mgPOFOcNPTxq7rfF6N
TGMKxhXffB6q99RuR6i8w7XveODk+kg0e+s8rGKJatOXi3pnn0e/fcaTFkPm
uH7xTOiOiNuV3rKBVyZN7l6Y0HX8Hrth8Fgo6OpLJM7rTMWReXf93d2SEu/u
OwpDq+IzFZjvDBO97nPED3cWBYQY9tLJt/SEJfVZrPa3fdzx09uMRM9p7Vvf
iV/hMppKbKvqOKDxGHhnuBlnnorrg4BcR87zOfr4M6ZIgNTGPlVfmP9taZ7F
57z8DsRXlNKjeH2dv3ia4VF/CyGw7sMRdQm9wHjWVz55xHQedFbByKuj4uT9
tD5HoEpVB8V3UIHIJwrOup4LymhmRBbz9bueEXknHDsqXaUzGUVH7Sb1roH4
t69yBjO5gbbEc/f3fE+qfNgrd9oP/b6dhnp8LilJn50vQcP7GPnVYNnX+nO8
LshEqbXMz6fuv7YxyEocMbfS+7Im447HTYbqb+13qeskwsRn4Ea3jj8YuyGa
Uryr35Wc+UIMij5tv+fGVoaHRgbr7LqM0CdQ2Bm48yhcAbdXXUno0s8/fH5/
F27M0JtxvC5jH09t8B6vm/NZvJIoFIUIoQlB37d+L11xjT3k0TS5Kw7hEjWY
8+WedTyc5i34HfybipO6i1o9lefCP9gq34zM4C/JWsf5H4CIwyCVn86ZyyBd
eBOU34tvrmkbUeikeszp744/EdeKB7MhesXVj6ADst7n6ftJeBX8L6gsveuK
U71C9R9hXu59nkWaHhEFqPaufQHVYY/3MxCNTbXiUBHazGlCzlrHqCfj7uJW
ZdPaOm65TkIJAVT7HaJh+I+oX+SDV8VP9kHJ96J7d1TcPhFjcwtNzUek6xr9
R0Yexl11fv2KO4LpmZ9XPQ6syPfQOM7cptYHxGyfOgtXu2H9XpPxGRsfWIHW
yRcHal0EUi/56Xe9RaDdYrlyZ9urfFsrbmLpyi2SxFWcnbK51Xbk+dTvjZxd
lFUou1e/XVmxxdjEB8Vx7uq4BSs0Hh3Du35XGpxnFJKg9Pu55F2i2w5duvf+
9areaCyh0+GIdpy43IgTJoXso+MQznvEHGLh8Y3zrkFppwp+XIUzpw0F1Aca
jhV/9XPnDAUfElzlWfM1Suzq5NsT489e+1cIAIigZiFkMes8xoYjkxweKP0+
6wDo7Oms6kiOPp6rbcR3V/A/dX4bL49ERWRUWL7xuGSl3eXFvmsdHqR04DjN
++QvfXxUfuCAfK+lS4PrehLwHbHXeIoPJa7ZgVV6BX7e8SduMBwzcLOrTgdU
IiFHwFlKWfkwQI+7kwbyXMXvDs9ty3BSh/0sHHt4ziim0CQ70eKn4yMk7z08
4rHvHfcE3Gm4ic4fAnSIoai99O5+i4H9HRHTES59f3e+EvkTRdJ8ahV35fHU
hFbcal/2JoSIK28HMav7QD8diDJMjPZ5V0gyhzUmBRTc9zq/AQZeEy7o9qtn
R3ztvR/22MbVa2n5du/8Mz3Pjr+8IIy5aAyNjsc28TWWoyBV8WsLdSWzuNV1
q8YQxJ9up41w9PHIQvOF+JLk7fgdQrzZ/xV26jcew3JJqOH+Xr4SacRyONdE
jA1Ux++8B6R/lH2Vp3E8MisKltpGW9cZuVALFhzuLL2yKNzZmJm/GFvV/Yza
isGmyQnk9NbxVCRkhrXx6v08g7OM3Hjie1+PPzuyOwcmdXX8Rl04wuufve+k
PRmfPLjy7sNHk4FUglR7BKL/i9+pAkCaW99ePFu47xGBtOqI70aV6tey189x
7BHePsmHzK3mLIkbwF+xd169H524j4RRDJB+uNnzFVHCxoy807733z1PtUvM
c6Pk/ovP5CAscw0QOw6BZYDsorpvaYEI/ScN9PbtFSf3C8z+tr76egjqvYK/
xnRn/16AKmLAxAz3muth0mG/eUujnX319QeZoC2aV6/6n3YXaBQsF0rxlafp
pUf6yaBCz/EXv15iirt5d/17WjLvAGdNmbfqe7sCbXsQigg4n7/4CqHnjn1F
3zeuLTYcOogM4eq9AoFlsfmyDe9aD9Fx1ksCGq9LV8WZV/oLksyzcNq8PLTH
3DJFbc0fnTN2XZ+lA7OtdBt0GbWNVVrsan7fi6Y/MMkewcHV91NfQmci+hVn
zyNoPPCYvQJ8nEd/j4Gx0xrY46676jqTt5O21CmbW98fFlK4X7CYtqSz4zAy
1rHQVn/HQ0nCZ/rEr9KXtqe8wh7KcgO1ek9ktvB21ocIpnT8cx7TzIvSQc+h
oq9tq0qxe3ZdqSMTAyukm/HbT6U98a5AZQQEqfsAoTFSblF72PvvJsPfYqqA
ld3rMz2ySB9c0firfIyki8o360DYTG88/MFIcZlL7H09JmgMCN25ON738WcU
9+OcgHc4K86ShOfV6x5R6y3SdDTW2dxpdn+fizENcDWm/hOhm45DzqwIXx6j
8B7JkEnd0UYJUK3jqaZQYBT15V9wRqxcyhWxINSijiNGe3k4khbeAFNPo86G
p5tT/M3z9QTQ2rOxarx840SFQMwt7GnxVTw22fHxPLZf3jij3B/QtAW2+PKw
nIDFtu3Ydtb7M9O0wZGCuJc/VpxWeohiyuPyT88oW3f5BUSdhXs8Yzog1QZy
uFavV2YioexqClH4quvJRnW+OGFD/roP1itVzHoFAWrdnrGH0oA4V2glFUdk
PXFSMYSoTFccDkbhSmGnffrENYXgZNLGqz72zFiANgn5mdX9Z1syVgEKIf/w
f/EVKX8WV//mnhOGPWkIRTQYoYqP1DUjnm3H2c/9GvtrWfEEXr338ZE7gpdD
Piv8Gy8P24EdCWyw51Dot9CFRGonibJ6vuapXu8tC87d74/84AgOcE/H/eg4
N+WNxg+cfvWTY0uqXXcnCen+3syU66U48hCtvJeGj86/PWqilK2Oe9FhD3Gn
S+/ljDmTDP82nL/LVzTDOz+Vkpw8verijEABpqLwfRR/IV14d+IVU3m2/r0h
8yMnersaN5K46Y3/tOj38+Ltcx+vnkyMDjt+xCCUly2AUf3dh1ACgZj1An5m
x0F2vaKTk0o/d6hiHLbze13f60QDvfeYxI2sB9/38woswSa5xZ+87ide2BFq
v97HLD0ixtGZ2RxJQiUEFV8Z4VBHP6LG1HH1lH0HrG+r+hRuEp8tEqK7qqLi
EHqYrEfek5oDEieJJao2bfq437gCQIOQ+sZoXfozYs1uPMVKt3DveMy25Ht4
DZUXXefX8d5/uajnF3/CFhxRfq3viAwJ7b2UHLHxq/j10gUuMK6j9wtNYE2n
cPvvX94Yvy1UF5S0aMFXPBQ/6QXkWuf58S8nC7mii1s6eKe06vPIPCqQmKPv
v3IPdlK3XSe0zgMyttvBvO0gtR2HZYvkjg7+7PO8fCRiNbTmal+IDPhOmWyn
n1m6ZNQuJzTfrqcD/N3nv/mhryM91Ofo+7Pkr2RouduM0nE9IcQiL/C5zCOq
mBVHdYmgBb+kp9/PFSYKW6FI3lU9AjbFEi7z4qf5GtAVJiSZUT8x+am4AoKC
yisR1+9VXh4vBI2H9sMiGEypA0ZZ+7P7aRfgIzWQPcoavQ5f6mUjOS0VLeHV
cfO59e7P4/qdB8UpV/ow1Xz6PD7+EVnQz85Q+qvc3a+YTXA5MS84Ko6sLk3X
7tqKpyn95tYJueMulS5EmMjGcZ5/MKNbxe+4RHB9zkrwXWe0n19xY/Kln83y
rvgCN4A/T9VX7xW56YxxgtK/CicWnUFpCVDKoZ1dcaN9aOYZM5zCMZ5AOzNV
/5dD1fGV3JRH9ws5rPgnDTDD0IsPEqfjzxMIXTopxRd+1YtSDRlu7+ULf6Z6
Bu2AyVh7+XSc76/l5iAbW91vkQHgvWrGXn5DPZdT+U7ulgfpVnjdYEhSJpod
/vjd4sQinhT+Wvff90cD41M02X9BeorPIv74WJSbN02cuk4t+GX4P3FpRz9f
KO90eXjeYMz8iz9pvaF+9LxgRb/7DH0rBnC/40esq4/IUhdPH4Rrvn6UGKuj
5wVk5O36nMsC8KrrvxT1K/sDg7y+/tTIEFw8nNbo9xw0//CXdyZrxa8/17uA
knM4/+MQFoIrCbuXYVw4RvEV/Ercd7iXVPxKp+i+I4La9QjDIlQuFrxq235P
uM2h4l5Ur6+ez3pUkBcIY6iT1T8EDkHG/9xtXKzZ7/N6OxZ7eGGNb48VQdQJ
Y9urJP3GbbmZ3vm6jsaPZbp1GZlr0u9dF9gWCSrFO+7z5KoPw2FEYawsZBj2
O4/JGtD6shn2epWXzJgJzyOa1RV/4n5qHhLduTpPzKJGSk0Wh9X3UNWolyiz
QslWPUURcu4ZpNv0es61gqJL83gFtV7vISAv2CT+H7zQ9zzBsmbADkE5e45D
uC5clJDHIS4r/raCjyzso/Fpd8wjPt8nGRR+en3+CL0AU2w09Cr/QYE2/wuN
Qc3ZfxdA8ohD4sEyt86jp2LCnvbK2biXOzImsrgjCll9/dK9AFX8hdlzHFqb
nNDZ4N0/fchT5wf/zTgx3LzV8fQFCEns//Ioqsb0uCL4RmK9ridDXK1z6/8o
f/NPXCecUqaPxiz1G/eQIldDY6D5TdEwOwOkgLl7ut/OWlXvZuQNbf8XLXzL
Wy6JKFG9/7wLrgxpA4GeZ/9dJoVb4F1rn+V/qh3iu7p0Dl1Q/16CClpe2LZo
bXUeRRNLeGmasvL5xXl58UyIQlxdf/TdhJ+QGAp/db+icldy8XQQOx6rFL4e
9p7Rf3d5sIGtQR8e/Xc/4ViXXsEwn32eOI+99ookEfaO88AcEaLd1u891BAJ
bGcLMKnWtzssmQCu+d0Xf403kApybdn0re4dj0Hd/SKGeo52zxeyEsXW1Xyl
QAjJxmu3BRPc10NGVCXkD8zOf+6YYwIHmU+O0hMTl6ndETPmlFZ/N3ZL1rBY
4DVugezKrUSVbwf/WHFk7LRFtmjR9nleN7boPbMLqPcNx9PTjdAADkzFdT2O
I2NqY4c6P0ABg3PtSdnN0/EAldjYWN/6Om0YLFs+yxnuXq9jFm5d3BUl7J7v
3/drmQ2sNQLsqzjJF5Ze66U71nm0wWkKX6/ladUFicNNbUFXXDUfvCMyQPdA
43iU7spp3Xy4snHku/49RykguhjTaWZ+v+Nfqabw1rfS7cc0xDnnwKNJ0Pir
5EJxPUf3hLar+IrzlzZJMNx9vGnEFtpWPI/q70YjzscEBjcbrw5bSA8tyoL3
Kn4cTOUVfOAOnzwbD8ldefDf1RZVZI6KR30TjzXfQM07Up3zqQJXMovt+GEm
Fi/xFZvViht2AzmGmNbf43OEx4cUHgvLqitfXy3s8a+UyNPxg3xZhu2kJ9Yv
vrhNwb5AzZ0VB+7XBTBP+/UzLSUxbzGroKZWx48QUGbMgSle1PVQGKWYuAIe
Lh0YvUzsxqCu8SfOjpMQOjU2JGZ75f86t5bPmM09rQdI/gIi4rOQK6bO3/Ub
ar55EZnU0nnGNsaXHBJOM9HZ8YOYMw1H+h/lvyxuZ9i+pNGn+u20yC7NZO8i
pMvR8TOMFcx7ROs+P/GR+Nnt0fro85OTjUO9XlD3sdMKda7oOspHKk4KH6NL
78+uUXE/69UNfnFSFQ/ojmpYjDAqf6b4Y8EbXgVmM3Wdn8cS+3E4a5Jjdf5o
y2B7mTHq51VcZz6mcBhTjc9BTtOo3Qg8Rumw4oTGlIqWPw2jit8h0Hpf3Id/
cUxuPQvc78aRMiMxZYoE30Xk9Bu/zNjR9OWVT+l3kTM8fHQ6hAP2vuPjyG2m
ZaOfU7+LDHKwOeu1Ta7nkm/ChqFdfZc+OcDvFsFpdYEG9ey4PpKedATGK78K
+Nmo5bMg0Dno9xPt40GXlw4cxSc9ybtFnw1AC/+mjo+R85U3P3oGv7jc5Uk/
n5ZBx1nGfFKfbyFfdXdU+YLg3t6GSN1nlOWRDrmfsI++HsPHyEbQY5/9PgNN
pa0Srau7fxeqcyYk7IslhRXXyLCCcjjbft/p/Q7CU3JGrKvitoYIlFyRqajr
jDv9Ew22KCnUdSrdVIVG7OcP76caUZs+kX69Rn/v4Pl2eaSTh+x/x2Pa9X6t
6/e9PNnvtaRJnvzez6i+orC6ac0fJ3cG3qi3rXEwqo8kHqkLMB+ztNVxtHpS
klprv3XVGr9H5gEFtfxexcOzpfGnR1z5AASaj+J45WmLTxpvuMipRaRwnr+4
JqcthFHX8YtDQUHdZ5h2FR5yvqqlFmYiKKP67ZEFRTa8iahHIbvjynMI2xmI
4lPxl0CAGnqG215xqDQ6jXGxKr1KZlVRZQKTBRs5+vzwdTI3KrGtc55jIrEK
20ecqY43TOIyfEYX9Onf6/s5yGHcLPBqn4WJIHFmkAMxcJ6z4wTpbiy2lQ5f
xZGv6djHUG3f6vcCPtLRACKwbd4dR7PzlfqM9r3OD1fG89MXIEPZO47IMiIW
pKYeFU9T8oov03pKFyVxY7L5OrGtfi5yyzgmvP236+k4XOD1ikLAXlb8zhJv
tKT9POo8Qd5FuJC2f/UT7EIHv0JAVmvE0XHoISxft3WU74/4Jxl6sgqH5POL
A7Xv9ED2iElUnFctqA390uvp525Fjx8QHkH7UyPOEsE54mkcOeOKH9Fm3Y1Q
tZ7qd8W7AZT5ihTGrPdEC4C+ium4nK3Pg2aC8Rqhlfn7u/EVZp/8irbW/QRv
GJGVvSONXPfnNaihEOivF/7Qaq0UWcG3QKGvjkNRmB1qZ1dfHUmN/TSYKRxT
8Xl5pqPYU+PSSt1m3Tey9hbOzCVW4c+pioarhxqQ9Kp+r2FeRA2hNtsPMfH0
teVMs3UDXsIZOgwFQ63o2XFoem1ylhFXv7efNx5OaDA7wOOv6zcWzJBfu+cq
XxhJptwc6sPidI3VcVQBmGO+GffveLNUTUK74Fb8fY3iOK9+0knW0GvU/ZSD
BPSrFOh9J2xJPFAfPW+Cu96TxwjEZkvnCjKo4/AoAUck+R4dhy+xIxlQFm5T
lrbFvjWYFEbbHY9q8jAlgoDrv3tn8PYwNLV6/M7zhNunWOcC8H3ue+QNjD3i
TtHrkjhlZVMc1Khat/eIbN+BopI/qe86Qm42MN1zMLKOw/6RBiaMjuPa8bji
mep+7tH69kVnurkp6iEyzupvREV+UYFMW2iVXpB4OpkaDqHvjor7oSOgVA2O
p4+PI+QjI6UPX+vYHpQnvbPMra7+u/AeI6wbK/0add929bvTxD+u38/4xlnb
aIKv7ejrISKpiQTMu12lFy0uTY4s0WXnrvu2m7LMtwmUyrPi98pdsxzYluv8
hzrZfGEFzvzUdWKRxlNBAftUHcTUftKPjYyf0Wr9Xn3AC/eDLPhTc2ek9EW+
A+Qrj7/ek4iLXbEd9r/6/CNivmYaquDSl8bI9XUBcT3zp7cASUD9BZJ/JrO+
O35m+3p45zy9X+zERqLJzqXjqL6Z+BO1lOsV/t3r+k8NpDOXGBG9VfEnn2Mk
5gCK6vwzw6FQSAih9vM1NZ/R/zEkL78qHfYtije2NYP7+l3TNO7zTG7NEOO9
b9zHuQcGi8qz1b5pBeMGbYJhUZ51ncF72P2Dzyl+a8B/j2vZo1lW8wi8d5va
ySI98vPjF3+2+G6jBVe9BnMC3PnZA2EtR/FQxM/ndVeMdXlfj/TDEsehhVlg
/S76EmHQxoHwuft4YHuwI5nBKNz7jNkQGU5pztb6MzMETU7lWjcEFuo6ocFA
4lakTe+rfhdwzMU+5cHBL96Bag8B3WzBQnH3c3moHWFgxKrgqvPDSceLWlVF
QGlVnB73EQq/EqnWw8+yRlVkzxA/SkUVTyOZhcATBYj5Lx5tMpbCyHMVNwka
IQsQjP3ic7inmAGvPGO+x3X+PQz4UPMwc751QeKPppd9cDTPbtIGzpK7ZSxd
8y/xFUenAU8LblpxCfVnfZwBG5YuvXj8YgkfyfQrX4WEiFYpgM7Wel/ziPdT
XhXqWIXrQBeVFkUuE/y2f6899OYYAFm8df3iW8nsDR6VuXUdrzPDokMDRGJX
x3MdJOWpL/dQ9uw491B7yaUbVvujptn9ROkc2rB0HsTBd2H6ZRL9vaAbR2pp
RKOz8xnxe8WIO+4Iv+tkaIF2w4Zqqzl4nA6pPyAzWc76vUIHV6JEdfnuPFZ8
mroSOIOrr+tJuvWpGVgO/3AUQZ8QVoxLdZgnFb/iPKUMk/E8fbynYlZGjXEv
3qvKcAdD3bK7H9XXSjwp6BnA39XXQ38HBwCknkpP3QdM643Cc1RYe904YtOW
ki0ZQX93hiKHBStwpNKNpDwCXArJqNF/9Hl8qRTzVqBBpQ8w41+bRH6GhFH1
1MHz60mH47LdzrvjvvVDWXL85lyU69kBjMzI6d7XfUPe3KA9o65WuCCQ02Wk
/US38C7cESpyUgvvOq7B2XF957VeRYSndITs4QuQLjoo+g91P7VtbALL+/WU
/xFuH783zYPbPK7fnyvMqSu6WdtTevVMC5CP3BrwqM5njvgpM4NT6d41RxZf
qdw3Xcp96/tDvk+paYoXT/aKx/n9tYR46JxVnFZ5tPP4Huz9/sfvck/7gOBC
32cDVAPSA/50db2v0YIPBv/y5Juv+BFtaEwKQv/VrwCFIPFj04t5dV0PbgXJ
Tmo1+OZ3x4k2gECM+KXU/cGviV6upui99+/VCoEStxl5szqOBisns3ARmqk4
vcQjkllQR7X/Hr4qmpEj4qaFi5hoamf6e1c04v7FUbmTWWAm9fN9MjKJewWB
uP69xKPlV7G9HKPvc2gfI8o/B/XTPg/4gBZKJh9zjV88PCMsbFtxH//QSJs0
5dlh9n0g/xDA7CsDUPsgZqBWILD5iPJIx1+eYHBPT/dD4gmioWJPALdZFb9f
YtjG1MNEtuMQE7sG7gZfVvGdBhvlQITVs/R5EAx1tfe4gWs69/Ga2ivy/8fR
OqJToysUe4p4hlVbxdO75SHkP2q+KX6nF0mJm99W/V4wYU0b2Io5C1cz3/E4
I0bt+9HvG4vQA0Y48NOn+O9JsenO0IrVU631c/gUrnjM3xm9jV88ZOcrkOPy
3Z4vWBCL78BQ2kbHYUOwCXSazq7jskxpSGu8P61/K37EqIE6WSZIFYfdxlU+
o/tR311wz7s/YF9TTFTcWPwhu+a3r34u6XIxZlbZz39/Nw0jnPAFjDDPf/EV
xNr1GklXHO5FoTKprW19n0fMWp4oE4y784rYk54jjHtmArXOuMNenM9fPcIT
rd+rHskUYWYMNTqu8XFEs/uKQUnH040+grTouYnLMD7G0n0CE786Hpr2jnFi
M6nfBVqnjXMyoN07D4xR0EyKdkVWs4+P8gPB6Lio9+8CWpC04gv/ywei1kpb
VrPcC1DvG6OXzHuCKak52ou54l4X9ctR+mm6UPHxGr5qvdTVcY/8vRvMJeo+
xBPpU5ilQYMaU3EZEV0waLSeE0FsegRazzOIubr/2pWodtHdovtS8QPW31pL
2KHzzGhTkwXVREEC3jpORh3sSLui173MpAZnW6l463vMVyAb1+oVcqp+4Ih3
1ZXKAia+1zcoW5sFYFwM3SsedRxvEauHrqdAZwJP3k1Vzru/d0uvMst6AHc6
O85nFPRR12vv98GytkLWlBn3fjriiKpsgia8yu8DvcPwLBDZQIL7PJJPLYjt
lbv+xZ94A+h2Rvim4k+gS3vgpVfnRQTsnCvyz6P12cQlkndwsDalp+L0fFc0
DhXk9dwDqoOk02b+bJxVF5D6Cy5OqmODuzp+xxpeS41MUv9d9JQZzOsdR4dv
fI8FLf5TqLLVxz7jpXuGqoccuXVcm4GvxsjOUOvkGaHTMEw/v6n9aBKneuNF
UgKvOg+BBDgHWT37qD4eRXdHchxAcrWOISfjqREZwKGu7zoCJ3MDuJEtl3/o
jJLAtdJtUwrUOoMX+fnDoMOq76vqiDNFspTG97Fm/94oy5Ji0Jhb5a8xw6In
tbqAdO7Sy0KMgF6FeaLoULhHzT7IE2y08HHP+l0qIOjYmP3Odf3ihrwaSHcQ
nN/vKJ7enOlcmL2mjjd6R77R0ARSrr+r0Xt8dQUxfo5f3DakkLEL70/HYYut
imBQpUMys4ahaRDCPn/9ujOiN8QoADDaV046vXCA4tmSqqriAZpM2szAL9WP
DZQPZ2W8dPCnz8OfOhaQaXDdfZ6Qi70j6dX3d+Ezt1QO8J2r6xqA8kBooFiO
9j+a8dQiZSaBMUbt4yUKwBiw+ZSIK05TMyp7QCPn73giyFpUfnb7eKYkRh+P
5w+y9dVxgnZ4DFKk0vtFC9viwYZkndlBx0HfpLxggKVrNwPcHLEAobxeOKUZ
8e4Ive2w47/vCMQY0Yp6TjArFdctIx8bUkjpewMGfFaCsLbfDnEdr9+l3Dc1
BJ2r4x85SEzPqCj8O55VjdYNiu7V/ROszZ1kLpa+XbWeSwSCA6t9cfFPx00B
8f4C5u3v2qxAOUPrSEnR59fze2LebubSv0sJjgklg+OM+z1PBs87YZQH/GJV
v/0Tv6JCRY8RDXirONfSaPsFML/38TByGEtxzjxr39c7/dwiXYVLolX5lcGG
XsAWUdCr+wx6KV8fQMZ8PQ+dr3veNePrPQuvJT6wUYn0mDKvjmtHf548nDYC
4VFx3TRQQjAvz7rj4OiR1U+Z138X6ItTsP2wdVNn0Io6B6TWpIj1u+j7SH6I
z0FL1vkp2JvYaoyO1i96i+7oMoDRH+UnLg4CZOBhk+95t1+uiwFlkezl6Xg+
HyyUg2hgHU+pDsJXjo5Nc3T8eX0V40u49f08X19GQmYZY66OP+6WrwzzvtbD
LOgGTlvAIbP2tWAKrnihbdFeqOvRuUcD1DLV16n3KqSR2BoQ7d77/VQpvoAC
RkRXP5eZBTJrg8Kw35NMsQj2QAK230TiCwU7pJlf/5ZvYywvTZLGKP06QyC4
Gl0Ck/6uj+JRcFuYidI0T3ZGusa74C2divaK407poOob/ObgmQrG65X2Rvt6
i2sScagLOqHWGVWCehuJBFSg70MQKUkGsBHn3n8XTHrLEMz9W/27tGACY9qS
Jnb8yaUSUpmr/baUNBs8GO37DHnq7+qCxZiOscr5Wx98+nGh1Ui6y+8p8Pgz
a8+Rm9T3P/NXZJxMwHoeOu+ol05lIUxMXz8ZfjKhyPsGAPV37zT1zDK5VpXu
R0plQ4Goo9pZt47L7rdQQQyI6/fSVqKwqAlGiLCuh3WVPM/dIyzbx+sueUdh
vzShO36lk3rGmecaHSco4yJRK0bhctOsN2vXyqbgX/tpYNRQrAzw7r3ngFdK
nTsKVyYhdf2gncigJth6Q0cfL9ddAXNiBqz+uxfIBMsh2+Co67/MRuMMZdZ7
l87zzEBPRkONnLXH9YsfealvichRdVOSKoqMviT6qX38k6IpKopQlN/3KgID
6C/EBNhrbx1PXx07yX7Vv5daTPT9Y6Bc/KCZnusIrWLkY6v7AJh5J9VRQ5aO
li+c1VlglxbR2kdo+VCdDoTDt9fXqZ63As1XZmN0fEZhUdc9K+U3znLZfY/N
0ixdHQOxPXMOn0WarBVf+RyJESEPXetfHMtG/wCysM9DEx5USKftKr/ILGOX
Dir87SeR7ec7iAcN+leLi14/lzdlAcE1OCt8vvgkOOFyV8QAOk6c89nCtJ7l
n2stUdT4PMxhGy90xdYv2nNm3vvs450K8hl/dvvdZ4RCu9Hnc4JVqvXwAkA4
ORpw3/Z6VFy3kZKMvvRW/ndENrHVdZZUc72vGfL5ZDCzkH6rb3AxmtUTnMAX
n9ehzn+ZyrytWJzcqr8uvQeoM/VuCKEVp0FuOBKllvsXjxKjpJLw5VP5ACrL
CLMHrGHreQe+LXlkdH+PtK9HlhNy/BbFjlpvLfMvukWWgPhWcf03Pdn0Fvfa
j8BHvWmfr2mPJ0Hd/yei/beGCYXXo87zEJGOUqZZzu++ARwrSFQdkRB74ytK
ZcyAuHmtzj/9HkDD4GJA5GbFI6cGrxLVjr3PMwsgM6I5cFU8fi4PFzoLX33X
7q6/ykIOeryP16JLWxdeBjW84nTtRuT0booUZ8Wja0BqBnazdPbEscHCdfCf
lcfKz6LipJtE8L3jWHbx0QMd7P3C6oh1GrG0EGAqji5MAuVeMTPp83CS8qKr
W7fG9S2sHgkoFKt0be+4AaD5DEmuUfWmss8sLopZxqV9HsoBDzwDXffCP8dP
YrPl3LeNZtZ6pa1qNhVDAbru9Xf9SngebXplaB8fuekzbiUE4CpuaOUHYcif
/+6nqb9O+SCqtHpOhH4i+/ncDrDFrlu5Op1RONBCVit1nDwDg0rQo8KHY3xj
lQf1eIP79fnhWHS+gbSVBhW/qb7G3OOhmLl3HG6TYR57nq3fN3SKqHvDoTd/
FsRAWxfnAB2ucaRWeTPR/cmEYe/rl7iZw1ESun/1frrpgMnW+HRpKo7hqlnN
ZA/qo+J8QY5wv0JHf37xz7UDdahft/67pFOcFxQjzhkdX8yy76ilrV43qCl9
HphNM9bf/V5Zl2KZdsXnseZKlrHMhjnVs8zbOr6nsIm+6NM4QCAo3MpwOAnW
1XUillwgOnANn3yjrofpjP2aHCHO3tVxartxFWStU9d5h+2mL/G5cXv7a3/i
sXGxlVBKPqp+jH7NiGIWAZ3ih0ZF43MTYrlEr7f6bG4n2xCoA52UrY9HoLc2
q7yv7vcSRVXuxdxHn3hU/Ij64KXDh9vTxx8xBEuaGKT8N57JO5CD5u7qvn02
aYrfFGuABo6K66BE65CKRPlwSdul0zpnktbSd/ICfl4PfkxXlIoqr7ujfByu
CbBA6SZNKvlOi/4RBF/93Qj+xSoLZaDXh7h7KVm1aMgC7hX/fD3v1q8Y7b6W
odoVaRqzZfVix2OkpIUC8dnPPUm723zmLa39mkcSUDBnhogf1/UDJHp+e/y8
iucobni/VHg8QfY+z/nqZUdK14rScf5PGxU2r+nZ5/eq7CEZvd5gFQ+Kh+IO
7bbf+a8o01JI2+MZVr8rRs4zxoczMI6KA1bcQUABpPb9jOY6OTA4nOY9TZww
jW2CU9qUtX+Rf9Q70HMa6bdVHBUnTUfIl/LJpUCHzrin3Uhwqt5PIvXBiLmx
6+z3JLzFLUTx2H7X3/2stvHYDPu4/Ygt2WYFHj6jqe4/2COedCkBV47Gn0Qs
MYrO7//1/XxW2sLPy2Eun2vxgwJK3BEi01PxJxIYMZ2XW98djyukJkHMVH7H
k2Yw7huRm/3FTfb3t546y+8DVSsinK+NHmWojgcJdvAWij9qxd8/vUMXEC27
Ov5gGMskL/Co7/18UNMfX96KgNgvPnBBP4/wyTOuesRs58t3lqz29/5EAfvS
XtUoX/XdyYYwGhdJVYODun5DZY9yxfy858Xkicwr45NM57J+12drMpvaX+Ps
0oExZCTXsxvCx2ywzjNQ8KCEtdau0mdGqskXYT5P7afyq8d2zQ/dKD1aKhVP
ByCthxn97G8832cGmRSCrr4/Z+ZfWpG4t40LiqgcUaLIN+6lTyLuxZ+8sqJY
Wc9rxoTD/VeSd/7/5GOG18nt/j0XKE/GsDnXalz6k8khLwtj2FG6+p+4mZXT
qzuf33t1QXpqIdF8v0q3AaMAXtN0VoExat9XmBLO19EEJu33DSTNfFdfxQRo
q/gdXYjP22LP6j4JqDv56hFBCYLbHX/iVngHYVB+WNozSU5A0wwh6/uNJlPk
6tXqd/nfYb8Fwhc59u1qnCpkM8Fyb1wM9o6Ofy4UYc9rcpT/izYPO8iQEy/K
znV8imLW1Z8/BDnRcXt7HGP0thqvFY2XIEipYq7S65hB7bxU1cAzKx+Llqxt
18zeXLjeTz4KG92BdDqPmoNQ2rLaqpmUPf18nxEBArBuyID+fiNnTUD6eoKT
qvv5IDfOWP6gtc0+/gk22TbIALuf+5MGGcmJBfn+nUOFvAkfs4d8z3Wn4lS3
iXWEDDK+72fgQ3zi9O0DMuvjKdZvCiyE0+Ipp532ihxHp7rw6sHEpkuCV3KT
+684t7Rg4uIe1/HgLPfMF55YJFQ8ErJwzvub31Vc5jivAKsio9BxYkkzS5Vl
b//GvZQxBtQYRWyo+KB6Aor6RBq/j5crrldl+7PgzLo/JHUDgVh5bN998FKJ
49mScCWwstV9OGQUQaJh9V9bHW8stgE3WbxVWhX3ctKp9FJ/FqI+HhULISDi
c4UTQAhCl7G6mcfVey5+x5Ts3oKy6ucLADGCuOBMch99vCpixrHax3fX8Wds
Va/X99YspuPrK0YNHVp9v8SfGIABSp73Lx5QJjYKNN3R92eiKUcLJyXVU88F
UmzF/CKv2Kr7YLKvLSlBjdZoxanz74Gr4DLvq+OGGjQjIMPm6PNIIwnNzGgt
9n2wY2Nu6QDJMPo86akYNRFmmmddp5YnqVlKum5FPZcVgWzwDlSV/ajfuyKJ
D5oTz9FfPJAF6k4xXLx+8WdGPWqxnDhWx0NZSSYZwZG6fjhgtEqDalqd9b1g
9VnuPGb7Y90HmQnsRqSE7qfvv+xm1796U6Sz/i6gdBpjpIo0QDv+hIKqoSS7
q+eiZqQncsVB5+77RnISeB/wRrvh6biCP4gzMOj+vVqYqpLxiko+5y8OqvdE
iWH8vouvFzRhHxOGvv4MTeNt5XWrevx6iUSPKl4aWv0EHR7IlzNtl7P5Edrn
xlVwpqg/19Zxe5aRio8AerrivDXsOc9rrHB03L+9BZ6wzn7PDSJwMs/0btoP
+opYZEaoe6DT37rj8pL5pRHNg6i9O468cMQ/FBKljwcPiKrgiB1QXY/ZLgv7
GeZo8ZvMIOjLpNlzhSlS8YXTe0SvKfCOb3yEHmT7MoKvPra4pP3NhXESn45H
B1/lhalY+8hOL50uT6qy9g0xjnjx2xvQ75h9HygLccUIRqz3TRDqr//lETmK
s89zh12qeb/h2dVzxBGICGVAhYWXu2IhNkJENistf5PL2r7SKNUmu6qejeN5
zC0hvSK1VXHL3g7/dmQsUdd/xqfcc3go4tx9nhnXvi3OuHf55cnxjOL4nelj
nWcfr/aMgJAeyt7PfWYAFbJ7VOI7ri51gz5rjDJ1dRx8hQ/PIonUz3HmcQEl
Rcaj389IehGUGefLNf7GPTH9fPNAraw63gAjOf24NJH7+UbBO/JSZxjgdd/C
Wl6RtSJA9u27cuxVYKCtM6osPAOuJE0o59vPUAY6brfcbPBMKc86f9gg4djQ
1eg8ZzeVvUFFV6C5tX76nccRDQVau8XrT5sLliGsT1Snus+3DZzqBSUMrbJv
nLFh5FH5ueuedtyAETb0IPhy1vmfDGCfsD3TJq642VN8Y+Or0+uPLkYsk1Rn
d+nAfOJ38GOAoZud5Pu7QDpQZD8P3+C8+t7iwHU7ISSjvW/9KA7hSyFee2VV
Pna8ymmsxVL1f/NeDcNgEo/I/K/9d/6HKAp3YZZT5Yua/3nAvymDyanfFY+1
w056w2R99fEXnwlwtC32QnV+XaUZEvEwUKj1H68qxWDEoGbNoRLP3nJFFL9w
ieaI0b6fEYdrvtJFsvq63pExcZOjzkNiiax7BqV2t4rzIUizl+Bn9UUzU6U6
FrgJa626Tk+bePkd3kDnP0e4WZ4LU4Bz9XMclPYiwb+rf+t7pEu1szajhUre
rq7H3BGYHOj4ab/1eJoj0nFWsctufTy20ApJV6ZS+aFnHqeOmDDsxdO84uvM
+jlE6N8+SzPPPgrraUz3O39wwNgT0aWrdY9P4ZLixLBj/o6nQACzGHn0xlFc
aWoA6kJvx5274sZo9Gesu+g83/gVWTZCmWeoxx0H6CTEaXx4lW4AkTITEqQB
ar93P8cryWU0NXEq+++qTfkCXNGhKRwCRIE+jCk4H4Pt/MUBEyhURGW09im9
Pfvo4UcD79Z9RneQ6KMVyrKPjqusI3uXiXSdXwNadp7hSOud/lV1Z0my6kgQ
QLfEJJD2v7GXx6kI7vto67bovFQmCCkGH7R0o1ZIU9W+2+t/Bi7KkBi2r+bm
uhWEC2kehHa/RselAcSUXj2/+p6IdCFA8tiTLnR8hsBtxkn+sOOUMk2MQ2Pr
fNiY7uBlTlZnNN71zmAkBHvuvHf55WkhhFnpVOJIXO+jZoRuBK7PshhXxXEC
ZPJX6qfV8SiDBkNtL3r6OiRu9THsiXfhVP/U7dF4aNabfFR88P/jGBNd06Ou
o09BaDMeq7Kkiq/X4PS3U5mcVB2hvn39Kam6MQmr+B6lO/Wjlktfxwa8ReQ2
pNjt/uKI1lpzBL77fhpaaF75qtRxr4qbX6T3p3VQeLPEMUFQuSIK0tfn9427
G/O16t/e8dwhTQ+Zvq7y73idO5JnbAHY1Tl4OvL3V8B0xSq84sQFfjtGRKow
+zserqRkJx29UfHY5bjPmkzlK3RHitIzDGZk67rp5d0kLfjbiSt+xybjiXWC
CVbFiYlT/kclu4r/cmdbVknQwvntoPUeRdNog8Peor5Y5xfeSrSrlHnY93U/
8S1TKGTSu19ffN+iT7SjbZVOgie9WaI0Lh/V09nxHLPkIYYFXH8XaOlk0UqO
YhWfyGBtQZ1z5MF56/ucCebBffiKtWXHKeJeiCZnMpp6Hwmw6knnpJqlK6LU
sDFdUYif99Hvr26puaBiLhV5xTkAMwGYIRb1+2tOAZSabADGpeIvMBGXEeSk
8q4ziyy+Y3eMfut+BpVDf0ff7Dx6/RDGstewBf4tyKevs+JdajSsi1t5Dg79
nWrUvzxrPiuu6XzFRs4/Oip+pEKPtDG+Ql8nrAVLDvSo5rZG4Hug9sO6+/2s
s+KsbdWsdv9RPH3x9Dg8xkPTd1Z8oSyB317egtpPICrMqjeqB7+TtfJ5RtQ6
rDPlKS5PxXG7DXkgFmF6Om4xrKjDXe1bccfrlVwwpiygy17x+W7wDjElYf2u
wGKvJIJHpE//4hJnfnMGrkY8T8UZEd3xedjHV0dEOhnf9nf7QqG4Og5vadgd
dcvaZ674xZwZVONEV38jYkfAqzyZnGv1e88Xu6ebZJiw/xO/2b/4cDS7Kz5h
6EasQANM+otjQ6lS6OcoATrO/+mI448p0azfRdoVV5JOiOy97rOck9ujBQCz
WNeB+GYMpkKOVkXFo34IfLJn6lf3IZPeNSMXRxih1tXIUDkKokhTVf9eAT7u
mWC4Zn9/FUPMiNByWt8gDyrYccQns+e6z1FewqDc08Lc5hd/0u7FVMOhqjjc
QnjfHlyfm/GMXlgk64hExvXFQ9mAhdLJ6Oujs1BrtAON6/v+Txw8KIYpxuo8
veI+R0kyXaO933eqe1Qj77fnUuey5EqrLRTj5OIdP+NKuEfvfPV9eOJHDyp3
Bsta3xOYxEwS2oq8RT13IuzuNZ18luC1Tp470nnaMxvzqv7+GnjbkXnCBqVW
8XDEvfJbbLjqe07wHocjUO599XsUwMIRnUayo1fHOWM+kVA0+u73aJJL5Kn4
MnnqHLziUXmma7Blb604Hh0wiEna7/v05+m5mbIRbti6ftRlcfqOyOuf3e+N
cOoIUdnGW/5r4vcZOqb+x176zHcEQ/GyorJ6ft+TNiSEHnQRcHzd5xXkXibs
yBb9HlFVkN+GiHEWX0xCB4UfbPj+4ZZ/cZoNxNOirfNUXTDCvt5jOjTlbB2n
sErTFmh0lG+gYfCO1vDEvOYp/wVfYwdS0wfm11n9GZwJSGS2KgCRR19nZHP4
3WKI3ecP32ISBDTC7w4upnC/d9RDkMp33kVn6SFIGKxWVMk41Y++Du7h22G4
V/tKa4YroyPrb/6wdRzAjoSTqvgqXtVN3EqFysEZvunpzxtWsUBjGXQXvtGc
KXY96DTk9vv6hknx2D72l4hd8bSMNcl37Nw6jwydDSYjgDzbpwwFZ+V1OeIa
0HUxWJwR1ZOsb5XvGAMF/ox6LoF8zro/eoxxCJ9xhO51Ar2RfsQMgnL2dUBv
k4hx5CtdFxvOumK2JatsvbVwpYdRbCBSd893WBbE10T9CwZbv9eU9YjqAZBa
93/GnYIY1ZwIaueZgLlUfOgABIpb9wdq5whWiTbX6nVuziKbBFuhB1P3AUvs
gXU4oypV7ylg4m47TIO++aQ6PJAntj3ZxVH7Q4BxBqKh/ayek5L13QOxPejB
H/1352E/ouawK3z6e87I1ATRSXuwzp0AnvD+yC6YR/X1Ab6ebEPO2X5eBLdW
lM5N/bpf9wJTnpeyEup9xZ0jv1sU7/ZVPtoeFNxnMAs8Uar/b6Bukg5qvK+v
P0aMlCUSXMATe7Y3fkN0/LYx/wpCvdZnBpkSWYm6ZsNV8UttaWLIB6P75JJP
46aX748WUvHXxnGBdKvz/n6XoXtW84YgMbq/F7VFCIEtInbdj7ojAqk03uCz
Ou9NW5o96SMla39YoHcW7O682cf+fT4Ohw4uKg13rRMe7nCA08KKW1bH6TBs
ATUAbdf3Ia63MmMholx4chg653v6lnBW44vTJlEpaPuWHuwdylBeIYoLe+HW
9JSi8a/yYK9R+wCUP+EDPdYo2XcclpWg+xn/oNnXx/eIPKfEtHQY7lcEzAQA
uewuXp5sNEgSDWFIxNr/79Ci9btgjq6ex8kMYg9tXrQ3z+iOdTYNzjdx7PnX
HZOvGf22E8uh4wb7tggcEQKqFVce6uSbQe7ffUvfD6iK/m3rRaDOBLRgQ4iz
+Kq4TuwV7U6D49Vx+SHcmLKPIW/FAcMJ9JxHkouKQ6Sr7TUVmfbMjv8yKCvE
DHv2Oehn0vszxTct6Os/oT84+H2pzluACX7rNaYbV0ReKn6jzxgX6BRve/9d
c4tYqADF9X5uHPAqDSvCnvJpve8/lw5aob/0ZfX6n0nCufJlkF192t85Gqoj
qM9rS1/xUCdM7TUqr37ujDF8dwK8ECf9+YjOAx/+vur29PoEHBzhQL40qfOL
R1NGB219ebshpn73b4EGv1f4Cn5k8GME7HCm+rkv5BfeOXRurvKvEV/xN3mi
CfWtN1260Mf5C9zfc1xRKCeDR6mq/Owsh8gL+AXGktU3c039zejeK1b78yqM
hVYRhNF3HWoaJkVXjrzanyESITSxYgz9Kh8OUpGKljkpyZ26TnJMTTmz2bvz
Un9QqnkTHDu+/sazB5W1R9/sfnp/i7kMCMsDqHMXL4aOsF4UhTTn+1H7g5t2
hixjtjzGP/HnjMDGQhIpf2GoyT3Pyxb3XIUDFNfMURspmvfKH6Ke4hSe8anv
+gJtnBSwue1k7VLfM7baZ3yC2JhUnR5oezBtwK4q/oqby54RiUUJrfUfXzao
WTv+byHV+5XZhUE4Tag481WcmxQ2V3wHymf8TiucRxSkxX6VL0DcWQ7pc7wz
R/lJqUL3AJOx6X9Hd81BUGEACHKYxl604+o6O80VE4+6P/4UHxa6VvfW5wU3
jAcyUR1A8L+ey28Zw8HrYOfYmB03QJCyMy4sfXtxUF3EU3r4z9nXAYdTV5wx
A6k5IN5KnoHk5fdlq2+Dqr7hh9PS3q5+H1+SbWjWsUns7xlkxAyEL+bk9X3u
l6ejtUcLsfb5SO/91mCI8VB+fZ1w9PPf99H8Jkj7JwqUJoHGaXUdMzizrJym
6+y/+wRcBzChUC0eX7ZnkAzMuN9usFV/g0PNScqHoCjlu1pXMzIPAcNb77X/
E8GhuWAoR0ui6srHUYqVLVOXo46Ow8kEI2iIPfvzS1PjSeNureI7U9mb/OHY
OUbhpn7X0r04o5itH1n7f9AxNN33yLF8v5fvNosBhVlQ/RVXPmrE3HhqT+97
iwcfstQRwf+qI6I+S5uB6YAWyqo4owmVcrrnxYPzM+PLMLIttf8XuZJs9Gd8
0+7O62bsWCNhqhDeqn6cTiGi0zOGhuV3EEM8gnpHNoNZ+iTiGkkak1Ejv744
YYmI9aLtVv8WJuuMR++iE7jXvsofzfQ1Qg1qhqPinqp26RaeZe0n83hNIcmu
KAxrnczjxb+esXdu3mhIxzxadYfiIVXX/60YpfH5NifvmoOIR301aNSz53o2
q5eLqGW3d344gbjImJw5tct3VVpBeFr3bIfnr/eFGNHB6hdzOq4dFZc20my2
825bP8crHaeoQNjNqv8P+XzH72cRVCzfLoIAEjpjq0iz9nMxzbgjcxKmeNUL
HjclwmioU7P+4kQqA8yNilTdz1dJ9Lf9sNW0Z1X85J0FwTU4vFU/kKw3jY/J
fQ8Kt35vVHCYzUYXaPX69/ruR/S3XkBJxWGCZloHecfr+ndMQG/n+CtiUnEW
HYCqEr+76y/SOFrlqkdzpZpr6y8fqWPRhkBHKo4NomYj6X/0/NGPzxE/03+7
+/6QiLv1PzEGz9JFvNMT/e3BsHieXa+HXwIUYy32J883t6X+hVAYO3T90rrO
zEWVPe86qutM7YEoHo8UMXvHr2DSg3K5uj9GaWFxdtBAo3rVn7+0o1U9TvRV
eQWJUzDeOO7+lkmvtxW9LdBKmXrpT+Irgu5xFJnx7P4nfkc1CBB29XtNRRpT
mVplxt2j4pFC9UawMWxcjZEmPvAes4DZ/XxUwD28ylOx3OfIyiHrxDdNGJ1H
RR1TUWNez8v773tqnQJgHVSvTaPq7waindRTsTar74QBSheMWL3Mq+4nkSgM
XQglqN/ab1/eL9VFAypKYx2PZxdYRoZmf+s/WjX3X22pTTs7zs4lYFKqKNWX
W3GLkact21734WXbcuWRycMsfQ/5zYbf513Ecz/6+lgCELuOlLtx3WBc5A3J
8x0hVVT8Dg4et9wDqvNi5UN3jB+w1ep9/B2nK2PkC9dtdH4o7q5v8HTgtvV8
QTRGTuVdR6fqRzTY2BY7Hex89X1OHl/4eBK85ofCItLXoF8Lclj8jjt6oxGt
IWDa/KNYH6GKqHzNpCoP5F+mAfN7kuEWfp8fR/gz6fgQg+k4n1xscxOY0evT
gMdSIKxJUql+ry9HXda7zRW0rxOwMo1VcKR+T40JMjnfY91W/iNp3ALP3NRo
r7PzsZf0FLTAW89WHPRhPfFnwFftdRIzuYh7zEgN9ef3WCrPl05w1XmKaPjE
9zpS7Y0Hg0R/E66LjNzT76NZA8KnZRGIXMXvzNdm9Orn0+87YTCK5i/YYOt1
EoQyE4TNwVl6REy7NXS4R6X7t/Xn7ZC2+phH9bwpLjVbnD+3GBD3daCEYN9O
CKfGAa5YHfO6TPZ89H2eW9RP8Xh+e0jjW2SB25W0kYPc/W88dNo7gurld3+r
mrZYC8DwXcUn1WEHj5R2m8GXH+VtAK72Ama7Ucjr84tHNNWMX4lB0KCubx6k
oUjuQeu6vv+KrAWQwgv46+svSyritfBXlWdGDFpf65TDUvVM3D0Dx/NMnOXH
3z75oJ4gC3Lk1sj46wM8AViZ0O2hxNW87AncgJsk/yyM5FFx5H1EQMCqo/B7
4tCZaUiZzV31feIt6zZlTFJ8EMP1LQkE+OezCrdAtlpTckbgV+exv89D5l8H
Xnj/e+9iMMXLNOY+37kcNyS6e6ZXst6n/u7xukBBDh5Rn6u4FUeQVze78X58
XkHMYZqutIjuij8ZG0n5dPNGxye2m53KMLn42qgbFp9XxaodZ8cPUFL6ZiEY
71fHHwKyBGFfsF7F1cR3rJqc0fPpODYgto9+/vrrU4mDqdDIeXmrfR1pmmZq
3BdqX3qyO668q+i+VdeL2+ThFp2a66jvP1Jg3fEZs3N3XA8+Do2v5mnHkayj
pYupW31+Sqo8PJyqjEZGP5cgT23qpjlM4DoORAem7CUtvgZSp8lkRGb0q/v+
30nnQoDUyrv68/NP5+u4Y91cz11vII3aIwPip54vUlOsNO0gRgoVj7mP4cZ6
MU8V50txHuHR2KLq8zMWTfgikSXdO86l+NUZu8b47htJ5pDmXturVc+Rk4uZ
3hVftfO4Om70cMWLPVTrvzh6C7mqOJnt33sBngmkqX22Wn+PKJheHUGHaE9v
9X3QPaNveQHwVZ8hjoYX8Q+AyLtx13JYowgpPshh8X8jgwaaBo2Rt/iLZ7MN
W8GSuysOEn0FdW82V+sfMgSiTN6UPs3e8VApwxOi+DArDr2ntLswhe66n+mm
vLs3raGqR8TBnfawoeO1XPE9fHvZlXnfX/6GGH2e8Z3S6RnFH6eQuUXLxkri
gtvXpyiwYmoRc8uKU9KOmjR9mK18JV48ExlPxL1YnFTcPEKlENzKOTqO2qc9
JCNZ1QcQx7qjnGMYVXizJ1iC2B0fI+3to+NTc9opckZZ9i8eB2ZvRqDBR60T
FdRuF334/d13P/fxp84fIOssftbbNkZokBTROq77QA6RMoH9AxRo67hWAvYL
vmPplD4YcFscc7SOVvWBn/xKFBS4j3V8z9EcWa9d/0EzoOIkNu9Y2jxojlc9
x3SuUFmgBPfS25RMQrnhPtJBqnwyIhfMAQiCTAaUR8fH618eEfvvPiP9zRDa
NWOv2vf29PGu9weQdqz34gVyRvdMN2HU96SKjfEfDDRkU8WfuAwaiIAk1LnD
2oEgC6zl71FWXvqOqF+EZsB3fR/EjWZQ6cOOqvhIhnh5Fbf2c+HIglZFjZem
2FHne3xfdlVEfM/6/h/JZ3YOGHcsCLeKv7LWsc4JCbLisCEIPTrH7bunU39E
6RTo0UD2rviZtDENuofocMeDmt2kNVGdrPilPfbEjAJwpa8vBzYLdwiQ7+i4
hmycau+MdP7iWc2SSSnhXviQxyCaC9CmFWsA15+PgMgVu13Jwd5xc0x6aVGt
uup3vZ51OwAE6EV/H/4WoKvjzZj6+4PbYV7DWukg1P00kSdHvV4398oPxaFu
LSJAlvOf+AxwgV4pcfqOk7YghcQLuHRxI44dN1NgHxqU/XfBLjaqtto21/bF
wbSJiGKEPv28Yg/N0cnZ+3yfv+I/GiqRE6D2c8WD5DN4mw9nGG8Z6Ez7j05W
X3+k+aA29g5s/VxotCqatlASCl9KEwjK2JGtnpq9DsmnSR5WJiXX9/nYp0fe
2L466r6NCOQdcCK663W+mHcSEFGoE5mqfZjlnpuh9MVEqfMx8REbovQAa5+X
9ajIcAx2pc2oOO3fPcobWot7/V7IX3lJEMZX6duL32nYnTqYZ/m2M5QnrQIT
nerp6c/fMfAcWtbm+/V3UyCSVQ4YqvOlN+7dddDP3s8PM7UZWjn1pb3fC/r/
XHuhr5RrdX/mnTcR0McR+n1+ZpQcVBVEVcUXcQ/Nvz2yF3X+4qeI7XxMDvON
ijNhYZ6bY7B0cQ0HdeUgaSNOUPt/yijAPlvG1boW4ljIFJh+5fRReDkMDWqa
VJePyHk8FaeaTO4KROIsXhKma9xr4w+QHPuLJ+FzHkaL7C8ORBo1wC1dlzqv
o85GxvgMcLPqWYcWjC/kTKqtP50Q8fdlue1Mo+YyAfdTMgw+i1rjqHhaqx7n
E1eso+M01PdIOcRwoeKAblGjtjHN/rswOTMWZjAh5StqVmKsZJdMhfr09Z9M
3IygeM/Ue63p/CTbCLNz9H2OrNeRDvO2mr/zYGoRzQUX3QmPbh2/pXkUHbZQ
iip+hLOusJV9nR0fL43lIFRyFf7HWJjCWfSciJrcHX9107xJ1ID7ecUdEELQ
BnT2/gCOu5uvEHGKCUDFvdnQNbcB3HbXfbti5XOFBfo0LkLhTOnIiDBrvvbt
uKwdsHXGEhp8FV+sibis3ZjAx9Nxmx25Ddo45TusDx7OAyTpiMpmxWMU+qqE
M8Kr+58Jb8CM6zUnqfhprRnM7AHGjy/O22TyhfD5+r16cU4RplHwAnX9J2gJ
Agl39rRaJ57AE5yMG331e/qEMMnwlhb30+sqJI2YgQKCVN9bRcGK2jsJcD/7
PofWRlklaMnvd9FyWJm9QKUUv0lcUQo0ayRU+sninAogdmjOdn3Be0p5J5My
flwd/xUEDEXUI9hS/Xe1gtX0qMdb+Y4ljqWEEswQvd/3tb06cpI4d67WG9y5
5vmVpu+4vviASsghKNGq3xUZPZMxeTpie8UNuuyVxm/t8ysODMc99Io2ev0u
GsIsvUBazZm3L25acL/6BKVjJh4bU0cUr8F/rsOdw67OFHX2vpr6V+k1KO2e
tf/Eh8VOKHM5ei4mjqkWS0LYhrrPplU0kQEeyIZ+8YuFnq7giGbKqjitMvi8
GQRi5WPBT8tBAVI5WN//xAFY4CxAL//5PMWtWIas8/jn87+9BEZfYQat03FS
hzOax780vfIcQJ5wmfQU78aZPK/toZ6XadG99fcMmIEQLHshmWjFgYfMxll5
zvJbyVFpEhvR0alZX3GtJ45CO0zFqnM/0upXEjGqwvf3eZLoi60o6enz7M9L
KRCSR6jEVU/R9jFkjlYFyHPHcdPpk28oy0f/3fSPhgn7E7Xtf+L+GiBxdJuO
ihsP2iu1THrOopdsPPtSUJhy1X2LLCcUlKxmL3zC83ZtbMJ3VLfq/fJ+Ogn9
gJWM7C/+W3AUICkYDHt9fR4lWDUL24KedHYcC0pqlARo7+usGY2AyAJ+dasT
nQegpZw/fXYcLj9aJAES1H0YAfKS6nW4lF/nQyuYUp/k84gieMdJ2tE9O2MZ
XN/H/mVWD3FCZqDuZ1Cnw1RiT2d6VDx4ix2EIrO3jsduwM7zxDu5/u4dEPkM
2DKk/Yqf0VbQXImiR30fJYFEzSBAF7F+r+rufCH4yKJVn15QjHdOKdOl7pPQ
GADU0mLejq/OuoKtUBkb5t7d5zGktnvZxHjlVN5i/P1yNjSR7j5/DY0sTCQh
rZp+HynMhEOz1D2Fr6CN75xC0IHPvPt7viCSWM4ZA8yOX5HczdsbzmPF00QQ
Q2nqfTj0DRhEjWuk9Lr/Mz43INkP16jeJwPejZPkKTGufqBxXCYnuMjglX9/
d8RVnrIWT1DpXcUtoJfUeOlor45He11RuCLm1/HFP2nF53EUX4yHtW1Kyu54
L31dQFQGPJqO8T64Oz7j0REDDAOb+rsE77W6rqgHPHUOUiOG3D4iyXuXbxqk
IGLh9Zp9HKUPj0NjhMo6EQhuq/3kNQWnNCvD3kofm/POHjHybGVX4TadrkH2
mTOGmnl1PJTyDShYj+bseARiQmrUXOzP4wudGeRP/Li6D2a1WSlA/mPv50Wf
2oq40Du2whs/6YPvUTHzKhR+D7Ld6RcHCZS+vj/g949X+PIvzspXh6eBQ0v7
bGsfnIcMmiVrMg8+09dBJIBU1cTTnqvr3PEyzfOnhP5dhyjnnWSfqFnfTyMm
grIseOlEHh3Xt0WwGJmHPx0fZ5yRjd5m16E4kjKjmHYRharv6WR+7nRQ4EB6
HU6UbJhiOd8o38An0lpPQGKEZZ7/xU2Pdr4WR+kLmdUeMzzlh+9h+QLj9kq3
dICjWtl/1xVCsqf38Nuj6zla3k8wXOwD714P0VeKixsWcc/RRk5RqeMZl/Sz
P/+EOXHppT7b97uIIUfChb3EL8Wt+7aCiCMOjQdcetExKWB2LwUy2arzKBpl
Z3zEtDkL78qgRAf+iK2RhnZdx1ZCW8sDOu7ipzwBpyb1UcXNnjchm21Qp6H7
7j3vuAN6gOJz/G+FAwdNGmQejXFg+eoc5PyhO39Gp4K/esWHkRDu9MX2e/Xn
LTiVR7pVW/9dLbE0+A/I3LP6luIZ0kKTjParegh2XNieYdJvs3/XGYLfHb81
RmOr4uwoZ4yEVSZ9HafQk4yF0MTT3zNaX3QDoWiO4i+Ig4uehBEeNefWcSBS
FHdjpfPu63hH7ghO4X1XfcrnQgJHZYLPbZ1rnE6S6WyvMVutc8TC34/Ht6NY
WbySmNlTyKHsDUPf318KfAWQQl2q+N3icSj6XVzju/RqElfsMhTxLSt/VrYC
ouKPGy/ffR0StzJHJd1dOuQq5+N1hwrFr/CTOl9p5SftlcvuHT+i5UPK0v+q
+5xJsvw75IDCmYuPVzNLWWXn7viMMjxolOvU71KjhxRpKjq7z3Nnk6TZdnuT
u17QLJPIgvZqq9f8UQUahRkbzrY6HzAZUv5CYsJjbP19zKLdhTtDpzpPnQkU
9kIJ0fiq9WMlxoH6NQqq8yiLJEDCWF1vfR0dOaf5ldbi079X3X1mlkvEoPRh
zHxQ5GYcG9TadZ8BW+kdGK4qHzt+xfZhRFFglC7ZEyBp5DkZ+43it8Yj3uiR
QKLaofJhgBs4BtXCYdLYnw/iNP4sJsM1XwNYgXpfAcmcpTeoNW8aym2Hm0a/
19B560q1wHSgfKLjPug6vBlnKviKR0x7xHxYyf/FWX1MR4kuT+0PXDuASNk4
Q1HU7zLo1YHxjQId7zhqULxD0XjK3xl47hUoBFgnUlB/F0x9Pi+/24Lev/id
Pot5Cm3kvzh6ZqSBvcNb41seYha/B6gNDKFZz/cJtmS+7G48vqvjT/Q8NfSf
p/wpZOfw1W/XT0ekPn9e8QYJN3WMxoHYM0BqrX65wujP63/yQg4AeNV5FOSt
7s/bci/d0ejg25y1evUi+34S2sC+iK57+9qHfGicgjEG+973LZp/e7wAjWuq
HsQEJx0Sy6it/Q3jKrCbMQAJrvZVJ3lJx+qkHhOl7br/FFXBi7SOjaPqOpSQ
0NZTCzZPn9lh8v8rmkPAeR1fQckcKWfH3Z/Xs1EjAg1ho1Z8RpZ5j6IlcFPH
6e7StOLAM/q9eEKCoINE12Hr+/PEPd4+ZmZXPnoKDl6RCl+Cb13XUBrco6Qq
T99KP0GceZl3e8aRvX5XwLXUomTMkPQVlzpEVViqsPo+r7hwZU9SovVzYaYG
IgsM4+S+vjjxQ2NIalN1LkNUmGaYmxuT1v5sC/cWpt8TTfuOaws/FBffirPi
zCuJ7oA8G0h0fAbnlBql+adUz2LUjGMTg92/+zaDs3TIbP7PrfKBGZc/alkE
5Ub5ecVNgcUPFSG4kdp/tAuOyJmfSY8qH8C/gBSS8wFl1r7Ego5mqKQUDrfu
G8Eqbezxzs/7+TpjlYS+kL5g7QO/RQn68ESVgg153QdrZvdSK0zunksi258R
FX/5krVfUQ3XVNEiPyJhVPGDy+8Mfo0cb31Pp6CM1G6erKfjOSlQcB3EV8e5
R+PhI4ZsxXt64q5AEl/2uFqPiMIp24hoxJJ6qP78jAqXgUFIwLP6JBD1hEvx
kWVwdc7yMQrvQns6q6DilPkZDlD5O3suM9m5G3NbFMt4r+LREycAoDYuH9i8
LlyXbaqI970O0aLhbj0ZFIOt4xqQkIcPAlHfTzoLsTozpH7KX0NL9InU8Kt3
cfXz0kSLwBWFyH1+18H2B9ZT+VBT/ov/lgGBTD/EZHKv38UuGZrBeHK0P4j4
CtM0+rLz6fuj7H6dexm+rto3jObuIDeoVxA9qvjK2RAI+z/9aqZ60O6/n7sH
7VDfhzDMFlS0qW3xcYL0muC10SprHWy74RGsPGNx6pj1fdbrlhlMNBm/+rvK
OxuQHgRM89lxfiGEcrHdet6Us1KtTCjM9PDu+HidGS3SvfDzQDVbDEXP42Uq
9HWuCFHNd6HuW38flQrseEhqxR984vLiC0KSpnnf8RTQoAtPZkNvfOVYZsAS
NeDGwVIMQax35lkvlT9T1971AX8JFi21OveNuymgI8NlHvt0PLqHI+4b3xwH
GA77FODAW3/332VCvdLsAa0dHVcTDIn/GerxrPjv7iLHRMPxaJwSZZ8kCljN
OKf1Pfe4EMUbxJiq1rO1AZ224ng0incWWbAn1UJs7Xq+/LpNS6t/+4BdqP8u
tW+qE+Ci29G/S4YP0JqzrXH4ATay5EFn/S36zhMW+5FpAgZEQ8Wn4v69bYni
v5ZDxeGAAxJkrNZ4NppA4cWzqbPp1H2wexK0CpxhL93OcPV2zaT0Q778gd8K
hKRELojvil+ZUU9yYClt9457NXhNANuc9V5E5UgfPM/xmxfYlQl+7wG3XD3H
1Gwkywzo8Kq1VFxVo4gAS23/0Ae8QiXlncM6XP19YpxiVPZEG7buzwi5F3gQ
onr2fYihqHs5aN+d9xfHbjJh5pPS5+aKvdR5xqpptF6cuMpsBs28KHZV/Ax+
mxB3QHv9+et8pR5kex5rxW8IVV1WUmdb1XHrdVQLxjYqAXWfJSxD0YoV+c3L
JOAwtdTl7DJ9H7T8cS5luiih/XlC8m9BouSsfleMy8IG1AVbpWcFGOh02Uw3
jxgxVhyj8cEhgGcZVXesIMHfXljs/up3QeiA1wYjc3T+vyJGINGPHs7e1/eV
oRtjqrV6rrFe0AnnBNyA0h9+YvPr1d6CHmi8cRT7o/6PhedSFZ9/Ihv28+fs
7z/jRsPOnUDA6Ps5M0QI51Y1+sXNxEYsQKCJet3q76Pwv4YuR+XPS8vbclIF
bc/s944Q5hUrmtyOfu4WLsQxXJ53su6DB/n79VoWctc69xciDSY+Yb6n9UjR
oANxiYrK/HCz/GLGayayIk78rgfqRSYpNDuCgv573920IybtF/x266jP+L+g
qUb9w+C44iqwh9U3kYTiNWvWUNFFYYPrq7p4Rk8zet1PdMuu+ru7VtcVaLFZ
zF5/lzIYGpFJW4A9X/xwaAImqoWvinsxjiesLYDpreKss8YT7YfRfigz5S2H
otB5j9Itz6gTXjQvIIOquk4snzFFDoKwlQeKezv32A2BDdbvAsW4ot4fy7hV
f1ez3c/ag+IaR31/UytoG+2t8c/fpcogy2E7ESBNx8Fd3FWts9XfR1G9oG20
R1ufIQQyfZX9FQSpfiMK4ojZyytPW+s/enPxzFCj0NaeX/x8pTuJQ9b76H+d
r4HDERTC6u9PNAd9iGSH21Jx4mgjcpPO8e/vzlgVApPrRWz9u5xDwBXaZ93f
jpB/fLnOyKSed31PvV9wmiQqd+kqz/BWouOtITPLd0zc+owp7klEu76/2o3u
SepfaigVD8My6EMNpa2+fxyH9J3397fX9V8le0pssfO9VscPQ9iQHCmb9ucp
KerTXaCSpa87X3QkQLHOxFH9K/1fnb3YBl5p+XZ8RksVyc9JUL9LTuEePZGp
Kt14Wgsq5TPSb1iDT8fteeADytPRz+WJuqTMkQve6v1EB4bX2WaOPQp/juMZ
ASOIvi2WmB0/gxhSlwChrI5DknpLFXT3U7/LSbJHSRItZ+/9Z2rIIYlHv3aO
jrs18abVz6z9fL7f7o4khJHRrL8LczId2ldGdb3OqYmPkT7BHcpDxw3z4ovL
x7B/74xJDc8Kj7nqI3GU8LiErFjs/cVj0+SpY6ofpSMqPoONAsRB+qp1+Kt3
cFHW9iq6jv78qZqF0ZZIHb3e7I+/l3q3+2xH9d8IkZ13dCNHNrJzdlz2H/tf
g9v6u/uW13APjNTzOb44FMA7uB/lEzfDktcP+iWaTMj/8Cri0eUMT/TYen/L
LDcICKOYxqtHW0inBJyWclCtk90L8yvUjMkJrGx9/ZURHtQU+OZT39+FdG4g
WQy9j44HvwTPpZqu9fCKnlHKPOLndX7xsYdacgWI9tdf0rDlYPPbQ1Xdq+Yp
b3zpAWsSmypWHPnabwiVY9V5HbVoPacA/9bWv0v6zawTsPvuOZopOjm1X/p8
RCuyzk3TXfKlXNkUmFf93eN6YVSIEkTYKw4eoDFp0wN3ruuAk7zmzjO6GqPj
GtlPjHMQS56Ow7ZCJxwRFqjveVLrpqTlzTvv/v7kFh9qLWcck+7+PrDntIEA
G1RDHacHFKSejXfUdbDq2ZQTVXbP63sSushXGm/zqa5v3nBFGn1FDK7WCQXm
C/kbJ3UUPsQ49SbhEqsUNjz1fagHQVxckUK9+u9mDd4Gcr+35ilfhhntfQ1d
+rhGNHX9O25G0dA9rn/W/x36VFxPtL73+r0BEWlioak3fpvoym+Nuc2Yk6vw
rtKzTFd0kxHj65x65RZCOk9qetVzpMLMemCL6Hr1H3hJmBiqrmXY1bfP9OvU
6yLFgOVT7wXOzu/hXOkaPDU39KZvGPTD3JZa/Oo4jb9wKshG17mmibG9O5ID
tOZZdnOnbiR/9dB6X9LGwX8nv4dNU98n+Ty5CFnmdff7riE10myEYykfnMi/
x/TcAUkiq+6PKVQwgvpaRqAVp/CX/ZC4U+fDfA6y/AmISI+2ipPQWt5LXsmd
14E8QjPZE480Yzp+E5h7CUWkLCqeJCOPOH6qV8X9RZmzx3Id33UIrDzh/s7M
tiuu700/LnCh0rdBIYCvGKYM/mXtewejmyeCzfHcqX3Vpkn3AEBwovPW39VM
XBFToeAw5xePEOMTGa+9eGST1OX1iqttkcnrz+s5cNkIn2/094n/hZOWis5W
+Bxx81/4Gayx3gegdY/9dVqObVd9f83opDMRrjorbzzOV9IB7hvP/m8eNJNi
IPXEIOYq3dfIL+lkhP59te7WjDnIn8RV8J9Pxwl1pFlr36v8B2ualr8NSj4/
/4n/3q5wBmKn0fGh4DGm9ul71v3UTTQUA4bXr+rvqcSmv/mk/bcqbnoH0/+r
Qo0Gav8Rv8ybEDNXz7nE1Y/wxpxtys+CVIleJuCA5nfNqV+pX0AexXU08SoO
RILEynZ4fvcZ0t4z257Mx3r9RE6SAgygzyqfCD2eAP+VeKQT+/tQCFeSGSef
x+rrEGDVpVEt4hH25ylkHsB+oKfFhw0kltoIaZgzYskdv54ISJiRjKPfLxsq
Zb/Y2H/7uYr0imKEk2cWTonLLqwrg1i/+1uH9Nt1Vfzx3xeuPOrIYGzGS/UI
NLjil7lL2lWR8PnisNheOv2/s/clqpkR2pYcPZ0fUoggyQ30Gw/Zel7Op0nU
C4yi9bpnzJova8RZ5c2ruDdmg62BTJn9fIEAiNOr7oL9fuOKLr8WID4CQ3fF
GRBJs/BW2j/ayPaXr+YovIB0qj8ADQ3+EcxsRh8VD4su4PAVLaa/OCgJrWE9
DDOXrePEmsPVcCJ+cZmFUWkS7OrT2qwkf6/43gKMqfiMQwUT6eDo/u6zIlmb
UKcRlKzycL7ad9yx42JW831NIcZBBKh26cPd1yHarlJg1gD69xdPr+6IlkAA
0PV7SVJxbNt07kbhS9PDwxMxuMlBWddnBAI8Tr1ha76S3r5WbPwh2aX2/Uk6
STbMaX2Vz4U4YVetc6j1q96vSNBytwnCYJb/eMrbK1cPTL/fO5zRRf43AOij
fPfEYy322yQtuNIZm9EM4Bkb6W8/oeIwDFR9sq67HgS9mdFGoUZ9l951xqfg
spEYAn7/Ph8EIlj5vvW8b0YRN5aNftpdekdKJdTUPfzC1X3LxBdBLKo9+m9b
xz3GVHKQtVutE1mX9clcW8Hf18lcgZsPpHL1SyX2Ks00CRhm1bkj25BzR2Ma
iO+Le5KpviWF33UQ5gFo3r539YXoI5MlOaL913oFM71uYmZP+NR77TMnxkMc
SzgTmHlVPBgfJ+2yZupcA902zfodecGbPbU/xOB9pPuEBFLnsgJxs/pXgO9P
vxf6tpHxWJFnqjwc/Q53XD8V0LHfF7IcQGW4LJor9RwRPtz6vLxH6WpOxR7R
TqqJDK5qHyYDHp9QO8fT/fbI1F9g1fuTvbjW/5WG5pOO/lBkXBVPpckldkbP
8+g43PCTOTIr81Vxqgnba6+h5/9UPDTlbJPvFl1xzHeoypXR/D9x6TYdbGTl
0g80qlGh2B0ordS8THVl4rnSbDtaT9K0EHLPdZiEFI5FPOfKnU7GdvZ9i5qR
tCvC6aXP8MbXGRL9SQu37k8OqT1sOr3u1dfJsUYlAUJl/ydu2qed8Gdb+xc/
oihrNgkavff3PGLHpLMKb1s8TTvMHh/fPU5ZW71HF9Iur0f+D6t9B8RNwAFZ
iJSWX/y8XnI3pP8e8Fld/4ziiEbLrVy/zo5bPFe8wjLZ7ThBzP09jyjxVJzK
e+yyjbu/53VGepiaVVyEa99TKESx5o6v6bbqe3rf7jP0ZUi1OkdA6WWHMqw7
bnUVP8LymXD9NCvr+leQZlcE9ZhljooHtv0kU96O8luZge7GgudMA6jOQX3q
WKSPgBC6D2kLAQkw3384RNbzjbQZMeHjiNJh3U9SX2dYQkEj9PNCg+W5gqMo
TezPS+YNjt6+8urre31tTXeKueovyTHMHnSwl4lNPRfbnmPan4wwdcXh+fPb
tKPO/l2BWTKr97DOzuuuKIQx4/C+f/s85VUUbutcU/OL71ss58DjCKn0dSLK
BBFzRJylP3/GjcxSBKbp+wBWd7zeHjFXrO8fycIruujwBr1OIpuE/K3btkbf
nyfKoOgyasLON8x+f5tmhCxNWCufp10WbDSBUUPcWlcWWl7T6BfNuz8fqX+V
jWS+5zVZVke8qh59qr7/3EKA9WiyqPxqfS66IcwkR1SVq78UdSIULGgkcOeO
6wRcofUuVjP13MNoADfkHbu27/reLyDqtBZLd2vGQGx7jaufCDhXPPRA6oex
a6rfpZY0ddCHd75UvYP35BCUcpH9+j4fHm6KkREl37/4jlGNSHFGoabyW8BJ
ZccMD6x1/9IpWjGx3SXos/JJXoQHJWd0OlDls+ImX1usyUeY7R0HFbJlR6+o
8kboBBIhU5oZFEfFEQQxMDKo7nrwnZZDXEQvsfvGBpJqr3RXfgl29cEM0Yme
oX8zlq59TPkJxTYoaBztA/5a1TrU9vg4Fc5WnIpEWvZgxdU/HzGY/BWUeY/2
8gckG2xZPX4ZXEydd1yyqONYGKe5QF9fkRsXKtPTVX05arBY1iOs3tbVnyNT
gZvqtbZv77fjtZo+RiwefjtC3R8tedBN07TR/kEwIcFAXNJYA/L6nmGfhMZz
RSisPg8Hn241vd5x9LqKF+5pQKe33/0QDgJaSQZ/0YI7Oo7Q7qjbwtiouIWL
dO5qADYdPyVSGBwvVmZ2XHc2bLKFslrPPWRaqef2Qlnr/QIQOIAsKEtS6Ox4
bF9uvULDlbpORCcv4vFPxidf3HZLrfH3Sm2dPzgmYDOBUn5nR8+VyMssOOrb
m7zNfn/RGoyloggCcf4Xj58WR+wnRvPVd0WZjZoDuqr+Vf1dZxQk1JH2Qecb
A6OBvBLZdXl03U86DgYLWk7whPV8c7IROfktHal+f15q+0jOiW596xAC5yIe
iKM1e970ix9/sCxDrfJVnKnqBzy08/Hu89RMUCa2wgiaxeukza8qIqPz2yho
AFU8rtuRIPFOVX9+qAmouB5Rgy29dNk02DCJhDuaYPX9V4zHYW40yZ5en5SC
dFMHL6+t6x1lH2rQjL3AKv158TtW7iM0ucKxA4YQutpzcPpGV8dV1muL/8DT
+UyGYjzPbMfpllX8NaqX3t5Ryv6Lk/PXG3uOuAbW95chQ1/FBcSZ1J8H0HSL
Tyrhpf8jTgJPCWw/OAq/ccf09kqnPzqud8dxU8+4wHix6zpmU1sMBACuSp8w
Yju/ujRcSepj9bxuIhTsfe936F3rgTKCckdxOYh6nx2PjD2DrRWoeMWpEsgv
txkzmL6OdoTfqhq5z/4+bIjT20YW3jq/pQ6+hdlA7PDpORqw5ordIsWj1ftV
WL/6DwZAKX3+4hGde97hoW7888V/qQhKp/d+ffEzfgZ35rO/l6n+7og7oHfr
pe/W/R8kO9KeGIFH1/enMYus8XtPn7RdKr6TDEJxAUdoHE5QmGGCQ2DcXTfF
8ClCdFKJxovKugwQtAJXKJOr40oOSgy6eN+6RQy6I/EfD4jK82P4EdFdZwMa
W8UnMNATyXv6D198vPs2Rd3r7Of7BCX56IrwyXn68zllZ0gTo3VolYKxeFSR
K5D6PgQBxP4zdPHuR7EkUTmdGQxt5V9jaOQgf6JBpQD54kuVf0cH/T6/6+OO
OE2M19pHDNPsipzOHvOm7rfcEe1hUob69PWR7ijGjFfDHTXqb3+LaLNJFCFK
p+jdcf36IO4Gd7xVccmGmgO5g4FXxXGUTqkSRnfpqYo7Y2AriScUzze2AJBC
0C1UPq++jlL2iShyttv+PFIx+j31otl5L7C9dvIY2Rm3o+M0q3AgomJZvAD2
AvcIxITu3F1+cKz1XrWaX0a6RfG24leYHUhnWFGVn3gUhE2Jrst2+n7uUXsM
XzJIxvOLY43Ly8zlrr7OSxvVDGe9+13/iYMteTzuqPX+PkH1UuYe7/l/VRw+
VXMVOOrLk8WfaGjC0d2FzxT/bcy6aTMKebWv4oRemZKCa1yNx3iSGc7XwpUt
esdpgm0pIrZ4cXXc26ibbbLRfdRXwkyiur81W30f256KHtjwbl24GeGzWNJm
fLdV/iAe9R9V8bG6znpedi6HelYdPW9lEkqVxPx/nf+sEyJOiCz0ajRD6/5r
SUL6kyTVTa/fa1YSaxs+5IZ8FY8KFRazwqf8qcV5q5/vOPb61jn4tEkpUHFy
gL/4oKN1bIXQrH0yOCSoD4i/INQrLqsyFrLXtM+CuEWyGe4jo1Se8ERc8noF
dzCQn44TEfvd1ch239v+xZ2ccINaf3W+ZEuKElWkTcb3fTJLfC2gAHfqPpP4
jBfTEfpK7ef8mH71LbCzU63z9mhMmglkkY+uf41i0ks29T/bT5Zw94yFDOAK
v9n6PnI69K5oO97n/OJKMjx41Nfz6utguZgmx4OwfFQjEBvVAHadfDVrX3qi
KK6le4ePU78XUAL+EMt08/j/4h6VNmdEalf56M1o1m0aZ0cmY9cXD9bfzBlg
4urriBq8vKbHVdekPjlja0Bl9dtnVmC6xtEaqaPf39/W7AAfGIQ27uOLL+Dx
Xa/o6DkCJG6URePtamequMTKVi9lkPNVXOMjbMBDdVZzIrN+ND5cR52jet8d
pzgu6kWd+MqTDbX5WRPzIwVW5yCx77j1jMCb7lpXwJZL5YJaeT7lY/VaoOPc
RKRqdp4/6RXeIdZcVD4qv8oeqNgi/xRJ4IqPTC4gFNIuPSqO0zPitmgwXeeg
ob+2oiFMiCL9d/0tmjvm/k+f44AdkfaLTdzVedRM1mVIoRuzF/+dsQAROZPB
tO2qjtPxkbicR8Qwyu84ulq4YmyBM+esz/92PanhuueLt+34vsf48FQ8beXP
O7Hv0OVJrlwk9+v+xHMPGNlOsEY/RyMuIOsz7Men7/OZIVkUSY9/cMgzdGM6
vadEq3EdBhIsyUAwwVn6e750alkHgF3xHEngIEGc4U2qtjpO7iiaScO4rvIB
EFdZqRSEQlCd41YIOZkVA/hr9nMcp+Mat1Ky3f1J5hkbnpXS1Wqv+3NHgJ9p
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
                 "], "Values" -> None, "DefaultValue" -> -1, "HashFunction" -> 
                Function[{
                  MachineLearning`file152SortedHashAssociation`PackagePrivate`\
keys$}, 
                  Switch[
                  MachineLearning`file152SortedHashAssociation`PackagePrivate`\
keys$, {
                    BlankSequence[String]}, 
                   Data`StringHash[
                   MachineLearning`file152SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file152SortedHashAssociation`\
PackagePrivate`keys$, 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                   
                   Block[{MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                   Blank[List], 
                   Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {12., 0}]], "MissingCode" -> 0, 
             "Version" -> {12., 0}, "ID" -> 7567618247040909227, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]]]]}, 
         "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 3398496960982252545]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4]}, "MissingCode" -> 
             0, "Version" -> {12., 0}, "ID" -> 1300902506986561626, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {4}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12., 0}, "ID" -> 2605288713518276457]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       1 -> 0.6324324324324324, 2 -> 0.17374517374517373`, 3 -> 
        0.11621621621621621`, 4 -> 0.0776061776061776]], "Prior" -> Automatic,
     "Utility" -> 
    SparseArray[
     Automatic, {4, 5}, 0., {
      1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "ClassPriors" -> 
      Association[
       1 -> 0.6319343945972021, 2 -> 0.17559093101784853`, 3 -> 
        0.11625663289917994`, 4 -> 0.07621804148576942], 
      "LogCounts" -> CompressedData["
1:eJzNvXmUX1WVNowMkpCkUnMSwmRaBCNBWwQJEnNBaBQUkEEgSANibKADyBgZ
8gIBGwRFUaCxFUEgGIQ25GU0gomAtDQYwuwb7QZMi7CITScQUYjN9/1R+2at
p9Zezx7OqbL+uetX995zz9lnz2cP7/rcSQfMXH+99db75bvXW2/D//96+vJ/
6T+1683pL98w9jsfmnXP9LE3XTn9kJ/+fvplx4y6c95x6y/B33jd7fbm6c9t
MbLR7uP78h3tN177/vOYB8adt36z31Mvb/6dz76tPmcdD5/r3vXhlTM2XU3n
w8bV7r9/9IJ3nvyLkY3cl+ttVx0/8/H/Xjt9z02evOm8b/1RHVfmp40/eY8t
H/zJbaMbnIe2j2x93nWy5xG+DJ/YePj+bUfe+H/fe+96Kv5F9y2LZzJPwV8r
/Lz0x+bnhad33Wx84S8a/sn/tftsfOQLpemX3Uf6RHy0jsuuVvrC9/B+Fk9w
vchvcB+Fz0Xx69Vz7lox+u1RjdCR8EsmVzT4aOs6f8lG7z15tw2aVd9+/Zfv
2HV0I/vI8PH+5be9ffY7RjTC56N8UYODwE/mifDEceQ34/dW/Gb8YZc9bjpq
rzc2aZDfWenYih/a+0L/Mg4+J/e9+CP3UT/y8sGsfNHw0Dr+MZ8Zd9zR79uo
QTq1vv/6sn2vH93f0+z46gtPn3zXOxvBL4G36H8/3G/LH//4ig1bPQ2/94Hf
/J+vXP7DdwyS0+z78t0on87qB9n9ZXQu9BOdH9I5k6d4XXzxvMWvfH5Eg3zD
Sv9ZuSr4gnxY9k3wBunbis/s+6I/W+milD7F5C7uozaOwEXkj8gjjc9p82D6
mTZP2Z92nwb2jdktUXiVxj+GT7gPuC6Bu8Bb04+YnNHgcNjyKw+78+6NGpRD
aDda9R/5Le/Xto+YfcveZ/yzNn4IP9LohY2j8eOovV36PtNbrXqqtj7BW+39
n99x4YhNV2/QaHiK72v2TVb/ir6PdITzYvA7a/rk+VNOHwx/K35cPG/b6697
z9jm4McWzJw7r6MRfcwq/0U/FDjLelCPqwU/K//S6Ki0fuLFf0bf2vys+4v+
EyZfovhr5d9WuY7vMzhE5+/1L3jhb51XdH1W/K/F/0VfQz0c+Rfet/rrrPit
7YcXrla6s85Pg7+V3zH+ZLVfrHiE9PrVx7f4xqLNulT/gZWetfkJ/sg6rHop
3pd5iD5g1f80OZulb6v8ZPfF7yRyVn4zv45cRf/E50rp77Xte+HPsl6hd82v
5uXb0fnJ/8XfK/xN4Irz9eIPk6ul5cRwyRvN71p6vln+y+yzKH28tP6C506d
uckgfdvKV5F/Zterjc/kC+Ovtb5fSr+J4vONK5acds7ajkb2UeQP6pW18Ls2
PWfpC/2J5x/76+UjPvLOhsG9Fv1714l+SeHnVvq0+p+0eXzhH9busHjnLpW+
rfJZ889nzw+s/D26L9rVKv8P+8MGXzt1/OD1Wf3bsv9evEH/ldW+Z/5cr32w
09/+7LvPX9bXXHLr3Bt2XNXZ3N01Zc3DEzsb8Qtb+XlU/iH+M/0+ar/U4l/s
++y+tl6rXYh6ZZT+a8EH9VsWN+aVR9nnGX4KHWj7IeebyG/k97t2fnHy1KXd
jTwn/FTsgiz9euUHfgftavwenk/g+7Ie5INW+zPLP9BOxeez/pXb5uy/3pqX
u1r7+vil+5yw8KXRDfoFtO/Xjg9gfrKNuo966JnJGzcIL/kt/nzt/Jt9X4uP
k6uc/wj8hJ6Yf6GU3pf1z5SOJ9Xex3NTq/7C7nc99Mj3Tn+8o5XvqK9m4S77
qdmZSBdWee6lDw3OPQeOvvnmy3tbvivztOKfV3/Hc8Xh1k+y8iUbH2z1b1nn
G8UPzY9rPX/L8inGv9EO0uAWlRfaOtn+snNaNh8WD5nlbyz+g8Y3gXxH/QX5
Gsur8K7Haj9E1x+lEy88Nf2HzScrX1E/R3vay0+y+8mu3vhY9hwbj+0nw2M2
P8ansvF3Yn+I/SRxwNFz2+w88T0NfuhX0/6P38XxtHh3q/7C4IR8T8MbVY/b
+xffWPLAiPZ8C+Usi6cppT9b982L39n3h/u+0I8WR+Zdv5d/4nmHdz1e/4dX
X6udn5b9Pub3DTX+WPl8lL9n7QMGP4w/zfIP7/6zcyDhv0KnAg9rfCST7wx/
vPhZW3+Kjh/Vn9n5U9Zuz8JH0xOi+Budn/Yc829ivg3qN1n53soXsNOseBT1
e2b5iRVfxX8rcBP9V/x44r8V/VjTw7TvMHhp/olSfDQLXy1/Qq5aXmAt/mWF
M/oZavFPL/y9+nlWf8/yU/Z9zMuNxgPX4u9RfdhaB0DWj+cLbH3R/O6svR/l
D1H5n/2+8F/h0/g84p8Xf9l7ml1l3Q/2/Yl3/uSNre/obOVMG79qlAdW/QvX
g3UJGHys+Ozd/+z5SDa/MMuPStOjdX6an6G0/cCe99pP+Pypq+4599hzR7V6
JcZLaN+z8qNSciQLh6w9wPTMKH8WfVf4KPp/vedKXvpgfFXy+8UOicYzeecp
v1mcAOM/LE6H0bfo10IPGhy07wv8ZB3C9+X3t2987PfnfKNnkP5ijS/K4l+W
rqxwsNZps8aNyxXzf738pZSdpvnBvPlhUXpl+K3J+6z8yNpXWX5t3Wd2LmXF
kyh9Rd9n97X8fmt8lfgXWNyIFvev0b82L+s+l9p/ybeI7hd7PlqXidk3TL5Z
8xdr49/77lv51IEv9bX6gfzf6vdh9S2z9snx06dPnbpkFJ1HFG6y/yzu28qf
NPhY6Uer96CtD/PXEb9wPG+8sVeO4XOSv+K1/630m40vX/7UnGtXXTSG6h9W
/PfOT1u/7N/Xf/67z4w5tHvQuUQtu8yL59F9Q7890gmDm9hZ2fVhPJaX7kvH
t2l8yEq3Xv177oNbHffMBZ1t3TSr3Jcr5lVoeoRWF030F/QDa3oefkfza5bi
a+z/LG41K9+j89L2p9R3S8kHiX8QOSHnhOi/wLhWr36q0Rfql3jFehxR+GjP
SX1fjKdg8rEUfmPdK82PqI1z77F/OWjcn3qbDRa9+clJT3a2dYDFrmdyP4tf
1vgRDY7Tj9hu5rWvjBlU31XW7c339M4/6i+oRceDnpvw2t6v7De2Pc9HO2HZ
cb+575hFY9R6Aey7IsdZHTn5jfED7DvR/UL9QMMjbd5I35h/j/uv4UHUby1X
wWttHVI376ydF087alFXI/Nl9injD1F4a/pMFg7R+KTs+ZSXLrP5xtr8o/aC
l75K8z8t/zfrX/LCIwoHNr7o3dF5efHUSzdWOz3Kb632uybnS+X7ROHjhUe2
3g+TT4OuA/kPopcJPxU5ivkVpehf6BXzqfE5Ft/40CYrVnQ/29v87zMvLfvo
Nj3NylNOea3vurHqOetwnV9oz2H+MeJBKfvQyhfY/nrhh3YL4vfjM/d78uYF
6/x/zM9SSj566V8bR+iD8Z3o/kjdLU3f9fIXK3+UK9Yj1OL6te9gPUfv973y
t5Z80+6P33T0ote+PK6tC/Gv95x45qwp3e1vBndrfIN1/vh/sb8Qf6x6eRY+
VjqM6ke/+d9DV/3p6o0HrY+da2j6lJd+2PzRb+DVy7L6J/K50uvz8j3v+rX6
2lm+an3fmveHdgjL4/bOPyq/GJ6Xjm8vzd+9/E+TPyx+Rxv/0IMPnfXIx3ta
vzP228S8oLYOJNQljuJf9r7ow944iaGqP3DxnCMvv/2t7ua0/uUbHjlyXX0f
ra4zXmv3Hxuu+1Z5lNXvsvTt5V9e/0zWf+i1T7zvl5LfbHztO5pfXZP3Vn+K
Nb7Eer6tPRfly8NNn9b1s/Pv7Pez8NH4TXQc9nzp+hlsHVn6zOa/WOFcir+W
5uO16YfxLRbnmt1fOYfG+HSM44/aTxtefNRJZ+66Lj6xdH6q137zxl9m6SN7
34tHbH04DsaPyG/JF6wl/0vFybFxRe9n5wCYlyL/l3ra4oeUOpQyblQ/Q78M
4qemF9SSS9p9jL8ReV6qvqnXDh9q/QHjf9h8vf4d8d9Fz981vIrSjzYO/p+d
T1i/X9t+0OqvWd/X/Fil7DfvfJA/PHbh4e+9fWLHIPyxnqNq/bOt6ytl35Wi
3yyfzPLXbL43XjGurDT/Z++z+CKtz4TWnzWK/9r/WZ0B8Vtq+yRwlavQgzX/
qFb9Kdx/jf9k/Vu142cZH8K8nNL8Iet/YM+Viu/T1p21P+T8U/R51OvZ+Nr5
vnV9Wn8TWR/2h8f4Vbb/EheP51TWfo+MvmT9Wj5Olo+x36X814wfRuUTo9+s
/I7aBd7+1No4TL5k9V82Dsu/ra0/a/Qk1633vGCDK949vpWbYi96+3eWsuO8
dFkbfrP/76sXf7y7v7ll9otXvTBlXR6ZxBvW1t+8+otXX8e+z/i8Zj/L/U0O
fHTG/Oe7mylX/XbeDrNHN+Iv1PoWeflBNg6tNP/V9o/Z2Vb6xOeRf2n+HazD
aaXf5c9d/D8/bXpbfJa4U4z/iuL5nf/YNXLNJd0tX3nrtPmbTN5yzKB+5F76
luc+MOLELzx7RXc7T6xLY7XvtX5S4t8RPq7F5UbhY80PqM13re9Z+zxo++Gd
307bf/a+nU7tHPS+te8IXr3+fKt/SXuOwkfRT1r/zoJf/ezcpyc0J3xzxNIN
D+pqdvj105c/s2Vvc/qsR8Z/8IrOBvtbe/Opo3HK1n1g4zA7HfMikG6y+kmt
+F2rHW3FN22ebP4M3++csey+Jx/pbaROhJyPlDofYP4j67mOBiexh7W4WdS/
Gd546wNo+ZJevh7lj7Xz97LjYR8n6/hMf5LvSLy6nIOjvH74tZ/vuv2VXYPk
d7Qfhvc+ixvS1u21P618qfT6GB5k5YOWF8f0bis8Nfyy5i9l71v1gyz9a/OJ
4i+Dk/xm/L22/Zzdr+G274f7fC2LX6x+gFV/YfFLVjhr/o/h2t9S/cNZv7Ba
+JGtH5KNzxW/pVZnq5T81uxY9pvhF+vrtNnNHVf/acG4Zv7ll962ZvfuVk+3
xndl7SOv/zHLbxl+ePkHqw/F5qPFTwo+YH83pMfS+fDW/bLiP4OfVodO3pP6
lVrd6Wz9OK1vUVROlebf1n3Q3vfWLy5NX9jfyGt/WPmD5udi+3b+2ZftdUJH
16D6v1j33ArfKP1F8ejC81Y8cMGarjbeVIN39Pu18UOTTzJvOb+XdbH4V21/
rP50qx/M65/AcaxxAqX5tXd/2fhZ/BL9xZp/ifDS+tta5y/x7NH9jeov2jkc
3vfKt9JyvDb9W/tXa/GrpfwAteoDs/WJXtP2UST9nqL0r32f+T+z/oFs/1e5
anVGtfGxXi7mJSB9yfej53Ne/mc+XxqoP1VLf6qFP2b+qPjtrf4Klnfxf/5+
yc//c96E5utbPHbZgTf3NnKef8mtc2/YcVXnoLoHWf3YKydL7Z9Gtxpc5P9C
V9Z8ouz8vHiVPYe18n3N/pR4EvEDee3fLHzwKvMSvWm/2eesXvqjnvbcSeI3
rX4JK31qcULW9dXCf9YnE+NzvfhRik9G183w00sX2nlydp617rPnJT5lEF1A
nLgXLnKV80Hs/2PtS1H6fIrZKVH+PVzyP6ufZL/H9lH8K6KnY7wq+y76La1w
Q/r2+gm8/NkKDy//Yets60Qp/hA2H9FfsB6BOT51+wuuuXXvjkHxPVn7Kgp/
Tb+1vu/9Pruv4a91HMmL9/JHr38vSv+CP5p9aMVvpmfX5o/ae1n5k/VvsDwt
9j7rH1AKvtpzeL6AcbBZ+Y3559E8Ig1e2Tg07GuUjUvP8kd8v1T8gfZ/r3zz
6mO182ulv8zz/VdvcND87uaZkW/sdeWJXQ3mZXv5l/wf/dZaXo53Paj3aO9p
eaNsn+RaOz/Ry99K81/vOhj/QXiz+Izs+Si7v9/Hnv/Dr7fraySPWc4JvXEZ
jL/U8l9o/joNf0r7L7TfpfTH0vadV35o+R2l5jfc8afMPhC/YK39E/ha/YLe
9UheH9YVRn9MlJ+x+WD9dC1fJApP9rzwNbRrvf2PtXnIeQj6Sa16ibXPcZi/
K/q2wF/sN5ZnrH3v4nnbXn/de8Y26OfT1hfVk9h+aPO22v+19IzS+r0XH3af
OGe9j/9os+aIDS790KNbjmu2uuCMs27evr85Z7ep255xQy+V70i/3u+zeMNs
/kmWX2j815qPyr6bta/YOa4VvzQ7Nusfy+J/lj689GPlG1a+oI0v42L9tyh/
0r6b1c+y+hd73ypPonqkd/9QPmOcKoOn9arpF6X1GwaH2vZHVD/HOE4ND7L+
ndrna1jvSexnq17ntW/xvpzfipxGPZSt59RV95x77Lmj2vMf7Ivh7QdmXQfz
a2t+kdL4weKna9kp1v3P6h/Mf419zfE5ifOSfCaJJxe8qb0/T2x10QVb/agr
LN9K8dcovrPnBZ7R72vx29m4brmK/iJ8oc0rGPB/C98R+xH7bbJ4D6v9qj0n
fd9lvWjfW/NTa8kPjf6s9Retdqnmd8zWh2V2KMJdk49a/l2WPkvdf33ZvteP
7u9ppo079uizn11XL82LH1b+4O2/qs0b+zdb8aqU/4XRN9NH2HeE/2D9YNbH
C/uJ1sIvgX9WXljnl5Vf+B7GD9WKj2ffF/wR+6u1iwfi971wy87Pej6P9XMQ
X9l8kU9n43HwetKoSY++9uSmzRuLtvva1ZP62zplUndHq09ZSl/V4oGQX0X3
Nyo/sn4H6/rZ+1pejvZe6fidbLxMlL+V8h+y+gzo7ymdp5G132Re4jdAfpAd
H8//2nOfAbmp6Y+18Qv7YUXlRza+QPi2No70j5c4TC2PLAofrX8SxstZ6yxE
6TTKD9nz0t8J9UCWL2qFr8hZ1GM0+VvaP1FKT4rKoc2mXXvepBnj2r7w4qeR
vCt2zu2Nv/Pyn6GCS3S+/7z+yKd/d0Z3W/8B/RlZ+4fNC+Pu8btMD8vCzxo/
O1x0Ubo+iHc+wkeiegN7Lkt/2n02X2v8C8b3s/gd7zqs+XPa+9nzRzbvny5/
YcakT3e28lngYT3HKG3/e99n6xd+J/pnbf7szeMqzT80PS+q32N/Hay/HtWP
h4q/aeux4iUb77svvnnc05O7BvX3sfKfoV4/3rf63zV8Qr9OafnN8MnrZ/bS
Qfb8oha/KWWfaftl3b+bz330rq0m9DbbHHj44VMPGtP28bDW57D6AzX9je2P
5LOIXJPzOy1+Ab+P9jurJxvls973rXo5y1+R96Nxiln8Y/oNwh/pXfDN+n2m
L5b2P6L/31sftrb+IPHj2B/Ueq6d1T/Z/ez6s/YVs5MvnLXx7896qKvtO4Vx
5sJnJM+C1V3E70j+eRTObH3v/5e1fQ+u7m79AnLeh3476zkKXrX6+Vb55o2v
9NoXWr5qqbjZbHwTg7P1vje/Wt7D+rv4HWv/odJyUX7fveS2S+d/fnzzsRmf
//G7z+xpJt75kze2vqOzkb7WrE/UcPv3sH+o93w0C09WH622fCqdnx2VTxrc
Nb2otP6tzm8gPkDks5wzsL5mbHz2/1L9R7R9ts6L7R87X8O6MRq/z+pjWf5m
5XfR72nrjup3eM6q2eVRPIjyB6/8Z/YHi19g88j2k63NX7Aeg7VeglzxfMW7
H9p65f9sf0rF11j9P8z+936XxaNhfaVSeTfW56z4q82nFP5G46u1emGanGP+
gSz+eOd/f8dBr835S28jdchFH0e/h9UOiMbfac+Vyo/T7gvcWRx4Vn5Ez7eY
PT9h3wOWzRrXva5+N6lHGqVbK7/1jlNb/tT2b2Xxm/pPBuiQxelp77f9IKEe
uVeeanDU6h3ie7X4V5QetXVp8bdZ/Nbsb7QbNP1IW1c2Pj/bv8iqv9bSo6J+
qVJ0PlT8I8qfs/zb6j+I+neQThAfvfWnsuuz8i25Sh6AnE8KPBi9W/mW6OdY
B72UfsL2K52/p5yDRvO+2PPeenBW/V6br2bPROU1PqfF+Zay47Px41b9Rc59
0K+Yrf+exU/pBy9x6l76yvLXLH6yebA6Chr8NbvIC+eVD6+ZdP8DnYP4IfMv
W/PoasdfR+u7sau8J3jX5kEOyA9r/IWVftX9mfPvu++0dnwjdVpP61++4ZEj
O5tpX/3Ego3+baw57zTK90S+sXr22rhMP2fnc2x+tfMbvPLZe1/zP1njb9k6
8f9e/2VWvljnVStOvLR88upfKK9YPRbvutFPjvsi5+Jz9rxq6fzpnQ3W7ylt
/2j4tsu8vRbe9JveRuIF5f/iF8M6Q976/kx/0vDe6x/0xh9G4wtK6Te/fHPf
G69Y3d98/vs/mvzqwu4W7lo8vJUerfTA+L/4tYea/5R6DvNa8bmzdj/w9Y+O
7m7rCqHexvoQsXl1fvngW0f8y4Q2rlXO43699vl/OrK7t2HjMDuayX3RRzQ/
l9RRwroHXn4d5e/WdWrjZs+f2fvHL93nhIUvjVbhw/hNlj8I3mBehBUfD/nc
wx0jbxvfrFz/mvs/+NveZvr4qft9/597m1M+vPDVfW7spPjH5AiDH4tPZN+n
8oPYZ0xuZ/NwGNxOn/XI+A9eMbhPJeajRPHDqn9o/Ji9z+KurfpXKTkQPX/R
+KU1DyIK/ygdWeVnNj6ydv/AKNys69f062hchBe+WfnC6N+LX9a+dnLV8u2s
+8boJGt/e/kc/l/rnyDPY31x73kJ849o/dOi+4vvYd8zLxyZv8Ga/xPV31hf
bHZ+y/ZHs6Ot9K/xR2tfPYavWf4q/nd8HvPErXRTOr69PX8z1ncb6vhKLb7f
Kj9Kx18wfuaNg8rWT87K0ax9X/v9rHxi+pO1Dl90fce9+9gv3n9eX3v+Mf2I
7WZe+8rgPN9o/Jx3foyeWb6G9/ta31nreqz8O6snR9fJ5sf6Q0Xx05rfV5ue
rfG/7HtZey76vlW+RuUs2x/cX82/Gd1X1A9xXmxdy5+ac+2qi8YMyr/Vxvfi
t9R/EzmPde2i+FCLf3qf0/zTXrzKyk/tubaeg3LOo/EZ6/zZc/i9aJ1bjZ7Z
udMmBz46Y/7z3Sp/xr5l3nPW0vY9Xpl/lY3H5PPx06dPnbpkVJvfPqj+cpI+
vXapl66j8Jf30C4qnb9ovd/6o411V6zwY+/J+ZToq1jnrfS+ZfFCW58m57P7
M+1T1zy31ZTeRs6h5HrW9Mnzp5w+cpBfwwsfgbPWJ6K2/KP+UZJ3IXU95Dfr
N4/7jnWIcd7Mrnhxo7d3//qGPW18hNQ/9dbp1eAm42n4FvVfRemayWmN/9fK
I2D1S7z+Dc0vWQp+uC9Z+mDnwFG7qNQ+We3yWv4Jpr9InWLhA6JPs7ygLP1Y
xxM8sdorg9bP6i9A/XHvvmf1pKz/MfpdK/7t+r6ZR77rhvGN1KkTfRXzdqx+
Ja//ic0f+11hHhzK9+x5o/c+7p+1DxOe67L9jdq52fWi3Wa139AerYUfFC4D
eIznZPLd6372/bPHXNDfxqeKn1n8SqKfSN8ZPIfH/t7e+qsyHsp5jY9q50va
dxh85/ZfdumYrSc02GfH2t+O7Us2fyjL/7J+D+t4pfWQ0vawZsex97P9i7Pr
zurVqO94/SnWPhfW+XvhVYp/a/dZ/SSWL7Dq1L+/uf+Ccc1XH9/iG4s262q+
8A9rd1i8c1ebJ2St72ylS1wv9tdFemP6MasbzeztaH1Jb91hDS92+PXTlz+z
5bp4V8kXw7ifKP9l77P4n1L8Mzuu169gvZ89P2R4wM6vWP5l1v6Iym/km9o8
Rv/vIR37Hbt5c+9zI7ef+93+Zs++KX/+8WH9zTsOvmn2kpe7Gw1OCB/v/st9
rd9GNB6L4QezH/D+Zjd3XP2nBeOai+dte/117xnb9h0Su4jNQ84dNf0S44MY
vBh/jvIRq/z08lHE32y+3SD6IPIF+4pZ/UbW59AOZv3msvwuy5+9z1vzL6Lr
EnmJ+GFdb1aOWONQvPC35s8w/i7xl62fxVgnKkpvpfc3i7+l7Rtv/AejG/Q3
ef0DbP4s3p7d1/bfao+x+1g/tPb+WZ/32pulvl+LHrR5Sl0j0TNYvfbS88X4
QC9/RvrT6rsxOyy6f1590gu/0vGNtfy17HtWfRqv1vos0f6D0fxG6zq88VJ4
veTWuTfsuGpdfrSc74j9IPQrdgDyLaYPZc+ns/49zU9l1U9Y/IB3fsx+wvuo
v2OfO689ht857r9u3Wbkf/W1/vy2HsaAXldbPtbWry5Yr2/9e2Z1t/at4LWc
42T9X9l5SvyvRkd7Lv7Vfhtvsu786e4zvvPEou93DeqHXZq+StmHpfh9dByr
f6JUvlEt+c/4m4Y/te0nqx0ZlZ/Y58nb35Pdl7g15LOl8BfzJHE/5fv4f2sf
NgZ/q/3jHT+K30hXVvh66dvLv9i4teyULH9l+yN1fbRzAm/8hpePZf1zTL6J
PqTpo5tNu/a8STPGNVKHROI05PwL6xRi/KpVfmrrZeczDB+Qvwu8cN1RvLTy
99LyXa7Z+i/MPmP8gM0P8xfYfuO4GCej7W9p/mrdl6z+mM2fs+KHNk+t7on8
XrbV5D9u/seJzVlLfzhv9bH9ze//pm/Jbo/2NGIXMDmRlU8ML6W/vcShIT8e
rvo01vetcVFMPtSKf7bGT0bpqzT/Zb+j8jm6v2zdbL+lP2wp/obPj1vxxKV7
HdfTTLnqt/N2mD26WfXt13/5jl1Ht/HsteVjlr9Z8Slq32bnl11/qfN07Tnx
46B+hPl8Wf1ce1/y9lj/7Cj9if6g8c3S++fFC698wOu/3nPimbOmdLf5Y+Kn
k30TOmZ6GFtPFF6YX+6lw6HKP9OeZ9/P5kNo70flK9MncDxr/yFtfgw/BR+Z
n03rY2T1P2p8M6rfWPcxq8dYx43yP61uqPwuhX9RPY3Vj4vyUQY/K9/1xt9Z
v+PFa69c9a7T+v+htpfYeFttvEXHoof6m7vPG/vs/p9bF58tfrvs+W5WPlvt
f81etcbvl7JD8DfrR9v2TSnMH7x0osklrAuk6SfZflGafiP+kltmv3jVC1M6
m2XH/ea+Yxat61Pm5Wt4ZXUCsudTAp/2/HeAruQ9jA/y7pfEXUfpS/zPoudi
vmC07n5UXkTxR3se40W887b64aP6xS9eP/CLv7x5YvPURjfsuMsP+ptHNn7k
1C+e2dtIXQtNjrK6Nrh+tENRf2DrQjvQSneCX5qekpUfVv1Ti3fU5sPgm/Wz
IN8rzfejfo2/tvvRfhjZ+WhxW979Y/1lS8/fy09l/hofkPtMzmvje/m6t45o
LfvKOn/v/nnxPht/6KUvvGrxKZo/wssXsT6Rt58z6wdT2z5h473wyofe+NEW
PY30cZJzf9HbatuD2fhwa36bpk+w8aU/FOr1om8gfg11nU3md8nar958LsYv
o3pJNH7PCi/tecmP99K1FX4anKx+Zyv/1O5jfTstH8pKX0y+ZvmvJgcYfpbW
i638pzZ+yvka8h+Zl+QntHWpCP5k6UujEw0vNf+1Nf/ASw+a/0R7T/AP60HI
9f+dc2THnCd7Wvkg9fWZ393KJzR4yPW7L7553NOTu9q+oG3/Z6VepxV/rXCU
PAix3731ebE/scxfq1uP70u8orUeXxZftPtZ/1DU3rDKFav+6Z0vsz+z+hvz
62T7c9fm74yuo3CXK6vfna3vzd6T/dHoVYvf1+DD6oh49VDNr4jfQ/qwykVv
XWT8P+tvnKUflB/e9638G+WojCt1MbGeDdZfqcWfRR5F7Rf2nBb/IlexHzQ4
Wb8Tnac3vt57/4Rvjli64UFd7T7i+phf20ofmh1Zyz9tvW/tfxDd1yz9s3G0
+k3e+Wn74z0vzMKHnWvjc1n+J+e+mAeu1QX0rs9avyw6vrW+YBROGt2jvRKd
n9X/UVtPj9K71W/B+I92TlKqPkAUHln9s7b/xGs/afqjin8D9fiQL2hx/9H5
auuO4k/U/+ftm1RKv43eZ/OR+gNa/lFt/JR4N5bHGf0+s6+y8NXqu+N9La65
Nn+I5ldZ/Sml/Pja+Kz+Zm39lz3njVfHK/oTS5+f1r6vnUdb8c06fvT9bP6R
l9/j98QPIPax1l9FG1/8S9n1Re0zqSer+bHZd634rOn5KBfw/e3vXvKLf91x
XPPM7NWn7/GfXc3Cwy+atPLtzgbPNTFOGe1aDY4SPxTlP3jF72b5u8SzevPO
5CrnC1L3ANcl8vnCWRv//qyHupobVyw57Zy1He15W2l/uxcOWfz35g+x9clv
a30aVhenxVeQs9b9XXnKKa/1XTe2rXslcTBWPJT4eHxe6sbJOtk5ifZ/b53P
KD+3yu8sfnrpzzp+Lf9abf8i9l+Kjq/Bk/n/s/OXfpN4DmvVb5gfyIsnOE40
L1WTY3jV9DkrXFn8f2n/aBa/onTq1Xe8fCS6Pq/dN9T2Ryk+Fx3Hqr9ocGR9
q0v7u/A5ln+U/R7WG/XaqVH7wwo/tDuxDgOL07HKP20+pe1Ptj7tvL82fWbj
qKJ8dt7bGz/98LF9rd4qfkrsS1KLr1j1eC/deuP/vPslz4n+oeXHZuGUlW9Z
/TNbf+w7n5y/03/ss2Wz78KPzbrvI5s2y8fuOrr/gPHNDyddv3SDx/sb9n05
58B4j1L1h7zr0/hGlK6t+yt9yL3+DawzjVctD1bui38mCmfZPy0Om70fre9i
Hb+UXlrKPsD72M+hFHys77P4J/FforzQ4ihwHGv+sbYu5r+N0p3Mn8VHZOMf
avsvtP2zwoGdv5eCc3Ycbbyh0h9rvZ/le6y+p1bn1upHqK0fi9zX/Bze82Pv
96WfKvrvMa+j1Pe99s9Z0yfPn3L6yDafEOMx2HdZnWOmR2v1PaL8RuO/2nhY
/zfaf0+DT6n6wV54lOafjL6i7wtfEf9tFD6l+AU+V0o/0vBAqx9Zej21xpfz
Jzl/xnoItc5vSr3P4mPY/Fl8p/SBEfiIPiV83yu/S+2f/F/Op1HPKxW/g34+
5EsM/oJf2F9E7mv93a3zK3W+EcXLob6v2fF/LfPT8If595Eeo/yx1L4jfmXj
raJ+IK2/W7H4xgF/r9Z3TvM3WeN72fdFf5TvM3+BdXw8r8A4Cuu8tfjBUvGz
WfwsZZ9q/Ln2+qL2r1evq8XfRf6KfxbxjvmnJK5O7EuRl954C+3/DN/Z/1kc
JYMz688iV9GzUB5443+9+lVt/Ciln2v3xb+v5c9m5xOVW6Xkb3b/mP8y63+z
xutG15/Nm0N5qs3TmvfF7C98764TDzn5I38YHD+hzYfRO1uvlx/ge97v3/+p
Eeu/eV73oPoh1rhLq9zS4o+xf0Nt/wO+h3XehN/LvO7umrLm4YmdrXzT+q15
+Y9cRb5q+itbZ7a+HuMnjD9m+795+xPg+r7a+R//dPq/b9lMO23tT9b72abN
77626d/O/N8Jzcrd7j5p8yPGqX5h6/dkf7S4Sqy7WFqelxpPg3vW/6P931oX
Nusf0OK65D7rb4rn+sgHs/J1qPS9KP0xO0TimwVOAh8GV6t9mcW/qJ7ojU/U
xpF6Z1E+2nX3e8cfc3RXa5+LHIzmseP3tPocMl577jawv1jPR/Rz8SN4418Y
f5f4M/SjeNfN+Ij2nsR/sLq5UfyV/Bp2zleK73rvZ79D8/+d9YK9fITJkej5
Z2n7rtb4VvuhFv6w+Gn2vpy7anrkcPc3tcZXRuEr53AYb6bVk/PCl73P8rIl
v1Pza2froD9wx+ZH37J8Xf1Q8UNKXVeRD6hP4fc1PJHxcN7W+Oqzdl487ahF
Xa1fE+GQ7X/A9BcG12z9Le/5R+n4tGieOI6v+T3Y+Fa8bfUjY174UPEPq36i
zSPqr7LeZ/HvLC4uG1/rjW/32mNW/Inq79b4D22+LP7Muo9anVDRn3E+8pzI
D9lnzHfN2mFW/V6j51L6Vy36Zs+j/cbqCeF4eG6FdMji4jT8svKRroce+d7p
j3cMqr9fSz+utb/a87e+tPGsm8/ub0758MJX97mxc1CemtCHxrclPtb6/ey6
8P+Y36npi7Xgi3Vl5HmZlxb/6fUfRu/Xxk82D/ae8Fvx38g5hpYfyfKU8XsC
fxwP+YNV3/bez+4v+jE1/LfCw0uXKIe88qTU81n6jfof2Pey9gPDGzYv7XzP
qp+Vir+3wier5+F1wr4HLJs1rrt59Zy7Vox+e1TrpxW9oLb+lLWPS+F3qf3D
90rhhzc+ynq/tHzD7+G5R3ZeUT201n3JPxb5K1fhK6jfWP2dVjpn82PftdJn
lP+LX80ar1d6f9Yetv+3pu/cPUh/9MqR6Pty1fx4bHzhx8z+Y/DH/qHW+gBZ
/sfua/FppfA/u7/Z/N+s/pbtL1hqf718KTpelD9F30e+aI3zkSvzv3ntidLy
Lat/ZL+P/kF2nuRdP6u/laX/6P3S+W3Z+UftMy2+A/U9az5AtE5jrfWzOhrR
eeF6tfsPPXj/tPPf09tIHLLU1bXWDypVv1PTBzC/VPybbR/GAb3GG+dphY/3
XMU6rnV86l8a0P+1/tzR/bPmr0lfHqyrgHUgrHCz+hvkivXFsD+nnPOLH1Hs
I3lO5IM2T+avtPYfiN7PyqdS8k3e89aPsJ4v4v5l5Z71/6wucHZ9LM5G7gu/
FXxmcReI/8gH5T7r82r1b2pxo6XwO+tfiPJhNj6TK/Mvv/S2Nbt3N9KnTPhJ
qfxX2V88/8C8XbZvGj4z/nXvsX85aNyfepspV/123g6zR7f8c+KdP3lj6zs6
zfUv2To1ONWOz5N1yTkx+jmi/lH0L2j0Zh1fy2/C+ziPUvpZVD+K7o+V/961
1el3vmtGXyNxQAccuv+ImV8a26BeEMXPrHxHPZrhfWn7W/R66UeC5+wSvyhx
onLuws4tNfz00r3khyO/zPZXb68DcRBML9a+g/VXtH5speQXkxu43lb+A7ys
cW1efwheMb9JwwNmZ0TlBhtPq9OE+qyV73j5GfrP0W9h5YNsvVp/FjlXFTiI
HZSNe5Tfl/xixh9G/qyveec+E9/5oT/0NtO++okFG/3b2IbVZS0F7yz9Yf90
vC/9CXHfrPJJ8n+x/1a2H4mVfrz+O2+8bu3zcTbeWbsf+PpHR3c3Escm+q7I
PVa/zxtf6/X/MX+j6J9anjr7nqxP1q/ZBVH+LvMRfBU8ts6PfY89L/3URC9p
52O0j9m+Ze0Hmj+R1B+z8IvOX3vP2mdLu+/VE8X/K3q9xCNrdTO0dWXhhHpV
Kf6oxWcInK/fbdnq3x8zofnNertse8bu/c3ff2DxHrMf723uPm/ss/t/rtMs
X6PzY+/v/u17z/nu2V2D9gHj8YUOxH+A53Ha+Fn7X/R/bxykph966TMrH63+
d5EDzG7S5lerf5kVvppezN4X+xH1KlY3R64iN5lfrZSdgv9fuPk7Z17dv1lz
9+JDb/n27X0tfUtcpBX/S9VX8vJNK/5G/Y/CH/E8SvSlLP/I+oc0eSzjYn1K
5rfT8iCi+6vJFa9/k+2vNj+2v951Zf0IXn6G+dNR/q59p9b5oZcvsHFY/GB0
X6J+ESv+lNL7mL9Ie/+7L7553NOT1+V3Cz55+85a9ZYWrgP7NdzxyZqeh/q9
wNXbv4ndx/rzXvwcKvyK3s/ur8jRqH9A3vf6fUvN/9CDD531yMd7BvnntPfx
Po27GrAfxN7U8gKz/tuoH1TmkdXjovoty19j/Az9OVrcUTT/RMv3lfdEv9T6
wmTzT7N6FqvjdH/HQa/N+UtvI3FgEn8g+cDCX637ivOw+jei69P2OcoXtHhq
7RyWzVviHLx5ydp8vPBhzzF/YGn7Pav/Zu0N7/q838+O79W3reNrcNb6H2Tj
0kvhj1Z3F8+Na+Hffzy626/uWdTb+gmE3wufZPOX5zW72UqHUfzS5NdQ5U95
7S8vfyzFn7zxnUMFH63uiNyX+Jso37LGh7O8WOyDGPUDevEf7T6Eq9efXXp/
ZV5yRXvJav+iPuXFn+j6WHyL933Mu/DCGZ8T/z3Gi5TOX9L4dlZ/9dpVtfQn
rxyyjr/y4TWT7n+gs8H5Wu0Dq74fpWf2vMTv4Lmjxlei+xPlT+z50v1v3esc
8H9odlmWv5aCn8xL5Bfry23dXxZnIvbhT5e/MGPSp9fZidb4Oqv+rOXHZPmP
5Edp/ee99iW+r9X1s65f5uWN08TnmF6qjeOFt/bd6P5795PNH+9L/uclt869
YcdVnc3v/6ZvyW6P9tC6Z6X4M3tO4htE78J+c1b4e+Nda9ktxfjywBXjh1Df
xH1EPrLq26//8h27jh6UP1ZK/6p9/pQdl9Gp9Vwzqicwu85rf5fGRy3fwarH
ffL8j1//y+/2NXIOeuOKJaeds7ajEbyz5jvU0q+y/Mtq/0X3L1v/W/Q3qz3t
xZfa/h3M1/b6lxh9in8E+abAnfmPJK9KWw/bX/H/RPkue07i2/A5azxkdv+y
+UUYf4P3JX9D0we+N/WgfU5Zu2lz98M/eHPbffublz9z9tId9uptpo7Ze9eP
/3Zd/Kw2D6nvLPgh+yl6OetzJfq1+Dei+MvwK5qfkMUv6/w0OLHzPi99D/X6
mZ0pcdqIP0J/LD+/FP0h3XvzILX4naz/jNEP6h3IpyWuSvRgr72W1V+jeIbw
w/7b3nGt64zmn7P5R+HM4Cv+Ydx/jGfV6KY2/5C8JMbfrPSJ39XiUkrht3V/
tHVpcdgaHL32rdW+8db1LHW/dPw4XqWeOuaht37sOfuvt+blrkHxS9Z6Yln5
zvo0av6/qH5RK69LG1f6MwkfwnpbWTiy90TPxDi77PdL6Z/s/vitVx9/9Zc6
GtGj8TyO2cfZ/ZV6cZKHZq33Woo+svmBWTuwlv/CSofe+Gkrf/Lyjyh8svqf
tf+t2Im14mc0eGn5chpfxKvY0ai/It54/Yzyf4nfRz9+LX6B9zX7Lsp/8bkn
trrogq1+1NXKd/HXIzy1OnlW+ova14xucB74W/AA4xSt/COrX1nrw2Xhw+Cf
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
qf1j/Qe0+IZa+mdtfSYKH7xqdgmOVyq/mfmR2P5p41npR9OXasfXaPDU7Dnv
+JI3JHlUordofBd/S31QgYPkr2rnVjivrH6J9Bn1I0XlC/N3CTy157Lnnwxu
te232vnl7P3a/T+y45fi29799cqnWva/1z826HnoH5/tL4y/sV8C89dl8aB0
PDbLf/KOVwovrfvD9EuML/byNQbvoeKPGjxqnX+Knqbdj9YH9M6f1d/R6s/K
cxg/4OVXtflXqXERX7GumUZXDA5Z/ZvVj2PrxLquOK+5ex9x5zlf7mv76Uq9
XPG7sO/J+avWJyFLX7XoU/4v+SnW82evPLHa/5r/DsfFfWT8W+KnrfyhtH7E
7Ly0/UHWz8ZB/xzuh5X/avTO8EfwT8WbAf0L7WivH8O7f/J91r+bjV+K/jV+
q8Xdlj4f197L8q9s/VPJN9HuW+NPvPzBun6rf0Y77xJ61OLrS/vP8bfEt2Oc
t8zLa1977Q+2Hq9/GfGB0ddRaw9+8OxJ3Q32oWH6bSn69+5XqXGs+1p7/7Ln
y2x+eP6P+CDxC5p9bj3H0+Yh3xc5iPV7o/llWTrzyiUr/tfy8+AV6zx45zdU
9p3oF1hflNntpb4f1S/lPbGPRc5p+cQMflH9iclXL9/y7u/Fc468/Pa3ugfR
P+ZrDvX+RfNvmT4/6Dqgn0f5SjTeW67Z+FeWP+zFT3xO6h21/e6hTqCX33jp
IytfS+m3VvzA9zT4evlLFD6l6bP0b6YnWPMPtLhW5gfYY9U2x774x57mzn/s
Grnmku7Geh5qhSPzJ1jxS5sH5l945YPE3Yn+JnYB1mPV7DxWvzhKP1b9TPgT
6r/W/Rvu/Kls/dLs97U6LW2cG6n/wcZnfZTNclpZzzYHHn741IPGtHiL+Cr1
XJE+sn1dWvkx4sQvPHtFd9s3AuFZG/+zdnBpu0Xz72Xnx/irFtez35YvnP76
K/0tXiC/sq6vlP1Zej+y/kd2f8OLjzrpzF1HNehHZvpN1M/D8nu9+yV2hDZP
Vp8f/W/WvE25Mv/KnTOW3ffkI72tvBU5LPD20rvXbyLf0friltY/8Tfm1+Bz
zL/J8ruw7iyOz+QT5f/iNyD1y9n/8TuCD/d/fM/zdhzR1xz3X7duM/K/+to4
wxtXLDntnLUd4XOdUve18wl5T9ahrb92fkmUbzP/uMyb7UOWftg8svpFtK5O
KfzB/CV876fLX5gx6dOdrV8Z6U3y9tEfIevD/kdYXwXn47XPSuUvMz9llD6s
eYDe75WmP+053C+EN6Of5dtfcM2te3e09OPtL1RqHdH7pfTzqP7F5K+3/m9p
/q6dJ8tzTD/Q1iHvY3xoVr5o8LTCS4O/Joez5y+18dj7/Wh9eev3EP+z/L3W
ffm/FscgvyVvE/NJrPqY8E/sJ8Xy4OVqzU+L+jGs+1mK3rz2FcMfLT5Xru87
+sHjv/6p7kHxnKyuCvOnozzU1p09X8nWh2L4w/CZzY/lL2bpt3b8LIPv8rG7
ju4/YHyz9pgLv7Zow95m4eEXTVr5dmfb5wrtfYY/Xn0j2nfZywdLwdeLP8z/
xdaZnb/YP6inyLwOOHT/ETO/NJbqP6Xllbb/Vr9IVE7gVfP/lMK3UvZv9DtR
vd7KP5ieNX7r1cdf/aXB/Z1Erog/E+OCsnELUXz0jv/WafM3mbzlmEF+b2te
f6n8VO//rfiTre/G8o+iep1c2XlNtK64XKU+pBfvGfxL8S+hL4Gz8Pks3yh1
3/qcJge0ukWl8MeqP2nnWozOsS5QKf7l5ZPa+Mxf5n3fuy6Mr8J+IJJ/pulL
GG+G88e+z174iP3F8FMbV/YH+7ezOFLcDxbXn6U/9pyGv7Jf4mdo5TrEWzD6
0vJDRD/APEdr3Xarf8/LJ0vrf5p9lbWfa/N3oV+cN/Yx0PgCw//DH/7wpzf4
dE9z14mHnPyRP4xtpF+Chnde/oV0jPIm219ZO1+R72D/TPme5CNF96eUf4bV
na5VP94qL4db/8/ajaX0K/a8FkcRxatS9lcWT9j7Ql/Ch4RvWPtzloK/lT4H
vT8QN4j8Td773oOLzz9kTE/r/xW+sfLhNZPuf6Bz0H6Xwj/5/0mjJj362pOb
Nh2nf+nBS7bob0745oilGx7U1Tz82s933f7KLhr3i3oR3hc/JIvDitI9kxfZ
79SOn9Dqg0bnj89j/0s8H2d1LqP9w6N8exB84PwXn2f7k8WPrHwQPhU9R8/a
x+i3Y/kK0fVl6Vi7P+1T1zy31ZR1/TsknlHy6rP+LcaPvPUx8LfEr3v7dVvP
wbPwZeeTte0XRhfR+EGv/6y0f8fKX7B/puCL/L+2/Vd6fdF44ax9kO0vo9mL
0veljd8e8IuIXJV4XbmP9uwts1+86oUpna19LfQmefWl5KR2n+VBsPpDzL4b
KvzSvmetj2S9711fdFzrc1H5FvV3Wa9e/lxLfrH3svVnkK9ofVSj+58930J7
0ovP2f6I0Xrx1n0X/il2ZOuXJHkfcj1hp/93/tymZ1DdZdEfo/qJXGU8jU7b
OoVK/khp/Pf6T7P8rzR/944jeIH7ZI23Z/5t9lujH1mX2CuIH/LeJbfOvWHH
VZ3q99F/5N2/45fuc8LCl0a3/T2kH53Uk4zKjVL4k83fzn4/yr9R/tWSb6X5
RHZ/vfTB4NP20R2g12h+IoN/FM5ZuP/3jJc+uctufW3fSLT3atMXi9vJ0ieD
A/OPs/zxrH8Hz+HQDsN4hex6h4r/WO8LvuE5OpNbpeaF5zRePjnc+gt7nq2L
+f2y6/Pyda9/5qnHr3jmm9e+qxnfs99DN/5p82br75104isvTmxuOvXUpW9/
ZdP2vMpaZ9A7/7N2P/D1j47uHhQfaK3v8NFvnn/Bpcvf09y7wZ9/9tyUdzdn
H3XpNZ2H/U2z9zYb3HDtdZMo/7XGt2v4lo0f1Op2R/Ea/x893ynFH6z8W6Oj
rPxifEKzI7L1kKz7iHX6vPyNxRd6x7Xet8JD65ss95c/NefaVReNUfET+7Bp
fci0+Yh/AeMY23GVPobt+Snpv1nKPo7C16unMH++V34g/aL/xoqX4ocXv41V
nqL+i9/F/WP8PErv2ntMXvYcOPrmmy/vbc8L5BzUGl/G/AZCX9p8Sq0Pf7P9
k/s4/9L+s9rxl9k431L07d0/q1852/+ylPzW6Ffr/ytX6aci9jnGJVvzJaNy
MWt/WONfZD0sH1b7jrb+0v3fND4QhQ/bt9b/RPp3oF6B8WxsPsj/rPLPGn9v
tT+8eIr9urU+D1H7ltFFbf6H8dty1egEx2NxqBL3jvylmP9owmt7v7Lf2Fa/
Ev1A5i/1HbR682x8a5xtdP5W/pX1G3ntsij/0viGlc8Ntfxn8W3Mf1wq/jq6
DmsfKM1vxK6af8SK31gfD+Ep53+PXXj4e2+f2NFgPlwWnl4+GtX/NTyh9TNB
jnjxk9V3Z/HNwhdr+ae1ulUMf/F9tp8aHErxD5EDWJ8P+SbyA5a3ktX/vXxu
qOUXe3/aVz+xYKN/GzuIP5SaXxYu1vN5Te/U6nBb5y/0KXDW6kBm5ZsVL5h8
ieJvFN+HSr/WnmfwY/oj47ul9E5tfLH/tfxzBs9s/j7DY6tdF+X3Q+Vf1u6f
tfPiaUct6mrP4bV6AdHxrfSg+bmj+UFR/07p/BwZT+QwntNm+T87d5H4+Fry
i92X+j5iF7N+JnK11tW16v/IX+T7Eo+n1Tlg/b29+Ym4rwgPoUOsF6+Nw/T2
4e5/wp6z6p/acwz+Wj0frLPA5o11Gqz0xOzXbPxidv+89RfYPL3nlVb80NaF
cXz43Pv/ZW3fg6u7W/8b5gfV5n9WeGX333qO5tXf2f5q3xW5JHHO2nkO+oWs
/I3N0yrfcP7e883S55fafmAeOcI5yyei87XGMUb509d//rvPjDm0u83zw/O0
Uv4JKx5pfjovvUf5MY5vPc/QvmP9HvOPsz4C0f2XvCGxS0758MJX97lxXT5S
dnwmZ6xyqNR+lqbX0vRuxassvLN0K781+0eugk/YV9uaH8DyB631tbXvSLyV
FneVlT+3/vn6rm2u7mnp6uDHFsycO69jUH8sjf6t52vaOs8/+7K9TuhY539g
ccz4PuYlWvfFCycm56J+aLZ/WrxeNq4Jx9f2uZT9jfvq7Q+oyZva/NVq32vy
XegI41WGyv/C4MP6i3nlHdK5xD9IHy+Jm5S6lEj3pdfP4uOyeMb2Ec9PvOuh
6zPWQbXCDf+/ctHXjt12QW+D/eJL6bPe+UTH8e5b6flF40s0e9TL//F73r4A
2ny186VS9l8Uv7z2TZR/ZOvjMvmPeimrx5alB00+sHNmfC8q3730mbVPhsv/
J1fpH6L1wc3ydaufRJsn5oVjv19Gz2K31Npfdv/Vc+5aMfrtUY1Wx5y9n83P
Y3TC7Bz2/az8xXo6XvgwP5nUmxY7QOaj5f1ofMS6PsTL2vWFWf66FT+scZGl
+bvXHkE4a/XL5L7QXbR/GJOv0b4oOE/0KyP+sDpHDL6M/jU8z/J/8Zu2dZwH
6E7sr+z4WH8J6Zy9n62/JfQneCa/Md8xuj6GdyLf2nUM1AsSOSn2riY3a8s/
q9+o1DmKNm7UX4X9v73nc9488dJ+Q2a3afkvpfAj6v+xzqdU37da6y9tP2jz
0+JjrfujxTFY90fkJOsX5sUPqY8v5wLib/f29YzqKbXrJ4l9oPkxovgh89b6
uwwVftemL/ac1b/l3bfo/L36tDW/VuvDwPJjGJyscjMKf/Tr4vdwXZreG7V/
GB9h8POuG/8v68fvePUMbXyvH8f7Hcbn2XhR+FqfW72i74iTn+hqplz123k7
zF5XB1M71yzND9nzIndZnGaUv7JxsvxB6EezUzX+6u0/pX1f8jdkHeIPYHLO
yteyfRiGW380629GfxjexzqKXjwsdW7oxRu5frtz/Tv+41vjm789ZNtHX3ip
p5k+fup+3//n3mb0+1eueeu8HlrPrrR+FIWPVV+x9kmQ3+I/wDoqcn+XPW46
aq83NlHrmQqf1c4BpK4RnsOjPYNyLJqvFcUvhB/OQ6sTn5UPQ62fW/VVrx7L
8DUq59l76I+T73rjVgX/kZ+i/ll6f7L8ke0TO19m/Vlr+e2s72nxY9Zxa8O/
lvxgeGeVJ9bva89l+4duePFRJ52566hB9Gn1H5WyjzT7k42L8U/4nna/lHzI
0pF3/NLxC974OBwP4/6z9MXshdL7kLVvUQ+K5oWw/Ym+bz0/Z/JTk9el5Gt0
39l9rLvl5ZfMPs/Wt6jlF7KOj89n8c0rF9j8RD6hni9XzFPI8tfS+C3+EGuc
jYZ/Wvyw93dp/JH8WvFDtfbqQL1gRndZ/YWNl90/pn9b34/qoQJXTc5Y/U9M
z7KuvxRfsn7vqLUHP3j2pO7Wryj0IPT03RffPO7pyV1tfcc2v2AAbpI/KHEa
1roKTJ5b1+nNX8Zxaue3ZOmH0UOW/5fqL+wd3yq/vPwJ3xP5Jn5clHOl9Hdt
PQ/csfnRtyzvacSPL34Wa9xr9vyJzRPPB5EurPoh9hHInqta6Zu9f/z06VOn
LhnVxlUIX4r2jWDP4bpFf9L6ObL96br7veOPObqrQTtQ7uP5EKtf6KVDtm6J
P9bq/1jhpu1Hdn8Qf7z6BcZ1euOPtPVY4ZPt72qtA8XGjfoHhM9hHaZofxm8
L/UlRS9h/VE0+Gh5s5p+Ks/JdzU7wopfjJ9k/Yfa/2X+or8Jnlv7x2rzLcW/
h1s/wn30ykf2PTlflN/Z/iRR/2j0fIc9763zrL0flU/e9ZXCl1L4reGfhi94
FTrW+lCWmh+DV1SOR/EZvx+18yR+Vct7qA0/b30E/P85u03d9owbeptnRr6x
15UndrV5HGKHZO0rhk+l4xe8+DvUdIzPYfxnafwQPyDG/bV9WJL501Y/Ti38
1+LTrPDMyjev3Yf/l/57Gt9GPWuo49fHb736+Ku/1DHIb6f5RVGfE/tTk1Os
T73Y5dgHMkpvXvxk8GL1W1h9TCaff9r50seO2H2L5v1T//bLp08Y19x61F+e
+8Hk/mbap655bqspvZQ/Z/OPSuF/dlzt+drxN0w/YX2z2HfxXNcbXyT+Izzf
KrV/Vv1Do++s/el938vHs/YL2x88f2J5lNo5Ua39s/Yv0O6zulHs+1gfurR8
0/LxNP9NKf5m1f+98kebF8uX0ebxP3tvesqEe/qalQ+vmXT/A+vqekrd+FLn
w1E4sHU813XXldN36W2OX7rPCQtfGt2IvyRan9RL32wdpfQUNr72fha/rXX+
ovgQxX9vnKt3vlq/Mi8cvPZI6fvs+ax8wbpYXvzT/C9ev5AVv0rjp1W/i+5P
Fg+y+Me+J/If66OzeCsr/kXtM7lm649Y+89G4Tfc9G2NP43Oz9r/ToNHlv60
/jHa+177CfGkVP2CUvZxls8w/BY/UJROWfyMVf+0xk8IPmTzWq3wYft054xl
9z35SG8bR3da//INjxzZ2erf2fgeVs8wizdZ/pClb6zrjHmTWn206P5Zr9b4
xSx+Wflqli947Q7r/rL1WvGD4XW0nzD7PuYneO1vLz8eLvy06pfe/Bvkb978
B2t8h7aPUt9MW09t/mXl31H8PX3WI+M/eMW6/hpWOcn8lJr8xvmg/eONv8rK
H/a+1GestX+18SOrX0bfZ3mHpeBTOp/Ey9dq75+3vwHGU2f1w58uf2HGpE+v
8/tKXVLU62v1h9D4efb/pfiDlT//tdC3Ve/Rzlu89kGLH8G8RW/9HCv/yOoj
pfKzate/tu5XlI95/Tve+NTs/Qn7HrBs1rju9pxKzvtY3rDAQ+xt4XcYf157
fwV+WKcS/akan/fmUXjxi+VPsvG8eT6l7SQ2nuSnCP/S4vGi9oCXf3j3x6pP
15KP0fE0v13p8//s+kvBZ7jmOdTn16XlF3vfWr+R8acsf8nuW3j/BurdR/0D
7L7YA7XoB/3xXv8Au8/im2vrJ4+99Pyce9/fMyivVOJCMS9M3tPqYbMr2sve
/GQNv7T3ZN6ovzC4WPu7WvET44+1usnDxf+9/BjtsWieTNR+le9p8ctWuDH6
0/LL5bfkZ8s5jlwZv7T6b7zyCK8SH3/W9Mnzp5w+sqVn9J9o8KvNf7JxW975
auMxe1t7rnb9WWv8rvYcm5+c4woftfKlUvTN5m/Fj6j/IOs/ZfCV+rkiB7R+
O1H4ZteD/QWxvznmDUb7Klvlm9e+Ynql5vez4ne7b+DPZn0vrfsh+esoR+U7
on8Kv5Z5yHsMTnh+6MXfqH5h3T/EJ83vq70v8BB8jcoT7Tsiz1u9TakTE6Vb
Vj8B+wei38+rf+G+WP3iUf680/afvW+nUzvb+kHY7682f65dvwHho+Wpa+9j
3iDuIzu/we9qfKkWfLGuDIvX1PCQ0Y02nuS3R/3cLM6k9PkdjsvGr31+x57P
4gd7T6vPb8WP2vbznD2vWjp/emdbf034ibU+Pfo30H+E8iS6T1b68u5vln5r
6RdW/l7qO155L89reok2Pl6z8muo8uM0fGL4t3z7C665de8OM/57nytVf6cW
/KT+BdbjstbHsvYh0/6fza+30k0t/mKdh8aH0L7F72LdNy0PzEoPeBX7Eudt
PTevLf9L8Wf5P+6D9H3DPgzWfldsvtH1RPEvej6p3Zc6R+K/xXkx/VDqs5Tq
w+uFH9o3eBW7UKtrm/WPsvlr8S0yD4E/xrt47e1a/K+2fFp72P7fmr5zd3PX
iYec/JE/jG3rbgm9ZvULHMfrP2rrRCn1TUvZL9pz2xx4+OFTDxrT2ge4nnd2
rr/Fbkf3NFIHRfg99oW30ic+x+QE40cSX47+TSt8svDtuOUrs3/9P32N+IkW
Hn7RpJVvd7bnEex9iQuWeeB5fXS/rfoXW3eW7yI/Qniz/WrxEs51WF2oUvRh
va/xEezP4sU/wW9Wt5fF6Wr3+x88YKMvfq67hS+e92O9Re/5hjUvMhoX7bVz
vfzA61fD36x+FcM3rX6PdrWOX6r+ddR/Uko/EH4r8kjkO4urkqvwbcF/4Sta
XK6Xv7D7mrz3+qH/Wu9H+bOXz7DxtHG0+JlScRFW/RHPp63yn9E99rstvU70
K3vrZJXaVxaHkd0/vJbqg8fq8As/kv3T4Ozlv4g/Vj3Pyw9q2y/e+dR+3ssH
sudjGr3L7yVfvmLiN67pbcRPLf5Zieth68Zz+9L7Uzp+CMcVu1XoCP05LJ6p
lF1QKg7ejR8QX6z53aJ0GLUvS/mfsvat1q/HSr+afqjFuyDfLn3+h8/hOS9+
l60P9VDNz6J9/+J5215/3XvGtvXRz9p58bSjFnU1bV8fY310jT5Rb7LiWTTe
24rXpfAX9RrruYJ3fFWeDHxPrhhfmaVbPC9EP4ecGyCfzvbfid4vvb8sf8Rr
z3jHZ34Mpu9681Zr61de/VPwzys35DfWvyut/7L3e99acNozf+lpfvo/231h
u137mssmvLb3K/uNbZBuNH8Gq2uOfhG5il5Vm/5QPqBcLT1+Kf3GSp+l49Os
+rQWB47PZfWTbHxBVH6F9WXn/klcu/acnK/h/+XctlR8mfg92XmLd3xWH8iL
n6X9P+85YoMRvU9t0fz7Ib9aOu6B8c35L98yedN9xjX/PeOlT+6yWx+Np0/H
Dw/wj6h+koUjO+ew0g/OV8sX9tJfaX+cdx+z+GnFX69+08pXYv8c/NiCmXPn
dTTSR1nsJqa3WPmfl/698Dru3cd+8f7z+prVK/qOOPmJruaEb45YuuFBXY3k
nbLx5FzHCu9SeFMKLxn8rHjL/MRReSfnX6jHRvMnvfif5Y+l91/j46X4N64b
4wY1/prdB238H7x12etTRm/a3N9x0Gtz/tLbXHLr3Bt2XNXZfOEf1u6weOeu
BufB/A/4nccuPPy9t0/saM+fBM+wbrC2Puwv412/tQ5ClD9m+UuUPwwV/5L6
pjJPjEPQ9FirXER/D/Id0WuxX6aVb9L1gR/cGz9mPV+Lzi8bH+qVM1G8qcWf
s/cvnLXx7896qKvNA5dzL4m7qyW/o/jA5IUX/0rJ1+Ha3yj+InyidIz8KHpu
hXZ51F7w8oGs/yoL1yz+sTggzD/EOFHrvkTxL8oXvfc1O9wbL1QKf0rZX1k+
4823wPHu/MeukWsu6W7lA9YryPK/rP9Dy/+Tdcu5qtjT1rhUHJ/tQxQOzF9f
Cn+yeOn1l1i/g/Bl8cWaP76UXMjCvbQeyfyL1vp60f3P6n/W85EoP2TvZf1z
LP6l9vxrySfrvKSvqeQxo19Cfmvx4Rj/qsmlKDxHXX/RD+6/tqf1/4o/Q8aX
ejTR8cWuju7v+WdfttcJHV0N1m9h52ItfYP+pvUn0uJUh8r+qGX/sPhsNp5X
rpaWv3jOiPsj9NHGewEdZc+Xs/P38m8v/2H1CVj9rNr1TUrHH3jxS/Kn2fxr
6YHZ/oLaFfttRPF0uPkXg5fkWXnpWOP3eN1jxs7Lvvmf/c0/rz/y6d+d0d32
UZ9450/e2PqOTipf2P1TPrzw1X1u7FT3Cc8fvP2S2Lw0OzNqx8h40776iQUb
/dvYBu1HrN/M/CHW9Wnn2Cz/s7b8Hqr6edH7jP+WqnuR9UNE9QuUb16/Qin+
VXv82vhSSz5Ez5fwqo0jcaKMz7HvROnbCo9ofwetP0Yt/1N0n6L4wcZj+m0t
PlOa/odqf5BOEH+RThh+W/twDTV/sD5XKg8sOk+WBxXV/630J/4ljMNv421I
X8gsXLC+Y7Z+zqB4Kqgn5O2nWdo+9Y6b5b/s/6XzrqP4mdUDonTO3t9g0Zuf
nPRkZ7PLHjcdtdcb6+I1sL4/whPrKWnnMOz7En+KefjIP2rZN1n6iOJR9Hnv
PNj8sb4q5iFl+UVt+w7j5TR5z/hUNP4li18Cf9EzvP6JLH+rjX9Mf7KOr/mF
rPaD5OuJX0v6HjH4iT9My/dh+MX6J2TzS6L2G8Yba/j3+rJ9rx/d39PG893d
NWXNwxM7G4lLjcrNqPzH59m5jrYuLd+7Fn1E6Y/NH/EXf2MeC+q/pe0763NY
L1V7X9ufUvUFovaI9fty/qvFkbHz2Nr8OWvfaHoC5r9q32X1JbL7SfM0B+q3
oH1oxYNo3KDMx3ourc1f6qNKHpvYu9b6fLXwS8tn8Y4v/VvQPtDgg/kSLP+6
c+dXzjj1J92tfiDji12N/bS1fdbwG/UfTf5o+rpXvuP3sT+ll/61PCLWNyGK
P/g8xrkg38j6L4RutPvW+mHafBicJe4I839K1QOTPDPZR9HjWFxgKf9Kafyo
FZ+kPSf6E9JxqfyoyRtf+Prep/a2+yL7L36R5U/NuXbVRWPa72v1RDR9Qd4X
PUSro+/l76X9L177KDqe1b62+k+0cbz1MqP4w+iQ5ZNm+XOp+Vvfy87fi79Z
O0k7n4/avzgO+me9+8X8Myz+8bmuu66cvktvs/KUU17ru25s28eRxZ1Z+bg3
/zMrX6z4werFa+vM8kd8Hv21mj2Zpecon8jal16+7l1fNv9bq+/C6iJqeTve
+TL+VLv+Fdar9OrnbD5IZ17+ifXZovhfin7Z/712jubfK0U/Gtzw3CgKB01+
eeWzBh/Mv4juk4b/ck6KeSK1+rNlf3vnweRXqfr2w3X+ln2f7bPmn2Fxu9b+
sWwdteNfGZ0yf5bmH/Ta+dp3a/Fn67yy9GH1D2vjsfdZfbQs/Kzzi+opXvy1
4m2p/R/u+7X1/2z/3D0X/2q/jTfpb3oOHH3zzZf3tv3d0O+uvS/+W+GzYm9r
frIsHpeWr1E+VIq/S14unjOXzo/P2rkM/lpchmafoP9E8EarkxXFk2x9qpNu
uu0Hm31sQvPqgV8eM7mjv+2zKflHGH+H/eSy/FHTn7X1leY/bDzcT28ezlDx
z1LrL+3/GO77WXh76/95+QubB8tX1PQbK76yeTL/T6k+Etpz7Hxf80da/Tjs
/1788r4/1Pa7Bjdtvln/OJsH089rww/jPrxxUaXmV0t/Y/dL55UyPMNrNn63
lHyoJUez+lEUb6x8oBR8o/SL/YrlecQLDY7X/dNNT1zyw762D1UbjwR907R5
Yd92L32gXaPxN+++WPGD7atmb2T5l6af4PXC81Y8cMGadfWFxA4Su1DivWvR
b1Yfs9bX8+KN13+vfVerd+7tD83kA94Xu1a+d8Ch+4+Y+aWxzY9vf+Pv/vxg
T3PbnP3XW/NyF/WPlPaf4Ly1+jxMv5Xfd5839tn9P9fZYH+WUviZtW/Z91A/
t9bFtK4ju78aPLV+V1n8wffwfJPVu2T8wcsnovw9+t6g8/Vk/DQbX/oHSByq
yEuv3aj9juKH1T7W+pdZ90f0EbEzWLx3lP5Z/oFVLnj9H0ON3/i+rEerY2GV
fxjHLu9hfSwv/2f3V376j1uOemlcs/aw/b81fefu5n1HP3j81z/V3dwy+8Wr
XpgyuD5WVH/UnpO4YInfxryRrH2qxo1C3cjhkj9Z/TA6vvW7bHypz5OdX637
zH9ojZuK1h9g8atZPLN+X4vjw3yM0vZh1q+GfYM1uYP35beW95a1P637NFTy
Karfa3kfbB1ROySLz973PzDixC88e0X3oP2XeiBXfGPvLa7fbFxbH6TlZwN6
S+39Y/cn77Hlgz+5bfQg/lG6f4aGJ9b8MO1+NA9LrpIfiX3Erfl5f3799A+9
9sZWzcmXv/Hypf89sdn7oWbcdnds2rxy8Nxf3f6O8XR/kW+Wtr+xHjfyvax8
sL6n4VPWP8+ew3Uyvay0/oV2oCYnGX5ocKplH8p91U89wL/m7HnV0vnTO9t8
Fen3Ye1rx86jvPVZ8Cp+WO173npfeNX0L4xP1c4jvfUJh9p+Ff9itP6kFQ+1
93D/vO8L/kbrxGT9kyw+uxR/1Z5n/C5bHzPLH5kcwvMzb/+srH5B9wX0OHZe
VtoOl/XJd9v62aQuYyn8Gq7+XqXWkx0f+69g3KBWv6LWerzjsfptVvxj42v3
mXxn/Km2/GFwx77U2vq9/rFS68nihzc/h101O0SDh9e+RHzC8b39EaznJxod
MHkl8g3xXZ7/yo8++Onvfaq39V8LP7GeB0wds/euH/9tZyPngFoctzY/0ePx
/EDTKzT7spT/Bu9//ee/+8yYQ7sb8WO8f/SCd578i5EN8uVS/La0fGL8T/M7
Wt/X/BhID3h+9tfif8t+t5T/ij0XPZ9j82X8g/EnrC8hz5fK7/HitxcvhO8I
v8F89Gx9rqHWt6LyTXuendeXwu9a9KldW7wesK+0Oojs/VL6lcZnmf4jeCv0
hn7mrP7B4KHxczZ/TZ/y7qfIY63ei3YOL98VOY7y3BqnwuYn/i3Nf1gKvzU4
1q7/Vup8RYN71q/F/AZiX2l6q5cPeOObavsPrPDR6HTKVb+dt8Ps0W3+pbd+
onX/o3mY3vgELQ+VfcdLd6X5bWn/gnUdpfJso/dR//Lql9b7teCbla9vnTZ/
k8lbjmm059j41vpz1n6IpeFTWz9h74vfQvwkok9Z+dxwy08rXWvnwrX8Jmwc
q17C4M3qUOD5OMNv/C6L0zh283tPueG+nkHnR3g+oq2HnTPV7n+A4+N8hrt/
qEaP1vclXgD1fus4p66659xjzx1F+aeGpwzPrXaaVr8vq99r9Q41/qStU/sO
xkVb3yuN32gfWu1P/E6p/sdWf1v2fEfkG/phs/at+MOHu/7G8dOnT526ZJTK
/73y16v/sO9F64Np+GbFIyscSulf2nvZviFZ/VLiYbW4y9ryaWTXn+795JX9
rfzAfurW/MVonmPp81UcR+MrpfBL8mvkXBL7aUp8tMCV9cfDq+j97TkA6ffh
xQ/2XG37prT9jVfxv6IfzeofR79ftI6IFb+Q7pG+vPpVVr9j9Zmz/ona90vF
V2t2XW37x5sfaqV3r/yL+hfYc1G/Xyn4Ih/xrofFZ+G5M9Kb1veWfd9an+/R
Zc9/9My/62q08a38Ad9H+0TTI9cjf/8f7xEi6A==
       "], 
      "LogNorms" -> {12.251050514030835`, 10.936154855903926`, 
       10.519049931461808`, 10.168960135020193`}, "VocabularyPosition" -> 
      MachineLearning`SortedHashAssociation[
        Association["KeyHashes" -> CompressedData["
1:eJwU3UMUIEsSBdBp+7dt27Zt27Zt27Zt27Zt2/bcXtxT29pkITPiRfwGbSu0
CfC///3vVKL//e/fNSCBCEwQghKM4IQgJKEITRj+IyzhCE8EIhKJyEQhKtGI
TgxiEovYxCEu8YhPAhLidv6XmCQkJRnJSUFKUpGaNKQlHenJQEYykZksZCUb
2clBTnKRmzzkJR/5KUBBClGYIhSlGMUpQUlKUZoylKUc5alARSpRmSpUpRrV
qUFNalGbOtSlHvVpQEMa0ZgmNKUZzWlBS1rRmja0pR3t6UBHOtGZLnSlG93p
QU960Zs+9KUf/RnAQAYxmCEMZRjDGcFIRjGaMYxlHOOZwEQmMZkpTGUa05nB
TGYxmznMZR7zWcBCFrGYJSxlGctZwUpWsZo1rGUd69nARjaxmS1sZRvb2cFO
drGbPexlH/s5wEEOcZgjHOUYxznBSU5xmjOc5RznucBFLnGZK1zlGte5wU1u
cZs73OUe93nAQx7xmCc85RnPecFLXvGaN7zlHe/5wEc+8ZkvfOUb3/nBT37x
mz/85d/iD0BAAhGYIAQlGMEJQUhCEZow/EdYwhGeCEQkEpGJQlSiEZ0YxCQW
sYlDXOIRnwQkJBGJSUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5
yUNe8pGfAhSkEIUpQlGKUZwSlKQUpSlDWcpRngpUpBKVqUJVqlGdGtSkFrWp
Q13qUZ8GNKQRjWlCU5rRnBa0pBWt+ffwbks72tOBjnSiM13oSje604Oe9KI3
fehLP/ozgIEMYjBDGMowhjOCkYxiNGMYyzjGM4GJTGIyU5jKNKYzg5nMYjZz
mMs85rOAhSxiMUtYyjKWs4KVrGI1a1jLOtazgY1sYjNb2Mo2trODnexiN3vY
yz72c4CDHOIwRzjKMY5zgpOc4jRnOMs5znOBi1ziMle4yjWuc4Ob3OI2d7jL
Pe7zgIc84jFPeMoznvOCl7ziNW94yzve84GPfOIzX/jKN77zg5/84jd/+Mu/
F38AAhKIwAQhKMEITghCEorQhOE/whKO8EQgIpGITBSiEo3oxCAmsYhNHOIS
j/gkICGJSEwSkpKM5KQgJalITRrSko70ZCAjmchMFrKSjezkICe5yE0e8pKP
/BSgIIUoTBGKUozilKAkpShNGcpSjvJUoCKVqEwVqlKN6tSgJrWoTR3qUo/6
NKAhjWhME5rSjOa0oCWtaE0b2tKO9nSgI53oTBe60o3u9KAnvehNH/rSj/4M
YCCDGMwQhjKM4YxgJKMYzRjGMo7xTGAik5jMFKYyjenMYCazmM0c5jKP+Sxg
IYtYzBKWsozlrGAlq1jNGtayjvVsYCOb2MwWtrKN7exgJ7vYzR72so/9HOAg
hzjMEY5yjOOc4CSnOM0ZznKO81zgIpe4zBWuco3r3OAmt7jNHe5yj/s84CGP
eMwTnvKM57zgJa94zRve8o73fOAjn/jMF77yje/84Ce/+M0f/vLvoz8AAQlE
YIIQlGAEJwQhCUVowvAfYQlHeCIQkUhEJgpRiUZ0YhCTWMQmDnGJR3wSkJBE
JCYJSUlGclKQklSkJg1pSUd6MpCRTGQmC1nJRnZykJNc5CYPeclHfgpQkEIU
pghFKUZxSlCSUpSmDGUpR3kqUJFKVKYKValGdWpQk1rUpg51qUd9GtCQRjSm
CU1pRnNa0JJWtKYNbWlHezrQkU50pgtd6UZ3etCTXvSmD33pR38GMJBBDGYI
QxnGcEYwklGMZgxjGcd4JjCRSUxmClOZxnRmMJNZzGYOc5nHfBawkEUsZglL
WcZyVrCSVaxmDWtZx3o2sJFNbGYLW9nGdnawk13sZg972cd+DnCQQxzmCEc5
xnFOcJJTnOYMZznHeS5wkUtc5gpXucZ1bnCTW9zmDne5x30e8JBHPOYJT3nG
c17wkle85g1vecd7PvCRT3zmC1/5xnd+8JNf/OYPf/n3wx+AgAQiMEEISjCC
E4KQhCI0YfiPsIQjPBGISCQiE4WoRCM6MYhJLGITh7jEIz4JSEgiEpOEpCQj
OSlISSpSk4a0pCM9GchIJjKThaxkIzs5yEkucpOHvOQjPwUoSCEKU4SiFKM4
JShJKUpThrKUozwVqEglKlOFqlSjOjWoSS1qU4e61KM+DWhIIxrThKY0ozkt
aEkrWtOGtrSjPR3oSCc604WudKM7PehJL3rTh770oz8DGMggBjOEoQxjOCMY
yShGM4axjGM8E5jIJCYzhalMYzozmMksZjOHucxjPgtYyCIWs4SlLGM5K1jJ
KlazhrWsYz0b2MgmNrOFrWxjOzvYyS52s4e97GM/BzjIIQ5zhKMc4zgnOMkp
TnOGs5zjPBe4yCUuc4WrXOM6N7jJLW5zh7vc4z4PeMgjHvOEpzzjOS94ySte
84a3vOM9H/jIJz7zha984zs/+MkvfvOHv/zb7AtAQAIRmCAEJRjBCUFIQhGa
MPxHWMIRnghEJBKRiUJUohGdGMQkFrGJQ1ziEZ8EJCQRiUlCUpKRnBSkJBWp
SUNa0pGeDGQkE5nJQlaykZ0c5CQXuclDXvKRnwIUpBCFKUJRilGcEpSkFKUp
Q1nKUZ4KVKQSlalCVapRnRrUpBa1qUNd6lGfBjSkEY1pQlOa0ZwWtKQVrWlD
W9rRng50pBOd6UJXutGdHvSkF73pQ1/60Z8BDGQQgxnCUIYxnBGMZBSjGcNY
xjGeCUxkEpOZwlSmMZ0ZzGQWs5nDXOYxnwUsZBGLWcJSlrGcFaxkFatZw1rW
sZ4NbGQTm9nCVraxnR3sZBe72cNe9rGfAxzkEIc5wlGOcZwTnOQUpznDWc5x
ngtc5BKXucJVrnGdG9zkFre5w13ucZ8HPOQRj3nCU57xnBe85BWvecNb3vGe
D3zkE5/5wle+8Z0f/OQXv/nDX/5t9AcgIIEITBCCEozghCAkoQhNGP4jLOEI
TwQiEonIRCEq0YhODGISi9jEIS7xiE8CEpKIxCQhKclITgpSkorUpCEt6UhP
BjKSicxkISvZyE4OcpKL3OQhL/nITwEKUojCFKEoxShOCUpSitKUoSzlKE8F
KlKJylShKtWoTg1qUova1KEu9ahPAxrSiMY0oSnNaE4LWtKK1rShLe1oTwc6
0onOdKEr3ehOD3rSi970oS/96M8ABjKIwQxhKMMYzghGMorRjGEs4xjPBCYy
iclMYSrTmM4MZjKL2cxhLvOYzwIWsojFLGEpy1jOClayitWsYS3rWM8GNrKJ
zWxhK9vYzg52sovd7GEv+9jPAQ5yiMMc4SjHOM4JTnKK05zhLOc4zwUuconL
XOEq17jODW5yi9vc4S73uM8DHvKIxzzhKc94zgte8orXvOEt73jPBz7yic98
4Svf+M4PfvKL3/zhL/8O+QIQkEAEJghBCUZwQhCSUIQmDP8RlnCEJwIRiURk
ohCVaEQnBjGJRWziEJd4xCcBCUlEYpKQlGQkJwUpSUVq0pCWdKQnAxnJRGay
kJVsZCcHOclFbvKQl3zkpwAFKURhilCUYhSnBCUpRWnKUJZylKcCFalEZapQ
lWpUpwY1qUVt6lCXetSnAQ1pRGOa0JRmNKcFLWlFa9rQlna0pwMd6URnutCV
bnSnBz3pRW/60Jd+9GcAAxnEYIYwlGEMZwQjGcVoxjCWcYxnAhOZxGSmMJVp
TGcGM5nFbOYwl3nMZwELWcRilrCUZSxnBStZxWrWsJZ1rGcDG9nEZrawlW1s
Zwc72cVu9rCXfeznAAc5xGGOcJRjHOcEJznFac5wlnOc5wIXucRlrnCVa1zn
Bje5xW3ucJd73OcBD3nEY57wlGc85wUvecVr3vCWd7znAx/5xGe+8JVvfOcH
P/nFb/7wl38H/AEISCACE4SgBCM4IQhJKEIThv8ISzjCE4GIRCIyUYhKNKIT
g5jEIjZxiEs84pOAhCQiMUlISjKSk4KUpCI1aUhLOtKTgYxkIjNZyEo2spOD
nOQiN3nISz7yU4CCFKIwRShKMYpTgpKUojRlKEs5ylOBilSiMlWoSjWqU4Oa
1KI2dahLPerTgIY0ojFNaEozmtOClrSiNW1oSzva04GOdKIzXehKN7rTg570
ojd96Es/+jOAgQxiMEMYyjCGM4KRjGI0YxjLOMYzgYlMYjJTmMo0pjODmcxi
NnOYyzzms4CFLGIxS1jKMpazgpWsYjVrWMs61rOBjWxiM1vYyja2s4Od7GI3
e9jLPvZzgIMc4jBHOMoxjnOCk5ziNGc4yznOc4GLXOIyV7jKNa5zg5vc4jZ3
uMs97vOAhzziMU94yjOe84KXvOI1b3jLO97zgY984jNf+Mo3vvODn/ziN3/4
y7/ingAEJBCBCUJQghGcEIQkFKEJw3+EJRzhiUBEIhGZKEQlGtGJQUxiEZs4
xCUe8UlAQhKRmCQkJRnJSUFKUpGaNKQlHenJQEYykZksZCUb2clBTnKRmzzk
JR/5KUBBClGYIhSlGMUpQUlKUZoylKUc5alARSpRmSpUpRrVqUFNalGbOtSl
HvVpQEMa0ZgmNKUZzWlBS1rRmja0pR3t6UBHOtGZLnSlG93pQU960Zs+9KUf
/RnAQAYxmCEMZRjDGcFIRjGaMYxlHOOZwEQmMZkpTGUa05nBTGYxmznMZR7z
WcBCFrGYJSxlGctZwUpWsZo1rGUd69nARjaxmS1sZRvb2cFOdrGbPexlH/s5
wEEOcZgjHOUYxznBSU5xmjOc5RznucBFLnGZK1zlGte5wU1ucZs73OUe93nA
Qx7xmCc85RnPecFLXvGaN7zlHe/5wEc+8ZkvfOUb3/nBT37xmz/85V9hXwAC
EojABCEowQhOCEISitCE4T/CEo7wRCAikYhMFKISjejEICaxiE0c4hKP+CQg
IYlITBKSkozkpCAlqUhNGtKSjvRkICOZyEwWspKN7OQgJ7nITR7yko/8FKAg
hShMEYpSjOKUoCSlKE0ZylKO8lSgIpWoTBWqUo3q1KAmtahNHepSj/o0oCGN
aEwTmtKM5rSgJa1oTRva0o72dKAjnehMF7rSje70oCe96E0f+tKP/gxgIIMY
zBCGMozhjGAkoxjNGMYyjvFMYCKTmMwUpjKN6cxgJrOYzRzmMo/5LGAhi1jM
EpayjOWsYCWrWM0a1rKO9WxgI5vYzBa2so3t7GAnu9jNHvayj/0c4CCHOMwR
jnKM45zgJKc4zRnOco7zXOAil7jMFa5yjevc4Ca3uM0d7nKP+zzgIY94zBOe
8oznvOAlr3jNG97yjvd84COf+MwXvvKN7/zgJ7/4zR/+8q+oNwABCURgghCU
YAQnBCEJRWjC8B9hCUd4IhCRSEQmClGJRnRiEJNYxCYOcYlHfBKQkEQkJglJ
SUZyUpCSVKQmDWlJR3oykJFMZCYLWclGdnKQk1zkJg95yUd+ClCQQhSmCEUp
RnFKUJJSlKYMZSlHeSpQkUpUpgpVqUZ1alCTWtSmDnWpR30a0JBGNKYJTWlG
c1rQkla0pg1taUd7OtCRTnSmC13pRnd60JNe9KYPfelHfwYwkEEMZghDGcZw
RjCSUYxmDGMZx3gmMJFJTGYKU5nGdGYwk1nMZg5zmcd8FrCQRSxmCUtZxnJW
sJJVrGYNa1nHejawkU1sZgtb2cZ2drCTXexmD3vZx34OcJBDHOYIRznGcU5w
klOc5gxnOcd5LnCRS1zmCle5xnVucJNb3OYOd7nHfR7wkEc85glPecZzXvCS
V7zmDW95x3s+8JFPfOYLX/nGd37wk1/85g9/+VfQH4CABCIwQQhKMIITgpCE
IjRh+I+whCM8EYhIJCIThahEIzoxiEksYhOHuMQjPglISCISk4SkJCM5KUhJ
KlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e85CM/BShIIQpThKIUozglKEkp
SlOGspSjPBWoSCUqU4WqVKM6NahJLWpTh7rUoz4NaEgjGtOEpjSjOS1oSSta
04a2tKM9HehIJzrTha50ozs96EkvetOHvvSjPwMYyCAGM4ShDGM4IxjJKEYz
hrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+C1jIIhazhKUsYzkrWMkqVrOG
taxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8HOMghDnOEoxzjOCc4ySlOc4az
nOM8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94yCMe84SnPOM5L3jJK17zhre8
4z0f+MgnPvOFr3zjOz/4yS9+84e//GvmCUBAAhGYIAQlGMEJQUhCEZow/EdY
whGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJSUJSkpGcFKQkFalJQ1rS
kZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUpQlGKUZwSlKQUpSlDWcpR
ngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlCU5rRnBa0pBWtaUNb2tGe
DnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQhjGcEYxkFKMZw1jGMZ4J
TGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKWsZwVrGQVq1nDWtaxng1s
ZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5xnBOc5BSnOcNZznGeC1zk
Epe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGcF7zkFa95w1ve8Z4PfOQT
n/nCV77xnR/85Be/+cNf/jXyBSAggQhMEIISjOCEICShCE0Y/iMs4QhPBCIS
ichEISrRiE4MYhKL2MQhLvGITwISkojEJCEpyUhOClKSitSkIS3pSE8GMpKJ
zGQhK9nITg5ykovc5CEv+chPAQpSiMIUoSjFKE4JSlKK0pShLOUoTwUqUonK
VKEq1ahODWpSi9rUoS71qE8DGtKIxjShKc1oTgta0orWtKEt7WhPBzrSic50
oSvd6E4PetKL3vShL/3ozwAGMojBDGEowxjOCEYyitGMYSzjGM8EJjKJyUxh
KtOYzgxmMovZzGEu85jPAhayiMUsYSnLWM4KVrKK1axhLetYzwY2sonNbGEr
29jODnayi93sYS/72M8BDnKIwxzhKMc4zglOcorTnOEs5zjPBS5yictc4SrX
uM4NbnKL29zhLve4zwMe8ojHPOEpz3jOC17yite84S3veM8HPvKJz3zhK9/4
zg9+8ovf/OEv/5p4AxCQQAQmCEEJRnBCEJJQhCYM/xGWcIQnAhGJRGSiEJVo
RCcGMYlFbOIQl3jEJwEJSURikpCUZCQnBSlJRWrSkJZ0pCcDGclEZrKQlWxk
Jwc5yUVu8pCXfOSnAAUpRGGKUJRiFKcEJSlFacpQlnKUpwIVqURlqlCValSn
BjWpRW3qUJd61KcBDWlEY5rQlGY0pwUtaUVr2tCWdrSnAx3pRGe60JVudKcH
PelFb/rQl370ZwADGcRghjCUYQxnBCMZxWjGMJZxjGcCE5nEZKYwlWlMZwYz
mcVs5jCXecxnAQtZxGKWsJRlLGcFK1nFatawlnWsZwMb2cRmtrCVbWxnBzvZ
xW72sJd97OcABznEYY5wlGMc5wQnOcVpznCWc5znAhe5xGWucJVrXOcGN7nF
be5wl3vc5wEPecRjnvCUZzznBS95xWve8JZ3vOcDH/nEZ77wlW985wc/+cVv
/vCXfw38AQhIIAIThKAEIzghCEkoQhOG/whLOMITgYhEIjJRiEo0ohODmMQi
NnGISzzik4CEJCIxSUhKMpKTgpSkIjVpSEs60pOBjGQiM1nISjayk4Oc5CI3
echLPvJTgIIUojBFKEoxilOCkpSiNGUoSznKU4GKVKIyVahKNapTg5rUojZ1
qEs96tOAhjSiMU1oSjOa04KWtKI1bWhLO9rTgY50ojNd6Eo3utODnvSiN33o
Sz/6M4CBDGIwQxjKMIYzgpGMYjRjGMs4xjOBiUxiMlOYyjSmM4OZzGI2c5jL
POazgIUsYjFLWMoylrOClaxiNWtYyzrWs4GNbGIzW9jKNrazg53sYjd72Ms+
9nOAgxziMEc4yjGOc4KTnOI0ZzjLOc5zgYtc4jJXuMo1rnODm9ziNne4yz3u
84CHPOIxT3jKM57zgpe84jVveMs73vOBj3ziM1/4yje+84Of/OI3f/jLv/CO
AAQkEIEJQlCCEZwQhCQUoQnDf4QlHOGJQEQiEZkoRCUa0YlBTGIRmzjEJR7x
SUBCEpGYJCQlGclJQUpSkZo0pCUd6clARjKRmSxkJRvZyUFOcpGbPOQlH/kp
QEEKUZgiFKUYxSlBSUpRmjKUpRzlqUBFKlGZKlSlGtWpQU1qUZs61KUe9WlA
QxrRmCY0pRnNaUFLWtGaNrSlHe3pQEc60ZkudKUb3elBT3rRmz70pR/9GcBA
BjGYIQxlGMMZwUhGMZoxjGUc45nARCYxmSlMZRrTmcFMZjGbOcxlHvNZwEIW
sZglLGUZy1nBSlaxmjWsZR3r2cBGNrGZLWxlG9vZwU52sZs97GUf+znAQQ5x
mCMc5RjHOcFJTnGaM5zlHOe5wEUucZkrXOUa17nBTW5xmzvc5R73ecBDHvGY
JzzlGc95wUte8Zo3vOUd7/nARz7xmS985Rvf+cFPfvGbP/zlX3BPAAISiMAE
ISjBCE4IQhKK0IThP8ISjvBEICKRiEwUohKN6MQgJrGITRziEo/4JCAhiUhM
EpKSjOSkICWpSE0a0pKO9GQgI5nITBayko3s5CAnuchNHvKSj/wUoCCFKEwR
ilKM4pSgJKUoTRnKUo7yVKAilahMFapSjerUoCa1qE0d6lKP+jSgIY1oTBOa
0ozmtKAlrWhNG9rSjvZ0oCOd6EwXutKN7vSgJ73oTR/60o/+DGAggxjMEIYy
jOGMYCSjGM0YxjKO8UxgIpOYzBSmMo3pzGAms5jNHOYyj/ksYCGLWMwSlrKM
5axgJatYzRrWso71bGAjm9jMFrayje3sYCe72M0e9rKP/RzgIIc4zBGOcozj
nOAkpzjNGc5yjvNc4CKXuMwVrnKN69zgJre4zR3uco/7POAhj3jME57yjOe8
4CWveM0b3vKO93zgI5/4zBe+8o3v/OAnv/jNH/7yL7QrAAEJRGCCEJRgBCcE
IQlFaMLwH2EJR3giEJFIRCYKUYlGdGIQk1jEJg5xiUd8EpCQRCQmCUlJRnJS
kJJUpCYNaUlHejKQkUxkJgtZyUZ2cpCTXOQmD3nJR34KUJBCFKYIRSlGcUpQ
klKUpgxlKUd5KlCRSlSmClWpRnVqUJNa1KYOdalHfRrQkEY0pglNaUZzWtCS
VrSmDW1pR3s60JFOdKYLXelGd3rQk170pg996Ud/BjCQQQxmCEMZxnBGMJJR
jGYMYxnHeCYwkUlMZgpTmcZ0ZjCTWcxmDnOZx3wWsJBFLGYJS1nGclawklWs
Zg1rWcd6NrCRTWxmC1vZxnZ2sJNd7GYPe9nHfg5wkEMc5ghHOcZxTnCSU5zm
DGc5x3kucJFLXOYKV7nGdW5wk1vc5g53ucd9HvCQRzzmCU95xnNe8JJXvOYN
b3nHez7wkU985gtf+cZ3fvCTX/zmD3/5F9gXgIAEIjBBCEowghOCkIQiNGH4
j7CEIzwRiEgkIhOFqEQjOjGISSxiE4e4xCM+CUhIIhKThKQkIzkpSEkqUpOG
tKQjPRnISCYyk4WsZCM7OchJLnKTh7zkIz8FKEghClOEohSjOCUoSSlKU4ay
lKM8FahIJSpThapUozo1qEktalOHutSjPg1oSCMa04SmNKM5LWhJK1rThra0
oz0d6EgnOtOFrnSjOz3oSS9604e+9KM/AxjIIAYzhKEMYzgjGMkoRjOGsYxj
PBOYyCQmM4WpTGM6M5jJLGYzh7nMYz4LWMgiFrOEpSxjOStYySpWs4a1rGM9
G9jIJjazha1sYzs72MkudrOHvexjPwc4yCEOc4SjHOM4JzjJKU5zhrOc4zwX
uMglLnOFq1zjOje4yS1uc4e73OM+D3jIIx7zhKc84zkveMkrXvOGt7zjPR/4
yCc+84WvfOM7P/jJL37zh7/8C+sMQEACEZggBCUYwQlBSEIRmjD8R1jCEZ4I
RCQSkYlCVKIRnRjEJBaxiUNc4hGfBCQkEYlJQlKSkZwUpCQVqUlDWtKRngxk
JBOZyUJWspGdHOQkF7nJQ17ykZ8CFKQQhSlCUYpRnBKUpBSlKUNZylGeClSk
EpWpQlWqUZ0a1KQWtalDXepRnwY0pBGNaUJTmtGcFrSkFa1pQ1va0Z4OdKQT
nelCV7rRnR70pBe96UNf+tGfAQxkEIMZwlCGMZwRjGQUoxnDWMYxnglMZBKT
mcJUpjGdGcxkFrOZw1zmMZ8FLGQRi1nCUpaxnBWsZBWrWcNa1rGeDWxkE5vZ
wla2sZ0d7GQXu9nDXvaxnwMc5BCHOcJRjnGcE5zkFKc5w1nOcZ4LXOQSl7nC
Va5xnRvc5Ba3ucNd7nGfBzzkEY95wlOe8ZwXvOQVr3nDW97xng985BOf+cJX
vvGdH/zkF7/5w1/+BfUGICCBCEwQghKM4IQgJKEITRj+IyzhCE8EIhKJyEQh
KtGITgxiEovYxCEu8YhPAhKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr
2chODnKSi9zkIS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrV
qE4NalKL2tShLvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93o
Tg960ove9KEv/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jO
DGYyi9nMYS7zmM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4O
drKL3exhL/vYzwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJy1zhKte4zg1u
covb3OEu97jPAx7yiMc84SnPeM4LXvKK17zhLe94zwc+8onPfOEr3/jOD37y
i9/84S//QroDEJBABCYIQQlGcEIQklCEJgz/EZZwhCcCEYlEZKIQlWhEJwYx
iUVs4hCXeMQnAQlJRGKSkJRkJCcFKUlFatKQlnSkJwMZyURmspCVbGQnBznJ
RW7ykJd85KcABSlEYYpQlGIUpwQlKUVpylCWcpSnAhWpRGWqUJVqVKcGNalF
bepQl3rUpwENaURjmtCUZjSnBS1pRWva0JZ2tKcDHelEZ7rQlW50pwc96UVv
+tCXfvRnAAMZxGCGMJRhDGcEIxnFaMYwlnGMZwITmcRkpjCVaUxnBjOZxWzm
MJd5zGcBC1nEYpawlGUsZwUrWcVq1rCWdaxnAxvZxGa2sJVtbGcHO9nFbvaw
l33s5wAHOcRhjnCUYxznBCc5xWnOcJZznOcCF7nEZa5wlWtc5wY3ucVt7nCX
e9znAQ95xGOe8JRnPOcFL3nFa97wlne85wMf+cRnvvCVb3znBz/5xW/+8Jd/
Af0BCEggAhOEoAQjOCEISShCE4b/CEs4whOBiEQiMlGISjSiE4OYxCI2cYhL
POKTgIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+
8lOAghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q
04CGNKIxTWhKM5rTgpa0ojVtaEs72tOBjnSiM13oSje604Oe9KI3fehLP/oz
gIEMYjBDGMowhjOCkYxiNGMYyzjGM4GJTGIyU5jKNKYzg5nMYjZzmMs85rOA
hSxiMUtYyjKWs4KVrGI1a1jLOtazgY1sYjNb2Mo2trODnexiN3vYyz72c4CD
HOIwRzjKMY5zgpOc4jRnOMs5znOBi1ziMle4yjWuc4Ob3OI2d7jLPe7zgIc8
4jFPeMoznvOCl7ziNW94yzve84GPfOIzX/jKN77zg5/84jd/+Mu/4RwBCEgg
AhOEoAQjOCEISShCE4b/CEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKTgIQk
IjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOAghSi
MEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CGNKIx
TWhKM5rTgpa0ojVtaEs72tOBjnSiM13oSje604Oe9KI3fehLP/ozgIEMYjBD
GMowhjOCkYxiNGMYyzjGM4GJTGIyU5jKNKYzg5nMYjZzmMs85rOAhSxiMUtY
yjKWs4KVrGI1a1jLOtazgY1sYjNb2Mo2trODnexiN3vYyz72c4CDHOIwRzjK
MY5zgpOc4jRnOMs5znOBi1ziMle4yjWuc4Ob3OI2d7jLPe7zgIc84jFPeMoz
nvOCl7ziNW94yzve84GPfOIzX/jKN77zg5/84jd/+Mu/wTwBCEggAhOEoAQj
OCEISShCE4b/CEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKTgIQkIjFJSEoy
kpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOAghSiMEUoSjGK
U4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CGNKIxTWhKM5rT
gpa0ojVtaEs72tOBjnSiM13oSje604Oe9KI3fehLP/ozgIEMYjBDGMowhjOC
kYxiNGMYyzjGM4GJTGIyU5jKNKYzg5nMYjZzmMs85rOAhSxiMUtYyjKWs4KV
rGI1a1jLOtazgY1sYjNb2Mo2trODnexiN3vYyz72c4CDHOIwRzjKMY5zgpOc
4jRnOMs5znOBi1ziMle4yjWuc4Ob3OI2d7jLPe7zgIc84jFPeMoznvOCl7zi
NW94yzve84GPfOIzX/jKN77zg5/84jd/+Mu/oVwBCEggAhOEoAQjOCEISShC
E4b/CEs4whOBiEQiMlGISjSiE4OYxCI2cYhLPOKTgIQkIjFJSEoykpOClKQi
NWlISzrSk4GMZCIzWchKNrKTg5zkIjd5yEs+8lOAghSiMEUoSjGKU4KSlKI0
ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q04CGNKIxTWhKM5rTgpa0ojVt
aEs72tOBjnSiM13oSje604Oe9KI3fehLP/ozgIEMYjBDGMowhjOCkYxiNGMY
yzjGM4GJTGIyU5jKNKYzg5nMYjZzmMs85rOAhSxiMUtYyjKWs4KVrGI1a1jL
OtazgY1sYjNb2Mo2trODnexiN3vYyz72c4CDHOIwRzjKMY5zgpOc4jRnOMs5
znOBi1ziMle4yjWuc4Ob3OI2d7jLPe7zgIc84jFPeMoznvOCl7ziNW94yzve
84GPfOIzX/jKN77zg5/84jd/+Mu/gXwBCEggAhOEoAQjOCEISShCE4b/CEs4
whOBiEQiMlGISjSiE4OYxCI2cYhLPOKTgIQkIjFJSEoykpOClKQiNWlISzrS
k4GMZCIzWchKNrKTg5zkIjd5yEs+8lOAghSiMEUoSjGKU4KSlKI0ZShLOcpT
gYpUojJVqEo1qlODmtSiNnWoSz3q04CGNKIxTWhKM5rTgpa0ojVtaEs72tOB
jnSiM13oSje604Oe9KI3fehLP/ozgIEMYjBDGMowhjOCkYxiNGMYyzjGM4GJ
TGIyU5jKNKYzg5nMYjZzmMs85rOAhSxiMUtYyjKWs4KVrGI1a1jLOtazgY1s
YjNb2Mo2trODnexiN3vYyz72c4CDHOIwRzjKMY5zgpOc4jRnOMs5znOBi1zi
Mle4yjWuc4Ob3OI2d7jLPe7zgIc84jFPeMoznvOCl7ziNW94yzve84GPfOIz
X/jKN77zg5/84jd/+Mu/YZwBCEggAhOEoAQjOCEISShCE4b/CEs4whOBiEQi
MlGISjSiE4OYxCI2cYhLPOKTgIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIz
WchKNrKTg5zkIjd5yEs+8lOAghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJV
qEo1qlODmtSiNnWoSz3q04CGNKIxTWhKM5rTgpa0ojVtaEs72tOBjnSiM13o
Sje604Oe9KI3fehLP/ozgIEMYjBDGMowhjOCkYxiNGMYyzjGM4GJTGIyU5jK
NKYzg5nMYjZzmMs85rOAhSxiMUtYyjKWs4KVrGI1a1jLOtazgY1sYjNb2Mo2
trODnexiN3vYyz72c4CDHOIwRzjKMY5zgpOc4jRnOMs5znOBi1ziMle4yjWu
c4Ob3OI2d7jLPe7zgIc84jFPeMoznvOCl7ziNW94yzve84GPfOIzX/jKN77z
g5/84jd/+Mu/QbwBCEggAhOEoAQjOCEISShCE4b/CEs4whOBiEQiMlGISjSi
E4OYxCI2cYhLPOKTgIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKT
g5zkIjd5yEs+8lOAghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlOD
mtSiNnWoSz3q04CGNKIxTWhKM5rTgpa0ojVtaEs72tOBjnSiM13oSje604Oe
9KI3fehLP/ozgIEMYjBDGMowhjOCkYxiNGMYyzjGM4GJTGIyU5jKNKYzg5nM
YjZzmMs85rOAhSxiMUtYyjKWs4KVrGI1a1jLOtazgY1sYjNb2Mo2trODnexi
N3vYyz72c4CDHOIwRzjKMY5zgpOc4jRnOMs5znOBi1ziMle4yjWuc4Ob3OI2
d7jLPe7zgIc84jFPeMoznvOCl7ziNW94yzve84GPfOIzX/jKN77zg5/84jd/
+Mu/IdwBCEggAhOEoAQjOCEISShCE4b/CEs4whOBiEQiMlGISjSiE4OYxCI2
cYhLPOKTgIQkIjFJSEoykpOClKQiNWlISzrSk4GMZCIzWchKNrKTg5zkIjd5
yEs+8lOAghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWo
Sz3q04CGNKIxTWhKM5rTgpa0ojVtaEs72tOBjnSiM13oSje604Oe9KI3fehL
P/ozgIEMYjBDGMowhjOCkYxiNGMYyzjGM4GJTGIyU5jKNKYzg5nMYjZzmMs8
5rOAhSxiMUtYyjKWs4KVrGI1a1jLOtazgY1sYjNb2Mo2trODnexiN3vYyz72
c4CDHOIwRzjKMY5zgpOc4jRnOMs5znOBi1ziMle4yjWuc4Ob3OI2d7jLPe7z
gIc84jFPeMoznvOCl7ziNW94yzve84GPfOIzX/jKN77zg5/84jd/+Mv/4ln/
BCQQgQlCUIIRnBCE/H/D9JAtBgIAAKyvU9vWr23btm3btm3btm3btm1zssgR
QmjCEJZwhCcCEYlEZKIQlWhEJwYxiUVs4hCXeMQnAQEkJBGJSUJSkpGcFKQk
FalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe8pGfAhSkEIUpQlGKUZwSlKQU
pSlDWcpRngpUpBKVqUJVqlGdGtSkFrWpQ13qUZ8GNKQRjWlCU5rRnBa0pBWt
aUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQhjGcEYxkFKMZ
w1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKWsZwVrGQVq1nD
Wtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5xnBOc5BSnOcNZ
znGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGcF7zkFa95w1ve
8Z4PfOQTn/nCV77xnR/85Be/+cNf/hEowH8C8x9BCEowghOCkIQiNGEISzjC
E4GIRCIyUYhKNKITg5jEIjZxiEs84pOAABKSiMQkISnJSE4KUpKK1KQhLelI
TwYykonMZCEr2chODnKSi9zkIS/5yE8BClKIwhShKMUoTglKUorSlKEs5ShP
BSpSicpUoSrVqE4NalKL2tShLvWoTwMa0ojGNKEpzWhOC1rSita0oS3taE8H
OtKJznShK93oTg960ove9KEv/ejPAAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQm
MonJTGEq05jODGYyi9nMYS7zmM8CFrKIxSxhKctYzgpWsorVrGEt61jPBjay
ic1sYSvb2M4OdrKL3exhL/vYzwEOcojDHOEoxzjOCU5yitOc4SznOM8FLnKJ
y1zhKte4zg1ucovb3OEu97jPAx7yiMc84SnPeM4LXvKK17zhLe94zwc+8onP
fOEr3/jOD37yi9/84S//CJTQfwLzH0EISjCCE4KQhCI0YQhLOMITgYhEIjJR
iEo0ohODmMQiNnGISzzik4AAEpKIxCQhKclITgpSkorUpCEt6UhPBjKSicxk
ISvZyE4OcpKL3OQhL/nITwEKUojCFKEoxShOCUpSitKUoSzlKE8FKlKJylSh
KtWoTg1qUova1KEu9ahPAxrSiMY0oSnNaE4LWtKK1rShLe1oTwc60onOdKEr
3ehOD3rSi970oS/96M8ABjKIwQxhKMMYzghGMorRjGEs4xjPBCYyiclMYSrT
mM4MZjKL2cxhLvOYzwIWsojFLGEpy1jOClayitWsYS3rWM8GNrKJzWxhK9vY
zg52sovd7GEv+9jPAQ5yiMMc4SjHOM4JTnKK05zhLOc4zwUuconLXOEq17jO
DW5yi9vc4S73uM8DHvKIxzzhKc94zgte8orXvOEt73jPBz7yic984Svf+M4P
fvKL3/zhL/8IlMh/AvMfQQhKMIITgpCEIjRhCEs4whOBiEQiMlGISjSiE4OY
xCI2cYhLPOKTgAASkojEJCEpyUhOClKSitSkIS3pSE8GMpKJzGQhK9nITg5y
kovc5CEv+chPAQpSiMIUoSjFKE4JSlKK0pShLOUoTwUqUonKVKEq1ahODWpS
i9rUoS71qE8DGtKIxjShKc1oTgta0orWtKEt7WhPBzrSic50oSvd6E4PetKL
3vShL/3ozwAGMojBDGEowxjOCEYyitGMYSzjGM8EJjKJyUxhKtOYzgxmMovZ
zGEu85jPAhayiMUsYSnLWM4KVrKK1axhLetYzwY2sonNbGEr29jODnayi93s
YS/72M8BDnKIwxzhKMc4zglOcorTnOEs5zjPBS5yictc4SrXuM4NbnKL29zh
Lve4zwMe8ojHPOEpz3jOC17yite84S3veM8HPvKJz3zhK9/4zg9+8ovf/OEv
/wiU2H8C8x9BCEowghOCkIQiNGEISzjCE4GIRCIyUYhKNKITg5jEIjZxiEs8
4pOAABKSiMQkISnJSE4KUpKK1KQhLelITwYykonMZCEr2chODnKSi9zkIS/5
yE8BClKIwhShKMUoTglKUorSlKEs5ShPBSpSicpUoSrVqE4NalKL2tShLvWo
TwMa0ojGNKEpzWhOC1rSita0oS3taE8HOtKJznShK93oTg960ove9KEv/ejP
AAYyiMEMYSjDGM4IRjKK0YxhLOMYzwQmMonJTGEq05jODGYyi9nMYS7zmM8C
FrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vYzwEO
cojDHOEoxzjOCU5yitP8DxaG1lI=
          "], "Values" -> None, "DefaultValue" -> -1, "HashFunction" -> 
         Function[{
           MachineLearning`file152SortedHashAssociation`PackagePrivate`keys$}, 
           Switch[
           MachineLearning`file152SortedHashAssociation`PackagePrivate`keys$, {
             BlankSequence[String]}, 
            Data`StringHash[
            MachineLearning`file152SortedHashAssociation`PackagePrivate`keys$,
              "Murmur3-64"], 
            PatternTest[
             Blank[], 
             MachineLearning`PackageScope`PackedArrayQ[#, Integer, 1]& ], 
            MachineLearning`file152SortedHashAssociation`PackagePrivate`keys$, 
            PatternTest[
             Blank[], 
             MachineLearning`PackageScope`PackedArrayQ[#, Integer, 2]& ], 
            
            Block[{MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q}, 
             MachineLearning`file152SortedHashAssociation`PackagePrivate`q = {
                Quotient[
                MachineLearning`file152SortedHashAssociation`PackagePrivate`\
keys$, 2^48], 
                Quotient[
                 Mod[
                 MachineLearning`file152SortedHashAssociation`PackagePrivate`\
keys$, 2^48], 2^32], 
                Quotient[
                 Mod[
                 MachineLearning`file152SortedHashAssociation`PackagePrivate`\
keys$, 2^32], 2^16], 
                Mod[
                MachineLearning`file152SortedHashAssociation`PackagePrivate`\
keys$, 2^16]}; 
             MachineLearning`file152SortedHashAssociation`PackagePrivate`q = 
              Transpose[
                MachineLearning`PackageScope`ToPackedArray[
                MachineLearning`file152SortedHashAssociation`PackagePrivate`q]\
, {1, 3, 2}]; 
             MachineLearning`file152SortedHashAssociation`PackagePrivate`q = 
              Transpose[
                Flatten[
                MachineLearning`file152SortedHashAssociation`PackagePrivate`q,
                  1]]; Data`StringHash[
               FromCharacterCode[
                Abs[
                MachineLearning`file152SortedHashAssociation`PackagePrivate`q]\
], "Murmur3-64"]], 
            Blank[List], 
            Map[Switch[#, 
              Blank[String], 
              Data`StringHash[#, "Murmur3-64"], 
              PatternTest[
               Blank[], Developer`MachineIntegerQ], #, {
               PatternTest[
                BlankSequence[], Developer`MachineIntegerQ]}, 
              
              Block[{MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q}, 
               MachineLearning`file152SortedHashAssociation`PackagePrivate`q = {
                  Quotient[#, 2^48], 
                  Quotient[
                   Mod[#, 2^48], 2^32], 
                  Quotient[
                   Mod[#, 2^32], 2^16], 
                  Mod[#, 2^16]}; 
               MachineLearning`file152SortedHashAssociation`PackagePrivate`q = 
                Flatten[
                 MachineLearning`file152SortedHashAssociation`PackagePrivate`\
q]; Data`StringHash[
                 FromCharacterCode[
                  Abs[
                  MachineLearning`file152SortedHashAssociation`PackagePrivate`\
q]], "Murmur3-64"]], 
              Blank[], 
              Data`StringHash[
               StringJoin[
                ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
             MachineLearning`file152SortedHashAssociation`PackagePrivate`keys$\
]]], "Version" -> {12., 0}]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "NoninvertibleIntegerEncodeNominalSequence", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
             MachineLearning`SortedHashAssociation[
               Association["KeyHashes" -> CompressedData["
1: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
h7nMYz4LWMgiFrOUZSxnBSv5Hws7DoY=
                 "], "Values" -> None, "DefaultValue" -> -1, "HashFunction" -> 
                Function[{
                  MachineLearning`file152SortedHashAssociation`PackagePrivate`\
keys$}, 
                  Switch[
                  MachineLearning`file152SortedHashAssociation`PackagePrivate`\
keys$, {
                    BlankSequence[String]}, 
                   Data`StringHash[
                   MachineLearning`file152SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file152SortedHashAssociation`\
PackagePrivate`keys$, 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                   
                   Block[{MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                   Blank[List], 
                   Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {12., 0}]], "MissingCode" -> 0, 
             "Version" -> {12., 0}, "ID" -> 2513527764629426718, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "NominalSequence", "Weight" -> 1],
              "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
             "Allowed"]]}, "Invertibility" -> "Impossible", "Missing" -> 
         "Imputed"]], "Method" -> "Markov", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "Order" -> Association["Value" -> 0, "Options" -> Association[]], 
        "AdditiveSmoothing" -> 
        Association["Value" -> 0.1, "Options" -> Association[]], 
        "MinimumTokenCount" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "ExcludedTokens" -> 
        Association["Value" -> {}, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[17841], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      1.0761179`7.483404848947518, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[0.5215388221389219, 0.18927656247620758`], "Accuracy" -> 
         Around[0.9510259512575043, 0.01331127276704116], "EvaluationTime" -> 
         0.0013675813386831493`, "TestSize" -> 300, "ModelMemory" -> 479096, 
         "ModelUtility" -> -0.14438536361989973`, "TrainingSize" -> 2069, 
         "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 28621680, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.5215388221389219, 0.18927656247620758`]}, 
         "AccuracyHistory" -> {
           Around[0.9510259512575043, 0.01331127276704116]}, 
         "Configuration" -> {
          "Markov", "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
           "MinimumTokenCount" -> Automatic, "ExcludedTokens" -> {}}], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}]}], 
        Association["ID" -> 91044900657895]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "Markov", "Options" -> 
           Association[
            "Order" -> Association["Value" -> Automatic], "AdditiveSmoothing" -> 
             Association["Value" -> 0.1], "MinimumTokenCount" -> 
             Association["Value" -> Automatic], "ExcludedTokens" -> 
             Association["Value" -> {}]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[50.20752043345913, 14.487526098280375`], "Accuracy" -> 
              Around[0.2510160748374945, 0.061048549843600114`], 
              "EvaluationTime" -> 0.0012589254117941673`, "TestSize" -> 100, 
              "ModelMemory" -> 55656, "ModelUtility" -> -4.689239708006266, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 165744, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[50.20752043345913, 10.244227946711137`]}, 
              "AccuracyHistory" -> {
                Around[0.2510160748374945, 0.04316784357601458]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[3.672977874853701, 1.0050965798835387`], "Accuracy" -> 
              Around[0.6470556787978913, 0.06785227710043647], 
              "EvaluationTime" -> 0.0015848931924611134`, "TestSize" -> 100, 
              "ModelMemory" -> 114024, "ModelUtility" -> -2.0942279401522916`,
               "TrainingSize" -> 60, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 891184, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.672977874853701, 0.7107106073830567]}, 
              "AccuracyHistory" -> {
                Around[0.6470556787978913, 0.04797880525666732]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[1.708993496347734, 0.9767320409819419], "Accuracy" -> 
              Around[0.8747784510751196, 0.04791074774100404], 
              "EvaluationTime" -> 0.0012589254117941673`, "TestSize" -> 100, 
              "ModelMemory" -> 257584, "ModelUtility" -> -1.3611349242499848`,
               "TrainingSize" -> 400, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 5619976, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.708993496347734, 0.6906538495805079]}, 
              "AccuracyHistory" -> {
                Around[0.8747784510751196, 0.033878014619382016`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5215388221389219, 0.18927656247620758`], "Accuracy" -> 
              Around[0.9510259512575043, 0.01331127276704116], 
              "EvaluationTime" -> 0.0013675813386831493`, "TestSize" -> 300, 
              "ModelMemory" -> 479096, 
              "ModelUtility" -> -0.14438536361989973`, "TrainingSize" -> 2069,
               "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
              28621680, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.5215388221389219, 0.18927656247620758`]}, 
              "AccuracyHistory" -> {
                Around[0.9510259512575043, 0.01331127276704116]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0013675813386831493`, "MeanCrossEntropy" -> 
             Around[0.5215388221389219, 0.18927656247620758`], "ModelMemory" -> 
             479096, "TrainingMemory" -> 28621680, "TrainingTime" -> 
             1.5893535790486888`], "Index" -> 1]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 4], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 91040605690599]], "MaxTrainingSize" -> 2586, 
      "PreprocessorEvaluationTime" -> 8.674609375`2.*^-6, 
      "PreprocessorMemory" -> 110184, "InputDimension" -> Rational[808, 5], 
      "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -1.0423541973338273`, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.7814404871772439`17.330232258960464*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.012714828632389511`, 
          "ElapsedTimes" -> 0.1459109, "ExperimentCounts" -> 1], 
         Association[
         "TrainingSizes" -> 60, "TimeBudgets" -> 0.06357414316194754, 
          "ElapsedTimes" -> 0.288296, "ExperimentCounts" -> 1], 
         Association[
         "TrainingSizes" -> 400, "TimeBudgets" -> 0.31787071580973775`, 
          "ElapsedTimes" -> 0.4611741, "ExperimentCounts" -> 1], 
         Association[
         "TrainingSizes" -> 2069, "TimeBudgets" -> 1.5893535790486888`, 
          "ElapsedTimes" -> 1.7959256, "ExperimentCounts" -> 1]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[91049195625191]], "ID" -> 91053490592487]]], 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Text", "Weight" -> 1, 
           "Values" -> {
            "A typical Rothes nose, with vanilla, granola, apple, Brazil nut, \
lemon, and\n\nlow-level sweet spices mixing with lightly oxidized fruits. \
That said, it needs\n\nwater, especially for the palate, where the malty \
crispness of the undiluted\n\ntaste is replaced by something more considered, \
darkly fruity and gently spicy;\n\ncoriander is uppermost. All in all, this \
is Rothes in very approachable rather\n\nthan dynamic guise. One for a lazy \
afternoon."}, "ID" -> 8648384402107197552]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 4.1815185, 
      "MaxTrainingMemory" -> 32863512, "DataMemory" -> 1440024, 
      "FunctionMemory" -> 652848, "LanguageVersion" -> {12., 0}, "Date" -> 
      DateObject[{2019, 10, 30, 16, 8, 7.2018848`8.610021140264903}, 
        "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.781458688837843*^9, {3.781458736102461*^9, 3.7814587465775585`*^9}, {
   3.781458779617765*^9, 3.7814587923567133`*^9}, 3.781465687309679*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"9d217e7a-d302-48f7-8082-f83df4f0140e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "@", "MarC"}]], "Input",
 CellChangeTimes->{{3.7814587455552917`*^9, 3.7814587516919065`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"a2496344-546b-4146-9ab2-8366608bc0c0"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12],
         FrameMargins->{{10, 5}, {-4, 2}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.96, 0.96, 0.96],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Data type\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], "\<\"Text\"\>"},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Classes\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{",","\",\"","1","2","3","4"},
               "RowWithSeparators"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Accuracy\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{InterpretationBox[
                 RowBox[{"(", 
                   TemplateBox[{"95.1", "1.3"}, "Around"], ")"}], 
                 Around[95.1025951257504402747`3., 1.3311272767041160137`3.]],
                "\"%\"","percent","\"Percent\""},
               "QuantityPostfix"]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["\<\"Markov\"\>",
                TemplateBox[{
                  TagBox[
                   
                   DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 20, "Length" -> 3, "InitialType" -> 
                    TypeSystem`Struct[{
                    "Order", "AdditiveSmoothing", "MinimumTokenCount"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Integer]}], "Shape" -> 
                    TypeSystem`PackageScope`DocumentShape[
                    
                    Association[{"Order"} -> 
                    TypeSystem`PackageScope`AtomShape[34], {
                    "AdditiveSmoothing"} -> 
                    TypeSystem`PackageScope`AtomShape[60], {
                    "MinimumTokenCount"} -> 
                    TypeSystem`PackageScope`AtomShape[34]], 1], "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[349194170], "Type" -> 
                    TypeSystem`Struct[{
                    "Order", "AdditiveSmoothing", "MinimumTokenCount"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Integer]}], "HandleQ" -> True, 
                    "RowTarget" -> 20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[349194170]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Order\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Order\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 469248156][{
                    Key["Order"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    469248156][
                    GeneralUtilities`Slice[
                    Key["Order"]]], "Mouse"], Background -> GrayLevel[0.95], 
                    Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    469248156][
                    GeneralUtilities`Slice[
                    Key["Order"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"AdditiveSmoothing\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"AdditiveSmoothing\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 469248156][{
                    Key["AdditiveSmoothing"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    469248156][
                    GeneralUtilities`Slice[
                    Key["AdditiveSmoothing"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0.1"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    469248156][
                    GeneralUtilities`Slice[
                    Key["AdditiveSmoothing"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"MinimumTokenCount\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"MinimumTokenCount\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 469248156][{
                    Key["MinimumTokenCount"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    469248156][
                    GeneralUtilities`Slice[
                    Key["MinimumTokenCount"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["1"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    469248156][
                    GeneralUtilities`Slice[
                    Key["MinimumTokenCount"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 469248156][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    469248156]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    469248156][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    469248156][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                   DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                 DisplayFunction -> (#& ), 
                 InterpretationFunction -> ("Dataset[<>]"& )]],
               Annotation[#, 
                Dataset[
                 Association[
                 "Order" -> 0, "AdditiveSmoothing" -> 0.1, 
                  "MinimumTokenCount" -> 1], 
                 
                 TypeSystem`Struct[{
                  "Order", "AdditiveSmoothing", "MinimumTokenCount"}, {
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer]}], 
                 Association["ID" -> 225193909181159]], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Single evaluation time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "6.15`",
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}],"milliseconds per example",FractionBox[
                "\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Batch evaluation speed\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "2.16`",
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"ms\""}],"examples per millisecond",
                FractionBox["\"Examples\"", "\"Milliseconds\""]},
               "Quantity"]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                 TagBox[
                  TooltipBox[
                  "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.521538822138921887`3.",StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.1892765624762075827`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.1429856971865067217`3.",
                   "\", \"", "0.9000919470913371079`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.1429856971865067217`3., 
                  ", ", 0.9000919470913371079`3., "]"}], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Model memory\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"655.`","\"kB\"","kilobytes","\"Kilobytes\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Training examples used\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"2586","\"examples\"","examples","\"Examples\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"4.18`","\"s\"","seconds","\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.916164824908828}, {
                    4.0943445622221, 1.3010027430931967`}, {5.991464547107982,
                     0.5359045985953375}, {
                    7.634820677745543, -0.6509715640926597}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    3.916164824908828}}, {{4.0943445622221, 
                    1.3010027430931967`}}, {{5.991464547107982, 
                    0.5359045985953375}}, {{
                    7.634820677745543, -0.6509715640926597}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 3.575710597418665}, {
                    2.302585092994046, 4.1696846380155055`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, 0.9812846349234536}, {
                    4.0943445622221, 1.5428865839688999`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.991464547107982, -0.3116176493327594}, {
                    5.991464547107982, 0.9879509102030769}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{7.634820677745543, -1.1018306831599314`}, {
                    7.634820677745543, -0.34134253885155785`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, -0.9047013634816312}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {-0.9047013634816312, 3.916164824908828}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.2510160748374945}, {
                    4.0943445622221, 0.6470556787978913}, {5.991464547107982, 
                    0.8747784510751196}, {7.634820677745543, 
                    0.9510259512575043}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.2510160748374945}}, {{4.0943445622221, 
                    0.6470556787978913}}, {{5.991464547107982, 
                    0.8747784510751196}}, {{7.634820677745543, 
                    0.9510259512575043}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, 0.2115958682499942}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {0.2115958682499942, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.916164824908828}, {
                    4.0943445622221, 1.3010027430931967`}, {5.991464547107982,
                     0.5359045985953375}, {
                    7.634820677745543, -0.6509715640926597}}]}, 
                    Column[{
                    Style["Markov", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
                    "MinimumTokenCount" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "Order", "AdditiveSmoothing", "MinimumTokenCount"}, {
                    TypeSystem`AnyType, 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 225198204148456]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.916164824908828}}, {{4.0943445622221,
                     1.3010027430931967`}}, {{5.991464547107982, 
                    0.5359045985953375}}, {{
                    7.634820677745543, -0.6509715640926597}}}]}, 
                    Column[{
                    Style["Markov", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
                    "MinimumTokenCount" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "Order", "AdditiveSmoothing", "MinimumTokenCount"}, {
                    TypeSystem`AnyType, 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 225198204148456]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["Markov", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
                    "MinimumTokenCount" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "Order", "AdditiveSmoothing", "MinimumTokenCount"}, {
                    TypeSystem`AnyType, 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 225198204148456]]}, Center]], {}}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["Markov", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
                    "MinimumTokenCount" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "Order", "AdditiveSmoothing", "MinimumTokenCount"}, {
                    TypeSystem`AnyType, 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 225198204148456]]}, 
                    Center]], {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, -0.9047013634816312}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {-0.9047013634816312, 3.916164824908828}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file12Panel`PackagePrivate`pos$$ - 1, 
                    1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file12Panel`PackagePrivate`pos$$ + 1, 
                    Length[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.916164824908828}, {
                    4.0943445622221, 1.3010027430931967`}, {5.991464547107982,
                     0.5359045985953375}, {
                    7.634820677745543, -0.6509715640926597}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    3.916164824908828}}, {{4.0943445622221, 
                    1.3010027430931967`}}, {{5.991464547107982, 
                    0.5359045985953375}}, {{
                    7.634820677745543, -0.6509715640926597}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 3.575710597418665}, {
                    2.302585092994046, 4.1696846380155055`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, 0.9812846349234536}, {
                    4.0943445622221, 1.5428865839688999`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.991464547107982, -0.3116176493327594}, {
                    5.991464547107982, 0.9879509102030769}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{7.634820677745543, -1.1018306831599314`}, {
                    7.634820677745543, -0.34134253885155785`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}}, {{}, {}}}}, {DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, -0.9047013634816312}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {-0.9047013634816312, 3.916164824908828}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.2510160748374945}, {
                    4.0943445622221, 0.6470556787978913}, {5.991464547107982, 
                    0.8747784510751196}, {7.634820677745543, 
                    0.9510259512575043}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.2510160748374945}}, {{4.0943445622221, 
                    0.6470556787978913}}, {{5.991464547107982, 
                    0.8747784510751196}}, {{7.634820677745543, 
                    0.9510259512575043}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, 0.2115958682499942}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {0.2115958682499942, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.916164824908828}, {
                    4.0943445622221, 1.3010027430931967`}, {5.991464547107982,
                     0.5359045985953375}, {
                    7.634820677745543, -0.6509715640926597}}]}, 
                    Column[{
                    Style["Markov", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
                    "MinimumTokenCount" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "Order", "AdditiveSmoothing", "MinimumTokenCount"}, {
                    TypeSystem`AnyType, 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 225198204148456]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.916164824908828}}, {{4.0943445622221,
                     1.3010027430931967`}}, {{5.991464547107982, 
                    0.5359045985953375}}, {{
                    7.634820677745543, -0.6509715640926597}}}]}, 
                    Column[{
                    Style["Markov", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
                    "MinimumTokenCount" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "Order", "AdditiveSmoothing", "MinimumTokenCount"}, {
                    TypeSystem`AnyType, 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 225198204148456]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["Markov", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
                    "MinimumTokenCount" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "Order", "AdditiveSmoothing", "MinimumTokenCount"}, {
                    TypeSystem`AnyType, 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 225198204148456]]}, Center]], {}}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["Markov", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
                    "MinimumTokenCount" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "Order", "AdditiveSmoothing", "MinimumTokenCount"}, {
                    TypeSystem`AnyType, 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 225198204148456]]}, 
                    Center]], {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, -0.9047013634816312}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {-0.9047013634816312, 3.916164824908828}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}]}]], 
                    Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{429., {159., 165.}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[0.8], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Background->GrayLevel[1],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{{3.781458753328512*^9, 3.7814587943603635`*^9}, 
   3.7814656879907866`*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"77047472-cc54-456b-b8e9-90e885b5a4cb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"wordExtractor", "=", 
  RowBox[{"FeatureExtraction", "[", 
   RowBox[{
    RowBox[{"train", "[", 
     RowBox[{"[", 
      RowBox[{
       RowBox[{"2", ";;", "All"}], ",", "2"}], "]"}], "]"}], ",", 
    "\"\<SegmentedWords\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7814595520038166`*^9, 3.7814595702800093`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"cfbd1132-b36a-4289-89c3-c867f62c52a4"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["FeatureExtractorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              InsetBox[
               FormBox[
                TagBox[
                 GridBox[{{
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.21999999999999997`}}, 
                    "Rows" -> {{-0.43}}}], "Grid"], TraditionalForm], {295, 
               559}], 
              GeometricTransformationBox[
               GeometricTransformationBox[
                GeometricTransformationBox[{
                  Thickness[0.015], 
                  JoinForm[{"Miter", 10.}], 
                  GrayLevel[0.7], 
                  Opacity[1.], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJyNl3toVEcYxVcFsamKxdT6wBr7R0iwaQkhgtjIlKhRkLSJVYgG29gKSnX3
3rsUTYrde7GK8RVDRBG1KFqIQmyqpijYNvVRNLSijRDfmipSTaKUkGCVPu7O
95t7wWWpf4icPec735mZb2cnExfHypcMjEQibf6/5P91p/pyKttt1bHfKsro
8VRupf/JL7ayizI69j/yVBLmnLNVElqPPaX1p0Os+WZbHfDLO/6kfjd8r6f6
c/wPavHvQ78K/jb8Mvq14b8Qv5ZUfNqHddPSY62fRL8W/MfYKtmu6Bj9h9Dv
CPxfltR/S32XJfm+YT03LPFrMuuH/xG/RuovkWcL/N1UrP02WZLnXirW/mss
yfc7+arp3wm24W+Bq/C/Tv1ccAf+09H/Rp638PvV7A/5z8IPhv8+PdZ5T6Zi
46dxozkP8DZzXmAXvoB8NdTnkucz9jeL9cTQjyTPMnOe4CpPre0qO/763zHB
FZ7q9uHa3pj4zYPviUm/ck9NSH5wH1wKvznkdX0BeL6nyn3YdTUqfhXg81FZ
z/vgE1HRz8SvCf4dTyXpsr3gN/FviEre8aY//sNSsc67jvX0uS+MdZ6H6bHW
d7qSvzYm+a645EN/Af128M8u6wH/QP1B8HfwH+F/EH4M57MH/mJU7T6T1ezU
4d8flfNe6cr689BXgVeQb04q1n7W/+BWMw9uMD867yJX5i+f+VzqyrxNZf4+
doPvk8YfujLPpdQvgK+k/gP4KHwp/h7zOht+HX4lbnAf6Hwz6N8AXwzeCJ+H
/kv41/D7Av8BrG+rpQ6XdNZkPk1I/32WmuXDw70JqT9mqc8zfcUj+BOWStIl
PYngvtP1D8Ht6O+jf2CpJKy5k5B+EVvqb+KfaUv9tYTky+b+HUjeyXaQX/aX
+zsvFet+Femx1i8PseyHHeyX7Af93gbvRZ/vBr9nmi8At1JfmB7r+kLy/BRi
vV/XWe8b5Onn92gE9SMcOY9n7N9oR/gIfJYj/QZQn+1IvkFm/xzxH2z2C5xB
/7ng4eBP8XvVzCN4PH7b0Web+aLfVPQ2+D30i8j7CXmXOtzPYAv/FdRX4++E
/pqvNucD9tDvxK82xJqvZT278NsQYp1vI/m+Qr+Z+n341dP/APoG+EvgOur/
YX2b8J8UF7weXBAX/3rqp8SlfhfrUfBfw79LfSP1xXHJf8icH/om+s9E3xxi
eb/gNxt9C/Vz0LfCl6FvM/MAfxk+Ny77cfO59d7D7zK4Oz02vzfpsN6Pf+nf
Dv8S74EL8CPN+5PzHGven+gnwp/h/HJ5LzyAL8RvOPtfDJ/P+spSsTm/dFi+
f/HgvSHvHfwT6O86wftG7k8zf+B6M8/mvYt+lRd8fzS/2gu+r7p+Df1noV9P
/RQzz+Z9ZeYXPA68A/9R6Hd6wX0j84n+ZfZzD/6vwB817znqz3vBfaTz3OE8
hjrB+1XzT7jf/jD7w33aRZ5b8N3or4R/fzz/98h/NOnbyg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/U0jpv/QygKHJQW2XNcPNjgc/goU6CtwuL4YKHCz
wQEo+1WjA8r/CJWfVuBQCFS+mKvRASQds7jAgQukQKXRAWzewQIHkHSBeSNE
/weoftdGB02QgEwhxL7ARoh5foUQ+VCo+oZCiPl+UPM3F0LMc4fyb0PVW0LN
+wI1TxGqX6AI7j6w+WJQ/ieofziK4P4Dm/cbav7+Boh5dwoh/lkDVb8BKj+/
Ae4+sH0TofwAqHv7oOEjB5WfCjX/NTR85kD5h6Hhs7rBAT38ARfPvOE=
                    "]}, CurveClosed -> {1, 1}], 
                  GrayLevel[0], 
                  Opacity[1.], 
                  
                  JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJyNl3toVEcYxVcFsamKxdT6wBr7R0iwaQkhgtjIlKhRkLSJVYgG29gKSnX3
3rsUTYrde7GK8RVDRBG1KFqIQmyqpijYNvVRNLSijRDfmipSTaKUkGCVPu7O
95t7wWWpf4icPec735mZb2cnExfHypcMjEQibf6/5P91p/pyKttt1bHfKsro
8VRupf/JL7ayizI69j/yVBLmnLNVElqPPaX1p0Os+WZbHfDLO/6kfjd8r6f6
c/wPavHvQ78K/jb8Mvq14b8Qv5ZUfNqHddPSY62fRL8W/MfYKtmu6Bj9h9Dv
CPxfltR/S32XJfm+YT03LPFrMuuH/xG/RuovkWcL/N1UrP02WZLnXirW/mss
yfc7+arp3wm24W+Bq/C/Tv1ccAf+09H/Rp638PvV7A/5z8IPhv8+PdZ5T6Zi
46dxozkP8DZzXmAXvoB8NdTnkucz9jeL9cTQjyTPMnOe4CpPre0qO/763zHB
FZ7q9uHa3pj4zYPviUm/ck9NSH5wH1wKvznkdX0BeL6nyn3YdTUqfhXg81FZ
z/vgE1HRz8SvCf4dTyXpsr3gN/FviEre8aY//sNSsc67jvX0uS+MdZ6H6bHW
d7qSvzYm+a645EN/Af128M8u6wH/QP1B8HfwH+F/EH4M57MH/mJU7T6T1ezU
4d8flfNe6cr689BXgVeQb04q1n7W/+BWMw9uMD867yJX5i+f+VzqyrxNZf4+
doPvk8YfujLPpdQvgK+k/gP4KHwp/h7zOht+HX4lbnAf6Hwz6N8AXwzeCJ+H
/kv41/D7Av8BrG+rpQ6XdNZkPk1I/32WmuXDw70JqT9mqc8zfcUj+BOWStIl
PYngvtP1D8Ht6O+jf2CpJKy5k5B+EVvqb+KfaUv9tYTky+b+HUjeyXaQX/aX
+zsvFet+Femx1i8PseyHHeyX7Af93gbvRZ/vBr9nmi8At1JfmB7r+kLy/BRi
vV/XWe8b5Onn92gE9SMcOY9n7N9oR/gIfJYj/QZQn+1IvkFm/xzxH2z2C5xB
/7ng4eBP8XvVzCN4PH7b0Web+aLfVPQ2+D30i8j7CXmXOtzPYAv/FdRX4++E
/pqvNucD9tDvxK82xJqvZT278NsQYp1vI/m+Qr+Z+n341dP/APoG+EvgOur/
YX2b8J8UF7weXBAX/3rqp8SlfhfrUfBfw79LfSP1xXHJf8icH/om+s9E3xxi
eb/gNxt9C/Vz0LfCl6FvM/MAfxk+Ny77cfO59d7D7zK4Oz02vzfpsN6Pf+nf
Dv8S74EL8CPN+5PzHGven+gnwp/h/HJ5LzyAL8RvOPtfDJ/P+spSsTm/dFi+
f/HgvSHvHfwT6O86wftG7k8zf+B6M8/mvYt+lRd8fzS/2gu+r7p+Df1noV9P
/RQzz+Z9ZeYXPA68A/9R6Hd6wX0j84n+ZfZzD/6vwB817znqz3vBfaTz3OE8
hjrB+1XzT7jf/jD7w33aRZ5b8N3or4R/fzz/98h/NOnbyg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/U0jpv/QygKHJQW2XNcPNjgc/goU6CtwuL4YKHCz
wQEo+1WjA8r/CJWfVuBQCFS+mKvRASQds7jAgQukQKXRAWzewQIHkHSBeSNE
/weoftdGB02QgEwhxL7ARoh5foUQ+VCo+oZCiPl+UPM3F0LMc4fyb0PVW0LN
+wI1TxGqX6AI7j6w+WJQ/ieofziK4P4Dm/cbav7+Boh5dwoh/lkDVb8BKj+/
Ae4+sH0TofwAqHv7oOEjB5WfCjX/NTR85kD5h6Hhs7rBAT38ARfPvOE=
                    "]}, CurveClosed -> {1, 1}]}, {0, 0}], {{{
                 0.9975154303260024, -0.07044832334080162}, {
                 0.07044832334080162, 0.9975154303260024}}, Center}], {{{1, 
                0}, {0, 1}}, Center}], 
              GeometricTransformationBox[
               GeometricTransformationBox[
                GeometricTransformationBox[{
                  Thickness[0.015], 
                  JoinForm[{"Miter", 10.}], 
                  GrayLevel[0.7], 
                  Opacity[1.], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJyNl3toVEcYxVcFsamKxdT6wBr7R0iwaQkhgtjIlKhRkLSJVYgG29gKSnX3
3rsUTYrde7GK8RVDRBG1KFqIQmyqpijYNvVRNLSijRDfmipSTaKUkGCVPu7O
95t7wWWpf4icPec735mZb2cnExfHypcMjEQibf6/5P91p/pyKttt1bHfKsro
8VRupf/JL7ayizI69j/yVBLmnLNVElqPPaX1p0Os+WZbHfDLO/6kfjd8r6f6
c/wPavHvQ78K/jb8Mvq14b8Qv5ZUfNqHddPSY62fRL8W/MfYKtmu6Bj9h9Dv
CPxfltR/S32XJfm+YT03LPFrMuuH/xG/RuovkWcL/N1UrP02WZLnXirW/mss
yfc7+arp3wm24W+Bq/C/Tv1ccAf+09H/Rp638PvV7A/5z8IPhv8+PdZ5T6Zi
46dxozkP8DZzXmAXvoB8NdTnkucz9jeL9cTQjyTPMnOe4CpPre0qO/763zHB
FZ7q9uHa3pj4zYPviUm/ck9NSH5wH1wKvznkdX0BeL6nyn3YdTUqfhXg81FZ
z/vgE1HRz8SvCf4dTyXpsr3gN/FviEre8aY//sNSsc67jvX0uS+MdZ6H6bHW
d7qSvzYm+a645EN/Af128M8u6wH/QP1B8HfwH+F/EH4M57MH/mJU7T6T1ezU
4d8flfNe6cr689BXgVeQb04q1n7W/+BWMw9uMD867yJX5i+f+VzqyrxNZf4+
doPvk8YfujLPpdQvgK+k/gP4KHwp/h7zOht+HX4lbnAf6Hwz6N8AXwzeCJ+H
/kv41/D7Av8BrG+rpQ6XdNZkPk1I/32WmuXDw70JqT9mqc8zfcUj+BOWStIl
PYngvtP1D8Ht6O+jf2CpJKy5k5B+EVvqb+KfaUv9tYTky+b+HUjeyXaQX/aX
+zsvFet+Femx1i8PseyHHeyX7Af93gbvRZ/vBr9nmi8At1JfmB7r+kLy/BRi
vV/XWe8b5Onn92gE9SMcOY9n7N9oR/gIfJYj/QZQn+1IvkFm/xzxH2z2C5xB
/7ng4eBP8XvVzCN4PH7b0Web+aLfVPQ2+D30i8j7CXmXOtzPYAv/FdRX4++E
/pqvNucD9tDvxK82xJqvZT278NsQYp1vI/m+Qr+Z+n341dP/APoG+EvgOur/
YX2b8J8UF7weXBAX/3rqp8SlfhfrUfBfw79LfSP1xXHJf8icH/om+s9E3xxi
eb/gNxt9C/Vz0LfCl6FvM/MAfxk+Ny77cfO59d7D7zK4Oz02vzfpsN6Pf+nf
Dv8S74EL8CPN+5PzHGven+gnwp/h/HJ5LzyAL8RvOPtfDJ/P+spSsTm/dFi+
f/HgvSHvHfwT6O86wftG7k8zf+B6M8/mvYt+lRd8fzS/2gu+r7p+Df1noV9P
/RQzz+Z9ZeYXPA68A/9R6Hd6wX0j84n+ZfZzD/6vwB817znqz3vBfaTz3OE8
hjrB+1XzT7jf/jD7w33aRZ5b8N3or4R/fzz/98h/NOnbyg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/U0jpv/QygKHJQW2XNcPNjgc/goU6CtwuL4YKHCz
wQEo+1WjA8r/CJWfVuBQCFS+mKvRASQds7jAgQukQKXRAWzewQIHkHSBeSNE
/weoftdGB02QgEwhxL7ARoh5foUQ+VCo+oZCiPl+UPM3F0LMc4fyb0PVW0LN
+wI1TxGqX6AI7j6w+WJQ/ieofziK4P4Dm/cbav7+Boh5dwoh/lkDVb8BKj+/
Ae4+sH0TofwAqHv7oOEjB5WfCjX/NTR85kD5h6Hhs7rBAT38ARfPvOE=
                    "]}, CurveClosed -> {1, 1}], 
                  GrayLevel[0], 
                  Opacity[1.], 
                  
                  JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJyNl3toVEcYxVcFsamKxdT6wBr7R0iwaQkhgtjIlKhRkLSJVYgG29gKSnX3
3rsUTYrde7GK8RVDRBG1KFqIQmyqpijYNvVRNLSijRDfmipSTaKUkGCVPu7O
95t7wWWpf4icPec735mZb2cnExfHypcMjEQibf6/5P91p/pyKttt1bHfKsro
8VRupf/JL7ayizI69j/yVBLmnLNVElqPPaX1p0Os+WZbHfDLO/6kfjd8r6f6
c/wPavHvQ78K/jb8Mvq14b8Qv5ZUfNqHddPSY62fRL8W/MfYKtmu6Bj9h9Dv
CPxfltR/S32XJfm+YT03LPFrMuuH/xG/RuovkWcL/N1UrP02WZLnXirW/mss
yfc7+arp3wm24W+Bq/C/Tv1ccAf+09H/Rp638PvV7A/5z8IPhv8+PdZ5T6Zi
46dxozkP8DZzXmAXvoB8NdTnkucz9jeL9cTQjyTPMnOe4CpPre0qO/763zHB
FZ7q9uHa3pj4zYPviUm/ck9NSH5wH1wKvznkdX0BeL6nyn3YdTUqfhXg81FZ
z/vgE1HRz8SvCf4dTyXpsr3gN/FviEre8aY//sNSsc67jvX0uS+MdZ6H6bHW
d7qSvzYm+a645EN/Af128M8u6wH/QP1B8HfwH+F/EH4M57MH/mJU7T6T1ezU
4d8flfNe6cr689BXgVeQb04q1n7W/+BWMw9uMD867yJX5i+f+VzqyrxNZf4+
doPvk8YfujLPpdQvgK+k/gP4KHwp/h7zOht+HX4lbnAf6Hwz6N8AXwzeCJ+H
/kv41/D7Av8BrG+rpQ6XdNZkPk1I/32WmuXDw70JqT9mqc8zfcUj+BOWStIl
PYngvtP1D8Ht6O+jf2CpJKy5k5B+EVvqb+KfaUv9tYTky+b+HUjeyXaQX/aX
+zsvFet+Femx1i8PseyHHeyX7Af93gbvRZ/vBr9nmi8At1JfmB7r+kLy/BRi
vV/XWe8b5Onn92gE9SMcOY9n7N9oR/gIfJYj/QZQn+1IvkFm/xzxH2z2C5xB
/7ng4eBP8XvVzCN4PH7b0Web+aLfVPQ2+D30i8j7CXmXOtzPYAv/FdRX4++E
/pqvNucD9tDvxK82xJqvZT278NsQYp1vI/m+Qr+Z+n341dP/APoG+EvgOur/
YX2b8J8UF7weXBAX/3rqp8SlfhfrUfBfw79LfSP1xXHJf8icH/om+s9E3xxi
eb/gNxt9C/Vz0LfCl6FvM/MAfxk+Ny77cfO59d7D7zK4Oz02vzfpsN6Pf+nf
Dv8S74EL8CPN+5PzHGven+gnwp/h/HJ5LzyAL8RvOPtfDJ/P+spSsTm/dFi+
f/HgvSHvHfwT6O86wftG7k8zf+B6M8/mvYt+lRd8fzS/2gu+r7p+Df1noV9P
/RQzz+Z9ZeYXPA68A/9R6Hd6wX0j84n+ZfZzD/6vwB817znqz3vBfaTz3OE8
hjrB+1XzT7jf/jD7w33aRZ5b8N3or4R/fzz/98h/NOnbyg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/U0jpv/QygKHJQW2XNcPNjgc/goU6CtwuL4YKHCz
wQEo+1WjA8r/CJWfVuBQCFS+mKvRASQds7jAgQukQKXRAWzewQIHkHSBeSNE
/weoftdGB02QgEwhxL7ARoh5foUQ+VCo+oZCiPl+UPM3F0LMc4fyb0PVW0LN
+wI1TxGqX6AI7j6w+WJQ/ieofziK4P4Dm/cbav7+Boh5dwoh/lkDVb8BKj+/
Ae4+sH0TofwAqHv7oOEjB5WfCjX/NTR85kD5h6Hhs7rBAT38ARfPvOE=
                    "]}, CurveClosed -> {1, 1}]}, {42, 42}], {{{
                 0.9995651049196275, -0.029488998406425115`}, {
                 0.029488998406425115`, 0.9995651049196275}}, Center}], {{{
                0.8, 0.}, {0., 0.8}}, Center}]}, ImagePadding -> 0.2, 
             PlotRange -> {{242, 348}, {506, 612}}, PlotRangeClipping -> True,
              FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Text\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Output type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NominalSequence\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              InsetBox[
               FormBox[
                TagBox[
                 GridBox[{{
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.21999999999999997`}}, 
                    "Rows" -> {{-0.43}}}], "Grid"], TraditionalForm], {295, 
               559}], 
              GeometricTransformationBox[
               GeometricTransformationBox[
                GeometricTransformationBox[{
                  Thickness[0.015], 
                  JoinForm[{"Miter", 10.}], 
                  GrayLevel[0.7], 
                  Opacity[1.], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJyNl3toVEcYxVcFsamKxdT6wBr7R0iwaQkhgtjIlKhRkLSJVYgG29gKSnX3
3rsUTYrde7GK8RVDRBG1KFqIQmyqpijYNvVRNLSijRDfmipSTaKUkGCVPu7O
95t7wWWpf4icPec735mZb2cnExfHypcMjEQibf6/5P91p/pyKttt1bHfKsro
8VRupf/JL7ayizI69j/yVBLmnLNVElqPPaX1p0Os+WZbHfDLO/6kfjd8r6f6
c/wPavHvQ78K/jb8Mvq14b8Qv5ZUfNqHddPSY62fRL8W/MfYKtmu6Bj9h9Dv
CPxfltR/S32XJfm+YT03LPFrMuuH/xG/RuovkWcL/N1UrP02WZLnXirW/mss
yfc7+arp3wm24W+Bq/C/Tv1ccAf+09H/Rp638PvV7A/5z8IPhv8+PdZ5T6Zi
46dxozkP8DZzXmAXvoB8NdTnkucz9jeL9cTQjyTPMnOe4CpPre0qO/763zHB
FZ7q9uHa3pj4zYPviUm/ck9NSH5wH1wKvznkdX0BeL6nyn3YdTUqfhXg81FZ
z/vgE1HRz8SvCf4dTyXpsr3gN/FviEre8aY//sNSsc67jvX0uS+MdZ6H6bHW
d7qSvzYm+a645EN/Af128M8u6wH/QP1B8HfwH+F/EH4M57MH/mJU7T6T1ezU
4d8flfNe6cr689BXgVeQb04q1n7W/+BWMw9uMD867yJX5i+f+VzqyrxNZf4+
doPvk8YfujLPpdQvgK+k/gP4KHwp/h7zOht+HX4lbnAf6Hwz6N8AXwzeCJ+H
/kv41/D7Av8BrG+rpQ6XdNZkPk1I/32WmuXDw70JqT9mqc8zfcUj+BOWStIl
PYngvtP1D8Ht6O+jf2CpJKy5k5B+EVvqb+KfaUv9tYTky+b+HUjeyXaQX/aX
+zsvFet+Femx1i8PseyHHeyX7Af93gbvRZ/vBr9nmi8At1JfmB7r+kLy/BRi
vV/XWe8b5Onn92gE9SMcOY9n7N9oR/gIfJYj/QZQn+1IvkFm/xzxH2z2C5xB
/7ng4eBP8XvVzCN4PH7b0Web+aLfVPQ2+D30i8j7CXmXOtzPYAv/FdRX4++E
/pqvNucD9tDvxK82xJqvZT278NsQYp1vI/m+Qr+Z+n341dP/APoG+EvgOur/
YX2b8J8UF7weXBAX/3rqp8SlfhfrUfBfw79LfSP1xXHJf8icH/om+s9E3xxi
eb/gNxt9C/Vz0LfCl6FvM/MAfxk+Ny77cfO59d7D7zK4Oz02vzfpsN6Pf+nf
Dv8S74EL8CPN+5PzHGven+gnwp/h/HJ5LzyAL8RvOPtfDJ/P+spSsTm/dFi+
f/HgvSHvHfwT6O86wftG7k8zf+B6M8/mvYt+lRd8fzS/2gu+r7p+Df1noV9P
/RQzz+Z9ZeYXPA68A/9R6Hd6wX0j84n+ZfZzD/6vwB817znqz3vBfaTz3OE8
hjrB+1XzT7jf/jD7w33aRZ5b8N3or4R/fzz/98h/NOnbyg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/U0jpv/QygKHJQW2XNcPNjgc/goU6CtwuL4YKHCz
wQEo+1WjA8r/CJWfVuBQCFS+mKvRASQds7jAgQukQKXRAWzewQIHkHSBeSNE
/weoftdGB02QgEwhxL7ARoh5foUQ+VCo+oZCiPl+UPM3F0LMc4fyb0PVW0LN
+wI1TxGqX6AI7j6w+WJQ/ieofziK4P4Dm/cbav7+Boh5dwoh/lkDVb8BKj+/
Ae4+sH0TofwAqHv7oOEjB5WfCjX/NTR85kD5h6Hhs7rBAT38ARfPvOE=
                    "]}, CurveClosed -> {1, 1}], 
                  GrayLevel[0], 
                  Opacity[1.], 
                  
                  JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJyNl3toVEcYxVcFsamKxdT6wBr7R0iwaQkhgtjIlKhRkLSJVYgG29gKSnX3
3rsUTYrde7GK8RVDRBG1KFqIQmyqpijYNvVRNLSijRDfmipSTaKUkGCVPu7O
95t7wWWpf4icPec735mZb2cnExfHypcMjEQibf6/5P91p/pyKttt1bHfKsro
8VRupf/JL7ayizI69j/yVBLmnLNVElqPPaX1p0Os+WZbHfDLO/6kfjd8r6f6
c/wPavHvQ78K/jb8Mvq14b8Qv5ZUfNqHddPSY62fRL8W/MfYKtmu6Bj9h9Dv
CPxfltR/S32XJfm+YT03LPFrMuuH/xG/RuovkWcL/N1UrP02WZLnXirW/mss
yfc7+arp3wm24W+Bq/C/Tv1ccAf+09H/Rp638PvV7A/5z8IPhv8+PdZ5T6Zi
46dxozkP8DZzXmAXvoB8NdTnkucz9jeL9cTQjyTPMnOe4CpPre0qO/763zHB
FZ7q9uHa3pj4zYPviUm/ck9NSH5wH1wKvznkdX0BeL6nyn3YdTUqfhXg81FZ
z/vgE1HRz8SvCf4dTyXpsr3gN/FviEre8aY//sNSsc67jvX0uS+MdZ6H6bHW
d7qSvzYm+a645EN/Af128M8u6wH/QP1B8HfwH+F/EH4M57MH/mJU7T6T1ezU
4d8flfNe6cr689BXgVeQb04q1n7W/+BWMw9uMD867yJX5i+f+VzqyrxNZf4+
doPvk8YfujLPpdQvgK+k/gP4KHwp/h7zOht+HX4lbnAf6Hwz6N8AXwzeCJ+H
/kv41/D7Av8BrG+rpQ6XdNZkPk1I/32WmuXDw70JqT9mqc8zfcUj+BOWStIl
PYngvtP1D8Ht6O+jf2CpJKy5k5B+EVvqb+KfaUv9tYTky+b+HUjeyXaQX/aX
+zsvFet+Femx1i8PseyHHeyX7Af93gbvRZ/vBr9nmi8At1JfmB7r+kLy/BRi
vV/XWe8b5Onn92gE9SMcOY9n7N9oR/gIfJYj/QZQn+1IvkFm/xzxH2z2C5xB
/7ng4eBP8XvVzCN4PH7b0Web+aLfVPQ2+D30i8j7CXmXOtzPYAv/FdRX4++E
/pqvNucD9tDvxK82xJqvZT278NsQYp1vI/m+Qr+Z+n341dP/APoG+EvgOur/
YX2b8J8UF7weXBAX/3rqp8SlfhfrUfBfw79LfSP1xXHJf8icH/om+s9E3xxi
eb/gNxt9C/Vz0LfCl6FvM/MAfxk+Ny77cfO59d7D7zK4Oz02vzfpsN6Pf+nf
Dv8S74EL8CPN+5PzHGven+gnwp/h/HJ5LzyAL8RvOPtfDJ/P+spSsTm/dFi+
f/HgvSHvHfwT6O86wftG7k8zf+B6M8/mvYt+lRd8fzS/2gu+r7p+Df1noV9P
/RQzz+Z9ZeYXPA68A/9R6Hd6wX0j84n+ZfZzD/6vwB817znqz3vBfaTz3OE8
hjrB+1XzT7jf/jD7w33aRZ5b8N3or4R/fzz/98h/NOnbyg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/U0jpv/QygKHJQW2XNcPNjgc/goU6CtwuL4YKHCz
wQEo+1WjA8r/CJWfVuBQCFS+mKvRASQds7jAgQukQKXRAWzewQIHkHSBeSNE
/weoftdGB02QgEwhxL7ARoh5foUQ+VCo+oZCiPl+UPM3F0LMc4fyb0PVW0LN
+wI1TxGqX6AI7j6w+WJQ/ieofziK4P4Dm/cbav7+Boh5dwoh/lkDVb8BKj+/
Ae4+sH0TofwAqHv7oOEjB5WfCjX/NTR85kD5h6Hhs7rBAT38ARfPvOE=
                    "]}, CurveClosed -> {1, 1}]}, {0, 0}], {{{
                 0.9975154303260024, -0.07044832334080162}, {
                 0.07044832334080162, 0.9975154303260024}}, Center}], {{{1, 
                0}, {0, 1}}, Center}], 
              GeometricTransformationBox[
               GeometricTransformationBox[
                GeometricTransformationBox[{
                  Thickness[0.015], 
                  JoinForm[{"Miter", 10.}], 
                  GrayLevel[0.7], 
                  Opacity[1.], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJyNl3toVEcYxVcFsamKxdT6wBr7R0iwaQkhgtjIlKhRkLSJVYgG29gKSnX3
3rsUTYrde7GK8RVDRBG1KFqIQmyqpijYNvVRNLSijRDfmipSTaKUkGCVPu7O
95t7wWWpf4icPec735mZb2cnExfHypcMjEQibf6/5P91p/pyKttt1bHfKsro
8VRupf/JL7ayizI69j/yVBLmnLNVElqPPaX1p0Os+WZbHfDLO/6kfjd8r6f6
c/wPavHvQ78K/jb8Mvq14b8Qv5ZUfNqHddPSY62fRL8W/MfYKtmu6Bj9h9Dv
CPxfltR/S32XJfm+YT03LPFrMuuH/xG/RuovkWcL/N1UrP02WZLnXirW/mss
yfc7+arp3wm24W+Bq/C/Tv1ccAf+09H/Rp638PvV7A/5z8IPhv8+PdZ5T6Zi
46dxozkP8DZzXmAXvoB8NdTnkucz9jeL9cTQjyTPMnOe4CpPre0qO/763zHB
FZ7q9uHa3pj4zYPviUm/ck9NSH5wH1wKvznkdX0BeL6nyn3YdTUqfhXg81FZ
z/vgE1HRz8SvCf4dTyXpsr3gN/FviEre8aY//sNSsc67jvX0uS+MdZ6H6bHW
d7qSvzYm+a645EN/Af128M8u6wH/QP1B8HfwH+F/EH4M57MH/mJU7T6T1ezU
4d8flfNe6cr689BXgVeQb04q1n7W/+BWMw9uMD867yJX5i+f+VzqyrxNZf4+
doPvk8YfujLPpdQvgK+k/gP4KHwp/h7zOht+HX4lbnAf6Hwz6N8AXwzeCJ+H
/kv41/D7Av8BrG+rpQ6XdNZkPk1I/32WmuXDw70JqT9mqc8zfcUj+BOWStIl
PYngvtP1D8Ht6O+jf2CpJKy5k5B+EVvqb+KfaUv9tYTky+b+HUjeyXaQX/aX
+zsvFet+Femx1i8PseyHHeyX7Af93gbvRZ/vBr9nmi8At1JfmB7r+kLy/BRi
vV/XWe8b5Onn92gE9SMcOY9n7N9oR/gIfJYj/QZQn+1IvkFm/xzxH2z2C5xB
/7ng4eBP8XvVzCN4PH7b0Web+aLfVPQ2+D30i8j7CXmXOtzPYAv/FdRX4++E
/pqvNucD9tDvxK82xJqvZT278NsQYp1vI/m+Qr+Z+n341dP/APoG+EvgOur/
YX2b8J8UF7weXBAX/3rqp8SlfhfrUfBfw79LfSP1xXHJf8icH/om+s9E3xxi
eb/gNxt9C/Vz0LfCl6FvM/MAfxk+Ny77cfO59d7D7zK4Oz02vzfpsN6Pf+nf
Dv8S74EL8CPN+5PzHGven+gnwp/h/HJ5LzyAL8RvOPtfDJ/P+spSsTm/dFi+
f/HgvSHvHfwT6O86wftG7k8zf+B6M8/mvYt+lRd8fzS/2gu+r7p+Df1noV9P
/RQzz+Z9ZeYXPA68A/9R6Hd6wX0j84n+ZfZzD/6vwB817znqz3vBfaTz3OE8
hjrB+1XzT7jf/jD7w33aRZ5b8N3or4R/fzz/98h/NOnbyg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/U0jpv/QygKHJQW2XNcPNjgc/goU6CtwuL4YKHCz
wQEo+1WjA8r/CJWfVuBQCFS+mKvRASQds7jAgQukQKXRAWzewQIHkHSBeSNE
/weoftdGB02QgEwhxL7ARoh5foUQ+VCo+oZCiPl+UPM3F0LMc4fyb0PVW0LN
+wI1TxGqX6AI7j6w+WJQ/ieofziK4P4Dm/cbav7+Boh5dwoh/lkDVb8BKj+/
Ae4+sH0TofwAqHv7oOEjB5WfCjX/NTR85kD5h6Hhs7rBAT38ARfPvOE=
                    "]}, CurveClosed -> {1, 1}], 
                  GrayLevel[0], 
                  Opacity[1.], 
                  
                  JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJyNl3toVEcYxVcFsamKxdT6wBr7R0iwaQkhgtjIlKhRkLSJVYgG29gKSnX3
3rsUTYrde7GK8RVDRBG1KFqIQmyqpijYNvVRNLSijRDfmipSTaKUkGCVPu7O
95t7wWWpf4icPec735mZb2cnExfHypcMjEQibf6/5P91p/pyKttt1bHfKsro
8VRupf/JL7ayizI69j/yVBLmnLNVElqPPaX1p0Os+WZbHfDLO/6kfjd8r6f6
c/wPavHvQ78K/jb8Mvq14b8Qv5ZUfNqHddPSY62fRL8W/MfYKtmu6Bj9h9Dv
CPxfltR/S32XJfm+YT03LPFrMuuH/xG/RuovkWcL/N1UrP02WZLnXirW/mss
yfc7+arp3wm24W+Bq/C/Tv1ccAf+09H/Rp638PvV7A/5z8IPhv8+PdZ5T6Zi
46dxozkP8DZzXmAXvoB8NdTnkucz9jeL9cTQjyTPMnOe4CpPre0qO/763zHB
FZ7q9uHa3pj4zYPviUm/ck9NSH5wH1wKvznkdX0BeL6nyn3YdTUqfhXg81FZ
z/vgE1HRz8SvCf4dTyXpsr3gN/FviEre8aY//sNSsc67jvX0uS+MdZ6H6bHW
d7qSvzYm+a645EN/Af128M8u6wH/QP1B8HfwH+F/EH4M57MH/mJU7T6T1ezU
4d8flfNe6cr689BXgVeQb04q1n7W/+BWMw9uMD867yJX5i+f+VzqyrxNZf4+
doPvk8YfujLPpdQvgK+k/gP4KHwp/h7zOht+HX4lbnAf6Hwz6N8AXwzeCJ+H
/kv41/D7Av8BrG+rpQ6XdNZkPk1I/32WmuXDw70JqT9mqc8zfcUj+BOWStIl
PYngvtP1D8Ht6O+jf2CpJKy5k5B+EVvqb+KfaUv9tYTky+b+HUjeyXaQX/aX
+zsvFet+Femx1i8PseyHHeyX7Af93gbvRZ/vBr9nmi8At1JfmB7r+kLy/BRi
vV/XWe8b5Onn92gE9SMcOY9n7N9oR/gIfJYj/QZQn+1IvkFm/xzxH2z2C5xB
/7ng4eBP8XvVzCN4PH7b0Web+aLfVPQ2+D30i8j7CXmXOtzPYAv/FdRX4++E
/pqvNucD9tDvxK82xJqvZT278NsQYp1vI/m+Qr+Z+n341dP/APoG+EvgOur/
YX2b8J8UF7weXBAX/3rqp8SlfhfrUfBfw79LfSP1xXHJf8icH/om+s9E3xxi
eb/gNxt9C/Vz0LfCl6FvM/MAfxk+Ny77cfO59d7D7zK4Oz02vzfpsN6Pf+nf
Dv8S74EL8CPN+5PzHGven+gnwp/h/HJ5LzyAL8RvOPtfDJ/P+spSsTm/dFi+
f/HgvSHvHfwT6O86wftG7k8zf+B6M8/mvYt+lRd8fzS/2gu+r7p+Df1noV9P
/RQzz+Z9ZeYXPA68A/9R6Hd6wX0j84n+ZfZzD/6vwB817znqz3vBfaTz3OE8
hjrB+1XzT7jf/jD7w33aRZ5b8N3or4R/fzz/98h/NOnbyg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/U0jpv/QygKHJQW2XNcPNjgc/goU6CtwuL4YKHCz
wQEo+1WjA8r/CJWfVuBQCFS+mKvRASQds7jAgQukQKXRAWzewQIHkHSBeSNE
/weoftdGB02QgEwhxL7ARoh5foUQ+VCo+oZCiPl+UPM3F0LMc4fyb0PVW0LN
+wI1TxGqX6AI7j6w+WJQ/ieofziK4P4Dm/cbav7+Boh5dwoh/lkDVb8BKj+/
Ae4+sH0TofwAqHv7oOEjB5WfCjX/NTR85kD5h6Hhs7rBAT38ARfPvOE=
                    "]}, CurveClosed -> {1, 1}]}, {42, 42}], {{{
                 0.9995651049196275, -0.029488998406425115`}, {
                 0.029488998406425115`, 0.9995651049196275}}, Center}], {{{
                0.8, 0.}, {0., 0.8}}, Center}]}, ImagePadding -> 0.2, 
             PlotRange -> {{242, 348}, {506, 612}}, PlotRangeClipping -> True,
              FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Text\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Output type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NominalSequence\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Invertibility: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Perfect\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Missing values: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Forbidden\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  FeatureExtractorFunction[
   Association[
   "ExampleNumber" -> 2586, "Preprocessor" -> 
    MachineLearning`MLProcessor["ToMLDataset", 
      Association[
      "Input" -> Association["f1" -> Association["Type" -> "Text"]], "Output" -> 
       Association["f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
       "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
         Association["Processors" -> {
            MachineLearning`MLProcessor["List"], 
            MachineLearning`MLProcessor["WrapMLDataset", 
             Association[
             "FeatureTypes" -> {"Text"}, "FeatureKeys" -> {"f1"}, 
              "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
              "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
       "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
       "Allowed"]], "Processor" -> MachineLearning`MLProcessor["WordSegment", 
      Association[
      "Invertibility" -> "Perfect", "Missing" -> "Forbidden", "Input" -> 
       Association["f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
       "Tokens" -> {{
         " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", "(", ")", 
          "$", "%", "&", "@", "*", "-", "+", "[", "]", "{", "}", "|", "\\", 
          ">", "/", "~", "`", "#", "^"}, {
         ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", ":P", 
          ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
         "=", "<", ";", ":"}}, "Output" -> 
       Association[
        "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]]]], 
    "PostProcessor" -> MachineLearning`MLProcessor["FromMLDataset", 
      Association[
      "DatasetFormat" -> List, "Input" -> 
       Association[
        "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]], 
       "Output" -> 
       Association["f1" -> Association["Type" -> "NominalSequence"]], 
       "InversePreprocessor" -> MachineLearning`MLProcessor["Sequence", 
         Association["Processors" -> {
            MachineLearning`MLProcessor["List"], 
            MachineLearning`MLProcessor["WrapMLDataset", 
             Association[
             "FeatureTypes" -> {"NominalSequence"}, "FeatureKeys" -> {"f1"}, 
              "FeatureWeights" -> {1}, "ExampleWeights" -> 1]]}]], 
       "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
       "Allowed"]], "PerformanceGoal" -> Automatic, "Invertibility" -> 
    "Perfect", "Missing" -> "Forbidden", "ExtractorDirectives" -> 
    "SegmentedWords", "Log" -> 
    Association[
     "TrainingTime" -> 0.4198207, "MaxTrainingMemory" -> 20629208, 
      "DataMemory" -> 1253832, "FunctionMemory" -> 15872, 
      "LanguageVersion" -> {12., 0}, "Date" -> 
      DateObject[{2019, 10, 30, 16, 8, 9.2757639`8.719924650434955}, 
        "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.781459611222086*^9, 3.7814656893819294`*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"31ac4cd4-6bb8-408f-b7b0-1e72674cd42f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"stFeatEx", "[", "x_", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Select", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"WordStem", "/@", 
     RowBox[{"ToLowerCase", "/@", 
      RowBox[{"wordExtractor", "@", "x"}]}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"StringMatchQ", "[", 
      RowBox[{"#", ",", 
       RowBox[{"WordCharacter", ".."}]}], "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7814638643935547`*^9, 3.7814638756191454`*^9}, {
  3.781463907299776*^9, 3.7814639299370313`*^9}, {3.7814640472552605`*^9, 
  3.7814640499110384`*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"e4ea5a1a-528b-4cd0-b68e-3f2fc60dff11"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"train", "[", 
  RowBox[{"[", 
   RowBox[{"2", ",", "2"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7814638248421316`*^9, 3.781463824995453*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"add28702-b2ab-4de9-8e8b-ea091748fedd"],

Cell[BoxData["\<\"A marriage of 13 and 18 year old bourbons. A mature yet \
very elegant whiskey, with a silky texture and so easy to embrace with a \
splash of water. Balanced notes of honeyed vanilla, soft caramel, a basket of \
complex orchard fruit, blackberry, papaya, and a dusting of cocoa and nutmeg; \
smooth finish. Sophisticated, stylish, with well-defined flavors. A \
classic!\"\>"], "Output",
 CellChangeTimes->{3.7814638253380823`*^9, 3.781464052734456*^9, 
  3.781465689500702*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"9f25a6fe-7f74-4bd3-8b24-155ecb9ec8ca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"stFeatEx", "@", 
  RowBox[{"train", "[", 
   RowBox[{"[", 
    RowBox[{"2", ",", "2"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7814638301417103`*^9, 3.781463830591506*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"ca1db437-6fec-46fe-9fd7-631469d46f33"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"marriag\"\>", ",", "\<\"of\"\>", 
   ",", "\<\"13\"\>", ",", "\<\"and\"\>", ",", "\<\"18\"\>", 
   ",", "\<\"year\"\>", ",", "\<\"old\"\>", ",", "\<\"bourbon\"\>", 
   ",", "\<\"a\"\>", ",", "\<\"matur\"\>", ",", "\<\"yet\"\>", 
   ",", "\<\"veri\"\>", ",", "\<\"eleg\"\>", ",", "\<\"whiskei\"\>", 
   ",", "\<\"with\"\>", ",", "\<\"a\"\>", ",", "\<\"silki\"\>", 
   ",", "\<\"textur\"\>", ",", "\<\"and\"\>", ",", "\<\"so\"\>", 
   ",", "\<\"easi\"\>", ",", "\<\"to\"\>", ",", "\<\"embrac\"\>", 
   ",", "\<\"with\"\>", ",", "\<\"a\"\>", ",", "\<\"splash\"\>", 
   ",", "\<\"of\"\>", ",", "\<\"water\"\>", ",", "\<\"balanc\"\>", 
   ",", "\<\"note\"\>", ",", "\<\"of\"\>", ",", "\<\"honei\"\>", 
   ",", "\<\"vanilla\"\>", ",", "\<\"soft\"\>", ",", "\<\"caramel\"\>", 
   ",", "\<\"a\"\>", ",", "\<\"basket\"\>", ",", "\<\"of\"\>", 
   ",", "\<\"complex\"\>", ",", "\<\"orchard\"\>", ",", "\<\"fruit\"\>", 
   ",", "\<\"blackberri\"\>", ",", "\<\"papaya\"\>", ",", "\<\"and\"\>", 
   ",", "\<\"a\"\>", ",", "\<\"dust\"\>", ",", "\<\"of\"\>", 
   ",", "\<\"cocoa\"\>", ",", "\<\"and\"\>", ",", "\<\"nutmeg\"\>", 
   ",", "\<\"smooth\"\>", ",", "\<\"finish\"\>", ",", "\<\"sophist\"\>", 
   ",", "\<\"stylish\"\>", ",", "\<\"with\"\>", ",", "\<\"well\"\>", 
   ",", "\<\"defin\"\>", ",", "\<\"flavor\"\>", ",", "\<\"a\"\>", 
   ",", "\<\"classic\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7814638308238726`*^9, 3.781463869000907*^9, 
  3.781463913219551*^9, 3.7814640549210453`*^9, 3.781465689670041*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"268cde95-4117-4c39-94a7-14c7168eff76"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MarC2", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"Rule", "@@@", 
     RowBox[{"train", "[", 
      RowBox[{"[", 
       RowBox[{
        RowBox[{"2", ";;", "All"}], ",", 
        RowBox[{"2", ";;", "3"}]}], "]"}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Method", "\[Rule]", "\"\<Markov\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"FeatureExtractor", "\[Rule]", "stFeatEx"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.781461669099745*^9, 3.7814617639660234`*^9}, {
  3.7814618114760575`*^9, 3.7814618344017806`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"318af28f-1545-407a-9826-5b83ce7b07f7"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Text\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "1", "2", "3", "4"}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Text\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "1", "2", "3", "4"}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Markov\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["2586", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierFunction, 3289016, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierFunction, 
            11486143210361906538282795408777284690914101424191807184880, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 11486143210361906538282795408777284690914101424191807184880,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.781461682723297*^9, 3.7814617162044263`*^9, 3.7814617691821136`*^9, {
   3.7814618251515036`*^9, 3.7814618532589307`*^9}, 3.7814639417088604`*^9, 
   3.781464102520952*^9, 3.781465708879695*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"8fd131f3-c87a-4cb9-b774-17fc5f546201"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "@", "MarC2"}]], "Input",
 CellChangeTimes->{{3.7814616901724253`*^9, 3.781461694216607*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"7d61e433-e352-4c17-b930-1f557dd88205"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12],
         FrameMargins->{{10, 5}, {-4, 2}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.96, 0.96, 0.96],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Data type\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], "\<\"Text\"\>"},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Classes\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{",","\",\"","1","2","3","4"},
               "RowWithSeparators"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Accuracy\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{InterpretationBox[
                 RowBox[{"(", 
                   TemplateBox[{"94.7", "1.5"}, "Around"], ")"}], 
                 Around[94.6558529675074424858`3., 1.4552646930259087732`3.]],
                "\"%\"","percent","\"Percent\""},
               "QuantityPostfix"]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["\<\"Markov\"\>",
                TemplateBox[{
                  TagBox[
                   
                   DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 2, "Length" -> 2, "InitialType" -> 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[
                    TypeSystem`Enumeration["MinimumTokenCount", "Order"]], 
                    TypeSystem`Atom[Integer], 2], "Shape" -> 
                    TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[153.], 
                    TypeSystem`PackageScope`AtomShape[34]]], 2, {}], 
                    "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[174940933], "Type" -> 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[
                    TypeSystem`Enumeration["MinimumTokenCount", "Order"]], 
                    TypeSystem`Atom[Integer], 2], "HandleQ" -> True, 
                    "RowTarget" -> 20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[174940933]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Pane[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["Order", 
                    Style[
                    "Order", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1427853875][{
                    Key["Order"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1427853875][
                    GeneralUtilities`Slice[
                    Key["Order"]]], "Mouse"], 
                    ImageSize -> {{153., Full}, Automatic}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["1"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1427853875][
                    GeneralUtilities`Slice[
                    Key["Order"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Pane[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["MinimumTokenCount", 
                    Style[
                    "MinimumTokenCount", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1427853875][{
                    Key["MinimumTokenCount"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1427853875][
                    GeneralUtilities`Slice[
                    Key["MinimumTokenCount"]]], "Mouse"], 
                    ImageSize -> {{153., Full}, Automatic}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["1"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1427853875][
                    GeneralUtilities`Slice[
                    Key["MinimumTokenCount"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1427853875][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1427853875]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1427853875][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1427853875][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                   DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                 DisplayFunction -> (#& ), 
                 InterpretationFunction -> ("Dataset[<>]"& )]],
               Annotation[#, 
                Dataset[
                 Association["Order" -> 1, "MinimumTokenCount" -> 1], 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["MinimumTokenCount", "Order"]], 
                  TypeSystem`Atom[Integer], 2], 
                 Association["ID" -> 171850415364861]], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Single evaluation time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "10.2`",
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}],"milliseconds per example",FractionBox[
                "\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Batch evaluation speed\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "183.`",
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"s\""}],"examples per second",
                FractionBox["\"Examples\"", "\"Seconds\""]},
               "Quantity"]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                 TagBox[
                  TooltipBox[
                  "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"1.3218699596267413643`3.",StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.4919340654771431898`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.3380018286724549847`3.",
                   "\", \"", "2.3057380905810278549`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.3380018286724549847`3., 
                  ", ", 2.3057380905810278549`3., "]"}], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Model memory\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"3.28`","\"MB\"","megabytes","\"Megabytes\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Training examples used\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"2586","\"examples\"","examples","\"Examples\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"18.9`","\"s\"","seconds","\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 2.913588738103066}, {
                    4.0943445622221, 1.6450289132678855`}, {5.991464547107982,
                     0.7857192873040237}, {7.634820677745543, 
                    0.279047370196908}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    2.913588738103066}}, {{4.0943445622221, 
                    1.6450289132678855`}}, {{5.991464547107982, 
                    0.7857192873040237}}, {{7.634820677745543, 
                    0.279047370196908}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 2.781121928970354}, {
                    2.302585092994046, 3.0305429801233434`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, 1.3422116633298857`}, {
                    4.0943445622221, 1.8771448221391147`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.991464547107982, 0.4847333455060638}, {
                    5.991464547107982, 1.0167610240862774`}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{7.634820677745543, -0.18640681713868362`}, {
                    7.634820677745543, 0.5954263111841688}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, 0.13268396086878811`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {0.13268396086878811`, 2.913588738103066}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.1817091441444252}, {
                    4.0943445622221, 0.7541111400104905}, {5.991464547107982, 
                    0.8810220393888684}, {7.634820677745543, 
                    0.9465585296750745}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.1817091441444252}}, {{4.0943445622221, 
                    0.7541111400104905}}, {{5.991464547107982, 
                    0.8810220393888684}}, {{7.634820677745543, 
                    0.9465585296750745}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, 0.13864120436255284`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {0.13864120436255284`, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 2.913588738103066}, {
                    4.0943445622221, 1.6450289132678855`}, {5.991464547107982,
                     0.7857192873040237}, {7.634820677745543, 
                    0.279047370196908}}]}, 
                    Column[{
                    Style["Markov", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
                    "MinimumTokenCount" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "Order", "AdditiveSmoothing", "MinimumTokenCount"}, {
                    TypeSystem`AnyType, 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 171854710332157]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 2.913588738103066}}, {{4.0943445622221,
                     1.6450289132678855`}}, {{5.991464547107982, 
                    0.7857192873040237}}, {{7.634820677745543, 
                    0.279047370196908}}}]}, 
                    Column[{
                    Style["Markov", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
                    "MinimumTokenCount" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "Order", "AdditiveSmoothing", "MinimumTokenCount"}, {
                    TypeSystem`AnyType, 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 171854710332157]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["Markov", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
                    "MinimumTokenCount" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "Order", "AdditiveSmoothing", "MinimumTokenCount"}, {
                    TypeSystem`AnyType, 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 171854710332157]]}, Center]], {}}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["Markov", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
                    "MinimumTokenCount" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "Order", "AdditiveSmoothing", "MinimumTokenCount"}, {
                    TypeSystem`AnyType, 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 171854710332157]]}, 
                    Center]], {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, 0.13268396086878811`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {0.13268396086878811`, 2.913588738103066}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file12Panel`PackagePrivate`pos$$ - 1, 
                    1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file12Panel`PackagePrivate`pos$$ + 1, 
                    Length[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 2.913588738103066}, {
                    4.0943445622221, 1.6450289132678855`}, {5.991464547107982,
                     0.7857192873040237}, {7.634820677745543, 
                    0.279047370196908}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    2.913588738103066}}, {{4.0943445622221, 
                    1.6450289132678855`}}, {{5.991464547107982, 
                    0.7857192873040237}}, {{7.634820677745543, 
                    0.279047370196908}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 2.781121928970354}, {
                    2.302585092994046, 3.0305429801233434`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, 1.3422116633298857`}, {
                    4.0943445622221, 1.8771448221391147`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.991464547107982, 0.4847333455060638}, {
                    5.991464547107982, 1.0167610240862774`}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{7.634820677745543, -0.18640681713868362`}, {
                    7.634820677745543, 0.5954263111841688}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}}, {{}, {}}}}, {DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, 0.13268396086878811`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {0.13268396086878811`, 2.913588738103066}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.1817091441444252}, {
                    4.0943445622221, 0.7541111400104905}, {5.991464547107982, 
                    0.8810220393888684}, {7.634820677745543, 
                    0.9465585296750745}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.1817091441444252}}, {{4.0943445622221, 
                    0.7541111400104905}}, {{5.991464547107982, 
                    0.8810220393888684}}, {{7.634820677745543, 
                    0.9465585296750745}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, 0.13864120436255284`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {0.13864120436255284`, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 2.913588738103066}, {
                    4.0943445622221, 1.6450289132678855`}, {5.991464547107982,
                     0.7857192873040237}, {7.634820677745543, 
                    0.279047370196908}}]}, 
                    Column[{
                    Style["Markov", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
                    "MinimumTokenCount" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "Order", "AdditiveSmoothing", "MinimumTokenCount"}, {
                    TypeSystem`AnyType, 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 171854710332157]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 2.913588738103066}}, {{4.0943445622221,
                     1.6450289132678855`}}, {{5.991464547107982, 
                    0.7857192873040237}}, {{7.634820677745543, 
                    0.279047370196908}}}]}, 
                    Column[{
                    Style["Markov", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
                    "MinimumTokenCount" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "Order", "AdditiveSmoothing", "MinimumTokenCount"}, {
                    TypeSystem`AnyType, 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 171854710332157]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["Markov", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
                    "MinimumTokenCount" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "Order", "AdditiveSmoothing", "MinimumTokenCount"}, {
                    TypeSystem`AnyType, 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 171854710332157]]}, Center]], {}}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["Markov", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
                    "MinimumTokenCount" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "Order", "AdditiveSmoothing", "MinimumTokenCount"}, {
                    TypeSystem`AnyType, 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 171854710332157]]}, 
                    Center]], {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, 0.13268396086878811`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {0.13268396086878811`, 2.913588738103066}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}]}]], 
                    Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{429., {161., 165.}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[0.8], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Background->GrayLevel[1],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{{3.7814616953096523`*^9, 3.7814617188403463`*^9}, 
   3.7814617714420404`*^9, {3.7814618282930746`*^9, 3.781461856931078*^9}, 
   3.781463945512951*^9, 3.781464103791798*^9, 3.7814657100922933`*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"2f2ca4fa-ee9d-4cab-b426-28c0caff41a9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LatentSemanticDR", "=", 
  RowBox[{"DimensionReduction", "[", 
   RowBox[{
    RowBox[{"train", "[", 
     RowBox[{"[", 
      RowBox[{
       RowBox[{"2", ";;", "All"}], ",", "2"}], "]"}], "]"}], ",", 
    "\[IndentingNewLine]", "100", ",", "\[IndentingNewLine]", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Method", "\[Rule]", "\"\<LatentSemanticAnalysis\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.781465196166363*^9, 3.7814652006058817`*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"ff1f560d-c5ab-4bbe-be40-67800a53eac2"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DimensionReducerFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{{{{}, {}}, {}, {{}, {}, {
                    GrayLevel[0.7], 
                    AbsoluteThickness[1.8], 
                    Opacity[1.], 
                    LineBox[CompressedData["
1:eJwB8QEO/iFib1JlAgAAAB4AAAACAAAAAAAAAAAAAAAAAAAAAAAAAA3l5opg
ldw/ifaD+DItuD+MkCEodiHjP9qvjCs8v9E/bLbqGG2J5D+WRNoAzOrePxWI
hjT6cuM/qFFV1TM75j8YmI/Y7IHfP/eKfiNPOe0/quVYmD5o1D+ADmRmEGnx
P3eNjU0+TbI/IY3cLB+l8z/z/SDb3KDLv5a/pk3oyvQ/P80MS7g64L+H2H4K
a8b0P9+nsKVohOq/rTamnQZ68z/qrFzHBdfxv6YHIajkDPE/bw9qE5vX9b+Z
SUCP/i3rP/uMEvTgV/m/kzjs/r2F4T/bUNnDc5T7v9G7+cvEhMs/wYIqip+q
/L9jvEi/XoXHvxhoDlvsO/y/eOnDDXz84r8s6yb5EW/6v2qTREHJFe+/UEHO
hnD69r/GEyuZBq31v4JWinxOcPK/c9vQT8is+r8XVSwtro/ov0knBpVW9/6/
yZ09iVcE1b9l2NyAUeAAwDbV0T76Ar4/Y701SKBwAcCmV9X1r7fjP9Pdwu5B
LgHAhEmFnNot8T/aVnzNXBkAwIeJGWTe4Pc/Fl/LTVCK/L9n/YLkNTv+P27f
ThBa+/a/DjFFsd98AUAQoc+DuIDwv00y1JUAQgNAdLxOLvHB4L8FJ/Yfkw0E
QHdYowipHsa8z+n67g==
                    "]]}}, {}, {{{}, {}, {}, {}}, {}}}, {{{}, {}}, {}, {{}, 
                    GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGBQAGIQvSOde+X6LwX2L+JEV934or//a9ba9rVPHto/qNs+
h/vZZfumRXKlmjWP7f94fAgTnPDcnk/kyM/O5Bf27XmKKav2f7HfXXOp8OzR
U/ZfddfwhpR8tH/Mf1NimfrD/bmrPms6/Ptsv6/iJO/vs5/3+3H82Z7G+Nqe
6/yMbVMP/dhfKsm+/u3U5/bzr9z7quHMeMBGKvy71POz+5PZdsQbTf23/7d6
VqJF6pf9/teV3u88/Hn/ux/vv2b//bTftGfJ25NKr/eXHb7jHVj0Y39nSUKD
+sIl9od7wyt357EeyI75vbEl+Jl9xCWXx0L8f/a7XHD6XCLA4HD6j8KD5/N+
7l/dca7ELo3ZwUXo+W6J9/f2j3T/AwAmeB/L
                    "], {{}, {
                    GrayLevel[0.5], 
                    PointSize[0.12], 
                    AbsoluteThickness[1.6], 
                    
                    PointBox[{17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 
                    29, 30, 31, 
                    32}]}, {}}], {}}, {}, {}, {{{}, {}, {}, {}}, {}}}}, 
                  ImagePadding -> 0.2, 
                  PlotRange -> {{-3.1, 3.2}, {-3.5, 2.1}}, PlotRangePadding -> 
                  Automatic, PlotRangeClipping -> True, FrameStyle -> 
                  Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Text\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output dimension: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["100", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{{{{}, {}}, {}, {{}, {}, {
                    GrayLevel[0.7], 
                    AbsoluteThickness[1.8], 
                    Opacity[1.], 
                    LineBox[CompressedData["
1:eJwB8QEO/iFib1JlAgAAAB4AAAACAAAAAAAAAAAAAAAAAAAAAAAAAA3l5opg
ldw/ifaD+DItuD+MkCEodiHjP9qvjCs8v9E/bLbqGG2J5D+WRNoAzOrePxWI
hjT6cuM/qFFV1TM75j8YmI/Y7IHfP/eKfiNPOe0/quVYmD5o1D+ADmRmEGnx
P3eNjU0+TbI/IY3cLB+l8z/z/SDb3KDLv5a/pk3oyvQ/P80MS7g64L+H2H4K
a8b0P9+nsKVohOq/rTamnQZ68z/qrFzHBdfxv6YHIajkDPE/bw9qE5vX9b+Z
SUCP/i3rP/uMEvTgV/m/kzjs/r2F4T/bUNnDc5T7v9G7+cvEhMs/wYIqip+q
/L9jvEi/XoXHvxhoDlvsO/y/eOnDDXz84r8s6yb5EW/6v2qTREHJFe+/UEHO
hnD69r/GEyuZBq31v4JWinxOcPK/c9vQT8is+r8XVSwtro/ov0knBpVW9/6/
yZ09iVcE1b9l2NyAUeAAwDbV0T76Ar4/Y701SKBwAcCmV9X1r7fjP9Pdwu5B
LgHAhEmFnNot8T/aVnzNXBkAwIeJGWTe4Pc/Fl/LTVCK/L9n/YLkNTv+P27f
ThBa+/a/DjFFsd98AUAQoc+DuIDwv00y1JUAQgNAdLxOLvHB4L8FJ/Yfkw0E
QHdYowipHsa8z+n67g==
                    "]]}}, {}, {{{}, {}, {}, {}}, {}}}, {{{}, {}}, {}, {{}, 
                    GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGBQAGIQvSOde+X6LwX2L+JEV934or//a9ba9rVPHto/qNs+
h/vZZfumRXKlmjWP7f94fAgTnPDcnk/kyM/O5Bf27XmKKav2f7HfXXOp8OzR
U/ZfddfwhpR8tH/Mf1NimfrD/bmrPms6/Ptsv6/iJO/vs5/3+3H82Z7G+Nqe
6/yMbVMP/dhfKsm+/u3U5/bzr9z7quHMeMBGKvy71POz+5PZdsQbTf23/7d6
VqJF6pf9/teV3u88/Hn/ux/vv2b//bTftGfJ25NKr/eXHb7jHVj0Y39nSUKD
+sIl9od7wyt357EeyI75vbEl+Jl9xCWXx0L8f/a7XHD6XCLA4HD6j8KD5/N+
7l/dca7ELo3ZwUXo+W6J9/f2j3T/AwAmeB/L
                    "], {{}, {
                    GrayLevel[0.5], 
                    PointSize[0.12], 
                    AbsoluteThickness[1.6], 
                    
                    PointBox[{17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 
                    29, 30, 31, 
                    32}]}, {}}], {}}, {}, {}, {{{}, {}, {}, {}}, {}}}}, 
                  ImagePadding -> 0.2, 
                  PlotRange -> {{-3.1, 3.2}, {-3.5, 2.1}}, PlotRangePadding -> 
                  Automatic, PlotRangeClipping -> True, FrameStyle -> 
                  Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Text\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output dimension: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["100", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Linear\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["2586", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[DimensionReducerFunction, 8703696, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           DimensionReducerFunction, 
            11486143210361906538282795408777284690877207936044364770272, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("DimensionReducerFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 11486143210361906538282795408777284690877207936044364770272,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7814642644275208`*^9, 3.781465653670101*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"2280ef6d-97fa-42ee-bba1-d7ddea5e4fb3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TFIDFLS", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"Rule", "@@@", 
     RowBox[{"train", "[", 
      RowBox[{"[", 
       RowBox[{
        RowBox[{"2", ";;", "All"}], ",", 
        RowBox[{"2", ";;", "3"}]}], "]"}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Method", "\[Rule]", "\"\<LogisticRegression\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"FeatureExtractor", "\[Rule]", "LatentSemanticDR"}]}], 
   "]"}]}]], "Input",
 CellLabel->"In[18]:=",ExpressionUUID->"f94b15cd-b27f-4f3a-8b0e-c17093b6af9c"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Text\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "1", "2", "3", "4"}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Text\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "1", "2", "3", "4"}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["2586", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierFunction, 9101632, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierFunction, 
            11486143210361906538282795408777284690895654680117968208560, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 11486143210361906538282795408777284690895654680117968208560,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7814642931029253`*^9, 3.7814656807277536`*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"8524812d-871d-41d4-83cb-67e4260d1783"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "@", "TFIDFLS"}]], "Input",
 CellLabel->"In[19]:=",ExpressionUUID->"e9b264e1-cf5e-438f-884c-c8d03c9dcd99"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12],
         FrameMargins->{{10, 5}, {-4, 2}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.96, 0.96, 0.96],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Data type\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], "\<\"Text\"\>"},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Classes\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{",","\",\"","1","2","3","4"},
               "RowWithSeparators"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Accuracy\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{InterpretationBox[
                 RowBox[{"(", 
                   TemplateBox[{"94.1", "0.6"}, "Around"], ")"}], 
                 Around[94.1451094707674798201`3., 0.6499441852280209986`3.]],
                "\"%\"","percent","\"Percent\""},
               "QuantityPostfix"]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["\<\"LogisticRegression\"\>",
                TemplateBox[{
                  TagBox[
                   
                   DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 20, "Length" -> 3, "InitialType" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "Shape" -> 
                    TypeSystem`PackageScope`DocumentShape[
                    
                    Association[{"L1Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[34], {
                    "L2Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[60], {
                    "OptimizationMethod"} -> 
                    TypeSystem`PackageScope`AtomShape[48.00000000000001]], 1],
                     "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[700774607], "Type" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "HandleQ" -> True, "RowTarget" -> 
                    20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[700774607]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1275622159][{
                    Key["L1Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1275622159][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1275622159][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1275622159][{
                    Key["L2Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1275622159][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["10.0"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1275622159][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1275622159][{
                    Key["OptimizationMethod"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1275622159][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation["LBFGS", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1275622159][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], 
                    ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1275622159][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1275622159]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1275622159][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1275622159][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                   DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                 DisplayFunction -> (#& ), 
                 InterpretationFunction -> ("Dataset[<>]"& )]],
               Annotation[#, 
                Dataset[
                 Association[
                 "L1Regularization" -> 0, "L2Regularization" -> 10., 
                  "OptimizationMethod" -> "LBFGS"], 
                 
                 TypeSystem`Struct[{
                  "L1Regularization", "L2Regularization", 
                   "OptimizationMethod"}, {
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[String]}], 
                 Association["ID" -> 270746332322529]], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Single evaluation time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "7.75`",
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}],"milliseconds per example",FractionBox[
                "\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Batch evaluation speed\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "255.`",
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"s\""}],"examples per second",
                FractionBox["\"Examples\"", "\"Seconds\""]},
               "Quantity"]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                 TagBox[
                  TooltipBox[
                  "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.1863215835932292841`3.",StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0152338182666169764`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.1558539470599953347`3.",
                   "\", \"", "0.2167892201264632335`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.1558539470599953347`3., 
                  ", ", 0.2167892201264632335`3., "]"}], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Model memory\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"9.1`","\"MB\"","megabytes","\"Megabytes\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Training examples used\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"2586","\"examples\"","examples","\"Examples\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"26.8`","\"s\"","seconds","\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.28888150527437995`}, {
                    4.0943445622221, -0.12013286051600304`}, {
                    5.991464547107982, -1.073518296410453}, {
                    7.634820677745543, -1.6802811541225628`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.28888150527437995`}}, {{
                    4.0943445622221, -0.12013286051600304`}}, {{
                    5.991464547107982, -1.073518296410453}}, {{
                    7.634820677745543, -1.6802811541225628`}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 0.2773938954757296}, {
                    2.302585092994046, 0.30023864723924676`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, -0.15090049961880958`}, {
                    4.0943445622221, -0.09028368050009027}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.991464547107982, -1.1822896907918095`}, {
                    5.991464547107982, -0.9754260252533886}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{7.634820677745543, -1.7655786066218895`}, {
                    7.634820677745543, -1.6016909881911858`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, -1.7896790796446151`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {-1.7896790796446151`, 0.28888150527437995`}},
                     PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.4354235246208081}, {
                    4.0943445622221, 0.6911666211721706}, {5.991464547107982, 
                    0.8944547612694821}, {7.634820677745543, 
                    0.9414510947076747}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.4354235246208081}}, {{4.0943445622221, 
                    0.6911666211721706}}, {{5.991464547107982, 
                    0.8944547612694821}}, {{7.634820677745543, 
                    0.9414510947076747}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, 0.4057089732850611}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {0.4057089732850611, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.3033509287643843}, {
                    4.0943445622221, 0.1775682422671368}, {
                    5.991464547107982, -0.36589698256204856`}, {
                    7.634820677745543, -1.1147463875895305`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270750627289825]]}, Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.32264435254463714`}, {
                    4.0943445622221, 0.31879039264236675`}, {
                    5.991464547107982, 0.31933123761210974`}, {
                    7.634820677745543, 0.3145644105235647}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270754922257121]]}, Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.7651846615877254}, {
                    4.0943445622221, 0.6706157932779765}, {5.991464547107982, 
                    0.2517477946503169}, {7.634820677745543, 
                    0.004320342134627426}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270759217224417]]}, Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.31006744911804657`}, {
                    4.0943445622221, -0.12013286051600304`}, {
                    5.991464547107982, -1.073518296410453}, {
                    7.634820677745543, -1.5717626334378576`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270763512191713]]}, Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.4924044847183534}, {
                    4.0943445622221, 0.2671484891741489}, {
                    5.991464547107982, -0.3659317265171825}, {
                    7.634820677745543, -0.08848627065147555}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270767807159009]]}, Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.37930366677378}, {
                    4.0943445622221, -0.009702309916827726}, {
                    5.991464547107982, -0.8298534182288061}, {
                    7.634820677745543, -0.8738759444208127}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270772102126305]]}, Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.3214429516009437}, {
                    4.0943445622221, 0.320811465150933}, {5.991464547107982, 
                    0.32247716357790274`}, {7.634820677745543, 
                    0.32138812911985404`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270776397093601]]}, Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.6864491629632143}, {
                    4.0943445622221, 0.5297685741920102}, {5.991464547107982, 
                    0.021066533866465485`}, {7.634820677745543, 
                    0.003393589012329541}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.00001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270780692060897]]}, Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.4096822521433114}, {
                    4.0943445622221, 0.09584837030077913}, {
                    5.991464547107982, -0.6041630147657251}, {
                    7.634820677745543, -0.15627409617651444`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270784987028193]]}, Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.28888150527437995`}, {
                    4.0943445622221, -0.046198010710244805`}, {
                    5.991464547107982, -0.9931947922157655}, {
                    7.634820677745543, -1.6802811541225628`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270789281995489]]}, Center]], 
                    Tooltip[{
                    Hue[0.030679774997896203`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.0943445622221, 0.32053814687934484`}, {
                    5.991464547107982, 0.30624163745946}, {7.634820677745543, 
                    0.24551006781664608`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270793576962785]]}, Center]], 
                    Tooltip[{
                    Hue[0.266747752497686, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.0943445622221, 0.3009050164584498}, {
                    5.991464547107982, 0.18857096245598914`}, {
                    7.634820677745543, -0.21934318010700027`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270797871930081]]}, Center]], 
                    Tooltip[{
                    Hue[0.5028157299974758, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.0943445622221, 0.3987007829092362}, {
                    5.991464547107982, -0.10900041000718347`}, {
                    7.634820677745543, -0.013181136014704917`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.0001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270802166897377]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.3033509287643843}}, {{
                    4.0943445622221, 0.1775682422671368}}, {{
                    5.991464547107982, -0.36589698256204856`}}, {{
                    7.634820677745543, -1.1147463875895305`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270750627289825]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.32264435254463714`}}, {{
                    4.0943445622221, 0.31879039264236675`}}, {{
                    5.991464547107982, 0.31933123761210974`}}, {{
                    7.634820677745543, 0.3145644105235647}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270754922257121]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.7651846615877254}}, {{
                    4.0943445622221, 0.6706157932779765}}, {{
                    5.991464547107982, 0.2517477946503169}}, {{
                    7.634820677745543, 0.004320342134627426}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270759217224417]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.31006744911804657`}}, {{
                    4.0943445622221, -0.12013286051600304`}}, {{
                    5.991464547107982, -1.073518296410453}}, {{
                    7.634820677745543, -1.5717626334378576`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270763512191713]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.4924044847183534}}, {{
                    4.0943445622221, 0.2671484891741489}}, {{
                    5.991464547107982, -0.3659317265171825}}, {{
                    7.634820677745543, -0.08848627065147555}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270767807159009]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.37930366677378}}, {{
                    4.0943445622221, -0.009702309916827726}}, {{
                    5.991464547107982, -0.8298534182288061}}, {{
                    7.634820677745543, -0.8738759444208127}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270772102126305]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.3214429516009437}}, {{
                    4.0943445622221, 0.320811465150933}}, {{5.991464547107982,
                     0.32247716357790274`}}, {{7.634820677745543, 
                    0.32138812911985404`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270776397093601]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.6864491629632143}}, {{
                    4.0943445622221, 0.5297685741920102}}, {{
                    5.991464547107982, 0.021066533866465485`}}, {{
                    7.634820677745543, 0.003393589012329541}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.00001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270780692060897]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.4096822521433114}}, {{
                    4.0943445622221, 0.09584837030077913}}, {{
                    5.991464547107982, -0.6041630147657251}}, {{
                    7.634820677745543, -0.15627409617651444`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270784987028193]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.28888150527437995`}}, {{
                    4.0943445622221, -0.046198010710244805`}}, {{
                    5.991464547107982, -0.9931947922157655}}, {{
                    7.634820677745543, -1.6802811541225628`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270789281995489]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    4.0943445622221, 0.32053814687934484`}}, {{
                    5.991464547107982, 0.30624163745946}}, {{
                    7.634820677745543, 0.24551006781664608`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270793576962785]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    4.0943445622221, 0.3009050164584498}}, {{
                    5.991464547107982, 0.18857096245598914`}}, {{
                    7.634820677745543, -0.21934318010700027`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270797871930081]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    4.0943445622221, 0.3987007829092362}}, {{
                    5.991464547107982, -0.10900041000718347`}}, {{
                    7.634820677745543, -0.013181136014704917`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.0001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270802166897377]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270750627289825]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270754922257121]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270759217224417]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270763512191713]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270767807159009]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270772102126305]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270776397093601]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.00001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270780692060897]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270784987028193]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270789281995489]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270793576962785]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270797871930081]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.0001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270802166897377]]}, 
                    Center]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270750627289825]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270754922257121]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270759217224417]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270763512191713]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270767807159009]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270772102126305]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270776397093601]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.00001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270780692060897]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270784987028193]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270789281995489]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270793576962785]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270797871930081]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.0001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270802166897377]]}, 
                    Center]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, -1.816140366106468}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {-1.816140366106468, 0.7651846615877254}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file12Panel`PackagePrivate`pos$$ - 1, 
                    1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file12Panel`PackagePrivate`pos$$ + 1, 
                    Length[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.28888150527437995`}, {
                    4.0943445622221, -0.12013286051600304`}, {
                    5.991464547107982, -1.073518296410453}, {
                    7.634820677745543, -1.6802811541225628`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.28888150527437995`}}, {{
                    4.0943445622221, -0.12013286051600304`}}, {{
                    5.991464547107982, -1.073518296410453}}, {{
                    7.634820677745543, -1.6802811541225628`}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 0.2773938954757296}, {
                    2.302585092994046, 0.30023864723924676`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, -0.15090049961880958`}, {
                    4.0943445622221, -0.09028368050009027}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.991464547107982, -1.1822896907918095`}, {
                    5.991464547107982, -0.9754260252533886}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{7.634820677745543, -1.7655786066218895`}, {
                    7.634820677745543, -1.6016909881911858`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}}, {{}, {}}}}, {DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, -1.7896790796446151`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {-1.7896790796446151`, 0.28888150527437995`}},
                     PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.4354235246208081}, {
                    4.0943445622221, 0.6911666211721706}, {5.991464547107982, 
                    0.8944547612694821}, {7.634820677745543, 
                    0.9414510947076747}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.4354235246208081}}, {{4.0943445622221, 
                    0.6911666211721706}}, {{5.991464547107982, 
                    0.8944547612694821}}, {{7.634820677745543, 
                    0.9414510947076747}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, 0.4057089732850611}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {0.4057089732850611, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.3033509287643843}, {
                    4.0943445622221, 0.1775682422671368}, {
                    5.991464547107982, -0.36589698256204856`}, {
                    7.634820677745543, -1.1147463875895305`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270750627289825]]}, Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.32264435254463714`}, {
                    4.0943445622221, 0.31879039264236675`}, {
                    5.991464547107982, 0.31933123761210974`}, {
                    7.634820677745543, 0.3145644105235647}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270754922257121]]}, Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.7651846615877254}, {
                    4.0943445622221, 0.6706157932779765}, {5.991464547107982, 
                    0.2517477946503169}, {7.634820677745543, 
                    0.004320342134627426}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270759217224417]]}, Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.31006744911804657`}, {
                    4.0943445622221, -0.12013286051600304`}, {
                    5.991464547107982, -1.073518296410453}, {
                    7.634820677745543, -1.5717626334378576`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270763512191713]]}, Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.4924044847183534}, {
                    4.0943445622221, 0.2671484891741489}, {
                    5.991464547107982, -0.3659317265171825}, {
                    7.634820677745543, -0.08848627065147555}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270767807159009]]}, Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.37930366677378}, {
                    4.0943445622221, -0.009702309916827726}, {
                    5.991464547107982, -0.8298534182288061}, {
                    7.634820677745543, -0.8738759444208127}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270772102126305]]}, Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.3214429516009437}, {
                    4.0943445622221, 0.320811465150933}, {5.991464547107982, 
                    0.32247716357790274`}, {7.634820677745543, 
                    0.32138812911985404`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270776397093601]]}, Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.6864491629632143}, {
                    4.0943445622221, 0.5297685741920102}, {5.991464547107982, 
                    0.021066533866465485`}, {7.634820677745543, 
                    0.003393589012329541}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.00001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270780692060897]]}, Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.4096822521433114}, {
                    4.0943445622221, 0.09584837030077913}, {
                    5.991464547107982, -0.6041630147657251}, {
                    7.634820677745543, -0.15627409617651444`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270784987028193]]}, Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.28888150527437995`}, {
                    4.0943445622221, -0.046198010710244805`}, {
                    5.991464547107982, -0.9931947922157655}, {
                    7.634820677745543, -1.6802811541225628`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270789281995489]]}, Center]], 
                    Tooltip[{
                    Hue[0.030679774997896203`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.0943445622221, 0.32053814687934484`}, {
                    5.991464547107982, 0.30624163745946}, {7.634820677745543, 
                    0.24551006781664608`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270793576962785]]}, Center]], 
                    Tooltip[{
                    Hue[0.266747752497686, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.0943445622221, 0.3009050164584498}, {
                    5.991464547107982, 0.18857096245598914`}, {
                    7.634820677745543, -0.21934318010700027`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270797871930081]]}, Center]], 
                    Tooltip[{
                    Hue[0.5028157299974758, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.0943445622221, 0.3987007829092362}, {
                    5.991464547107982, -0.10900041000718347`}, {
                    7.634820677745543, -0.013181136014704917`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.0001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270802166897377]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.3033509287643843}}, {{
                    4.0943445622221, 0.1775682422671368}}, {{
                    5.991464547107982, -0.36589698256204856`}}, {{
                    7.634820677745543, -1.1147463875895305`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270750627289825]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.32264435254463714`}}, {{
                    4.0943445622221, 0.31879039264236675`}}, {{
                    5.991464547107982, 0.31933123761210974`}}, {{
                    7.634820677745543, 0.3145644105235647}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270754922257121]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.7651846615877254}}, {{
                    4.0943445622221, 0.6706157932779765}}, {{
                    5.991464547107982, 0.2517477946503169}}, {{
                    7.634820677745543, 0.004320342134627426}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270759217224417]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.31006744911804657`}}, {{
                    4.0943445622221, -0.12013286051600304`}}, {{
                    5.991464547107982, -1.073518296410453}}, {{
                    7.634820677745543, -1.5717626334378576`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270763512191713]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.4924044847183534}}, {{
                    4.0943445622221, 0.2671484891741489}}, {{
                    5.991464547107982, -0.3659317265171825}}, {{
                    7.634820677745543, -0.08848627065147555}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270767807159009]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.37930366677378}}, {{
                    4.0943445622221, -0.009702309916827726}}, {{
                    5.991464547107982, -0.8298534182288061}}, {{
                    7.634820677745543, -0.8738759444208127}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270772102126305]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.3214429516009437}}, {{
                    4.0943445622221, 0.320811465150933}}, {{5.991464547107982,
                     0.32247716357790274`}}, {{7.634820677745543, 
                    0.32138812911985404`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270776397093601]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.6864491629632143}}, {{
                    4.0943445622221, 0.5297685741920102}}, {{
                    5.991464547107982, 0.021066533866465485`}}, {{
                    7.634820677745543, 0.003393589012329541}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.00001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270780692060897]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.4096822521433114}}, {{
                    4.0943445622221, 0.09584837030077913}}, {{
                    5.991464547107982, -0.6041630147657251}}, {{
                    7.634820677745543, -0.15627409617651444`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270784987028193]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.28888150527437995`}}, {{
                    4.0943445622221, -0.046198010710244805`}}, {{
                    5.991464547107982, -0.9931947922157655}}, {{
                    7.634820677745543, -1.6802811541225628`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270789281995489]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    4.0943445622221, 0.32053814687934484`}}, {{
                    5.991464547107982, 0.30624163745946}}, {{
                    7.634820677745543, 0.24551006781664608`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270793576962785]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    4.0943445622221, 0.3009050164584498}}, {{
                    5.991464547107982, 0.18857096245598914`}}, {{
                    7.634820677745543, -0.21934318010700027`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270797871930081]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    4.0943445622221, 0.3987007829092362}}, {{
                    5.991464547107982, -0.10900041000718347`}}, {{
                    7.634820677745543, -0.013181136014704917`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.0001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270802166897377]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270750627289825]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270754922257121]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270759217224417]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270763512191713]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270767807159009]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270772102126305]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270776397093601]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.00001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270780692060897]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270784987028193]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270789281995489]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270793576962785]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270797871930081]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.0001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270802166897377]]}, 
                    Center]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270750627289825]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270754922257121]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270759217224417]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270763512191713]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270767807159009]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270772102126305]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270776397093601]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.00001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270780692060897]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270784987028193]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270789281995489]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270793576962785]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270797871930081]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.0001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 270802166897377]]}, 
                    Center]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, -1.816140366106468}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {-1.816140366106468, 0.7651846615877254}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}]}]], 
                    Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{429., {159., 165.}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[0.8], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Background->GrayLevel[1],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.7814642942231092`*^9, 3.7814656819383144`*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"7c88d533-8874-4c87-b3a5-c182e8da5340"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NumericFE", "=", 
  RowBox[{"FeatureExtraction", "[", 
   RowBox[{
    RowBox[{"train", "[", 
     RowBox[{"[", 
      RowBox[{
       RowBox[{"2", ";;", "All"}], ",", "2"}], "]"}], "]"}], ",", 
    "\"\<NumericVector\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.781458804621965*^9, 3.7814588185507345`*^9}, {
   3.7814589223533864`*^9, 3.7814589709701085`*^9}, {3.7814590362865133`*^9, 
   3.781459038661169*^9}, 3.78145931161516*^9, {3.7814595260494757`*^9, 
   3.7814595279055905`*^9}, {3.781464171049382*^9, 3.7814641731220713`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"21981a01-c33e-4d83-8d00-025880b9e550"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["FeatureExtractorFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{
                   InsetBox[
                    FormBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.21999999999999997`}}, 
                    "Rows" -> {{-0.43}}}], "Grid"], TraditionalForm], {295, 
                    559}], 
                   GeometricTransformationBox[
                    GeometricTransformationBox[
                    GeometricTransformationBox[{
                    Thickness[0.015], 
                    JoinForm[{"Miter", 10.}], 
                    GrayLevel[0.7], 
                    Opacity[1.], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJyNl3toVEcYxVcFsamKxdT6wBr7R0iwaQkhgtjIlKhRkLSJVYgG29gKSnX3
3rsUTYrde7GK8RVDRBG1KFqIQmyqpijYNvVRNLSijRDfmipSTaKUkGCVPu7O
95t7wWWpf4icPec735mZb2cnExfHypcMjEQibf6/5P91p/pyKttt1bHfKsro
8VRupf/JL7ayizI69j/yVBLmnLNVElqPPaX1p0Os+WZbHfDLO/6kfjd8r6f6
c/wPavHvQ78K/jb8Mvq14b8Qv5ZUfNqHddPSY62fRL8W/MfYKtmu6Bj9h9Dv
CPxfltR/S32XJfm+YT03LPFrMuuH/xG/RuovkWcL/N1UrP02WZLnXirW/mss
yfc7+arp3wm24W+Bq/C/Tv1ccAf+09H/Rp638PvV7A/5z8IPhv8+PdZ5T6Zi
46dxozkP8DZzXmAXvoB8NdTnkucz9jeL9cTQjyTPMnOe4CpPre0qO/763zHB
FZ7q9uHa3pj4zYPviUm/ck9NSH5wH1wKvznkdX0BeL6nyn3YdTUqfhXg81FZ
z/vgE1HRz8SvCf4dTyXpsr3gN/FviEre8aY//sNSsc67jvX0uS+MdZ6H6bHW
d7qSvzYm+a645EN/Af128M8u6wH/QP1B8HfwH+F/EH4M57MH/mJU7T6T1ezU
4d8flfNe6cr689BXgVeQb04q1n7W/+BWMw9uMD867yJX5i+f+VzqyrxNZf4+
doPvk8YfujLPpdQvgK+k/gP4KHwp/h7zOht+HX4lbnAf6Hwz6N8AXwzeCJ+H
/kv41/D7Av8BrG+rpQ6XdNZkPk1I/32WmuXDw70JqT9mqc8zfcUj+BOWStIl
PYngvtP1D8Ht6O+jf2CpJKy5k5B+EVvqb+KfaUv9tYTky+b+HUjeyXaQX/aX
+zsvFet+Femx1i8PseyHHeyX7Af93gbvRZ/vBr9nmi8At1JfmB7r+kLy/BRi
vV/XWe8b5Onn92gE9SMcOY9n7N9oR/gIfJYj/QZQn+1IvkFm/xzxH2z2C5xB
/7ng4eBP8XvVzCN4PH7b0Web+aLfVPQ2+D30i8j7CXmXOtzPYAv/FdRX4++E
/pqvNucD9tDvxK82xJqvZT278NsQYp1vI/m+Qr+Z+n341dP/APoG+EvgOur/
YX2b8J8UF7weXBAX/3rqp8SlfhfrUfBfw79LfSP1xXHJf8icH/om+s9E3xxi
eb/gNxt9C/Vz0LfCl6FvM/MAfxk+Ny77cfO59d7D7zK4Oz02vzfpsN6Pf+nf
Dv8S74EL8CPN+5PzHGven+gnwp/h/HJ5LzyAL8RvOPtfDJ/P+spSsTm/dFi+
f/HgvSHvHfwT6O86wftG7k8zf+B6M8/mvYt+lRd8fzS/2gu+r7p+Df1noV9P
/RQzz+Z9ZeYXPA68A/9R6Hd6wX0j84n+ZfZzD/6vwB817znqz3vBfaTz3OE8
hjrB+1XzT7jf/jD7w33aRZ5b8N3or4R/fzz/98h/NOnbyg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/U0jpv/QygKHJQW2XNcPNjgc/goU6CtwuL4YKHCz
wQEo+1WjA8r/CJWfVuBQCFS+mKvRASQds7jAgQukQKXRAWzewQIHkHSBeSNE
/weoftdGB02QgEwhxL7ARoh5foUQ+VCo+oZCiPl+UPM3F0LMc4fyb0PVW0LN
+wI1TxGqX6AI7j6w+WJQ/ieofziK4P4Dm/cbav7+Boh5dwoh/lkDVb8BKj+/
Ae4+sH0TofwAqHv7oOEjB5WfCjX/NTR85kD5h6Hhs7rBAT38ARfPvOE=
                    "]}, CurveClosed -> {1, 1}], 
                    GrayLevel[0], 
                    Opacity[1.], 
                    
                    JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJyNl3toVEcYxVcFsamKxdT6wBr7R0iwaQkhgtjIlKhRkLSJVYgG29gKSnX3
3rsUTYrde7GK8RVDRBG1KFqIQmyqpijYNvVRNLSijRDfmipSTaKUkGCVPu7O
95t7wWWpf4icPec735mZb2cnExfHypcMjEQibf6/5P91p/pyKttt1bHfKsro
8VRupf/JL7ayizI69j/yVBLmnLNVElqPPaX1p0Os+WZbHfDLO/6kfjd8r6f6
c/wPavHvQ78K/jb8Mvq14b8Qv5ZUfNqHddPSY62fRL8W/MfYKtmu6Bj9h9Dv
CPxfltR/S32XJfm+YT03LPFrMuuH/xG/RuovkWcL/N1UrP02WZLnXirW/mss
yfc7+arp3wm24W+Bq/C/Tv1ccAf+09H/Rp638PvV7A/5z8IPhv8+PdZ5T6Zi
46dxozkP8DZzXmAXvoB8NdTnkucz9jeL9cTQjyTPMnOe4CpPre0qO/763zHB
FZ7q9uHa3pj4zYPviUm/ck9NSH5wH1wKvznkdX0BeL6nyn3YdTUqfhXg81FZ
z/vgE1HRz8SvCf4dTyXpsr3gN/FviEre8aY//sNSsc67jvX0uS+MdZ6H6bHW
d7qSvzYm+a645EN/Af128M8u6wH/QP1B8HfwH+F/EH4M57MH/mJU7T6T1ezU
4d8flfNe6cr689BXgVeQb04q1n7W/+BWMw9uMD867yJX5i+f+VzqyrxNZf4+
doPvk8YfujLPpdQvgK+k/gP4KHwp/h7zOht+HX4lbnAf6Hwz6N8AXwzeCJ+H
/kv41/D7Av8BrG+rpQ6XdNZkPk1I/32WmuXDw70JqT9mqc8zfcUj+BOWStIl
PYngvtP1D8Ht6O+jf2CpJKy5k5B+EVvqb+KfaUv9tYTky+b+HUjeyXaQX/aX
+zsvFet+Femx1i8PseyHHeyX7Af93gbvRZ/vBr9nmi8At1JfmB7r+kLy/BRi
vV/XWe8b5Onn92gE9SMcOY9n7N9oR/gIfJYj/QZQn+1IvkFm/xzxH2z2C5xB
/7ng4eBP8XvVzCN4PH7b0Web+aLfVPQ2+D30i8j7CXmXOtzPYAv/FdRX4++E
/pqvNucD9tDvxK82xJqvZT278NsQYp1vI/m+Qr+Z+n341dP/APoG+EvgOur/
YX2b8J8UF7weXBAX/3rqp8SlfhfrUfBfw79LfSP1xXHJf8icH/om+s9E3xxi
eb/gNxt9C/Vz0LfCl6FvM/MAfxk+Ny77cfO59d7D7zK4Oz02vzfpsN6Pf+nf
Dv8S74EL8CPN+5PzHGven+gnwp/h/HJ5LzyAL8RvOPtfDJ/P+spSsTm/dFi+
f/HgvSHvHfwT6O86wftG7k8zf+B6M8/mvYt+lRd8fzS/2gu+r7p+Df1noV9P
/RQzz+Z9ZeYXPA68A/9R6Hd6wX0j84n+ZfZzD/6vwB817znqz3vBfaTz3OE8
hjrB+1XzT7jf/jD7w33aRZ5b8N3or4R/fzz/98h/NOnbyg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/U0jpv/QygKHJQW2XNcPNjgc/goU6CtwuL4YKHCz
wQEo+1WjA8r/CJWfVuBQCFS+mKvRASQds7jAgQukQKXRAWzewQIHkHSBeSNE
/weoftdGB02QgEwhxL7ARoh5foUQ+VCo+oZCiPl+UPM3F0LMc4fyb0PVW0LN
+wI1TxGqX6AI7j6w+WJQ/ieofziK4P4Dm/cbav7+Boh5dwoh/lkDVb8BKj+/
Ae4+sH0TofwAqHv7oOEjB5WfCjX/NTR85kD5h6Hhs7rBAT38ARfPvOE=
                    "]}, CurveClosed -> {1, 1}]}, {0, 0}], {{{
                    0.9927794495871995, -0.1199540098426773}, {
                    0.1199540098426773, 0.9927794495871995}}, Center}], {{{1, 
                    0}, {0, 1}}, Center}], 
                   GeometricTransformationBox[
                    GeometricTransformationBox[
                    GeometricTransformationBox[{
                    Thickness[0.015], 
                    JoinForm[{"Miter", 10.}], 
                    GrayLevel[0.7], 
                    Opacity[1.], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJyNl3toVEcYxVcFsamKxdT6wBr7R0iwaQkhgtjIlKhRkLSJVYgG29gKSnX3
3rsUTYrde7GK8RVDRBG1KFqIQmyqpijYNvVRNLSijRDfmipSTaKUkGCVPu7O
95t7wWWpf4icPec735mZb2cnExfHypcMjEQibf6/5P91p/pyKttt1bHfKsro
8VRupf/JL7ayizI69j/yVBLmnLNVElqPPaX1p0Os+WZbHfDLO/6kfjd8r6f6
c/wPavHvQ78K/jb8Mvq14b8Qv5ZUfNqHddPSY62fRL8W/MfYKtmu6Bj9h9Dv
CPxfltR/S32XJfm+YT03LPFrMuuH/xG/RuovkWcL/N1UrP02WZLnXirW/mss
yfc7+arp3wm24W+Bq/C/Tv1ccAf+09H/Rp638PvV7A/5z8IPhv8+PdZ5T6Zi
46dxozkP8DZzXmAXvoB8NdTnkucz9jeL9cTQjyTPMnOe4CpPre0qO/763zHB
FZ7q9uHa3pj4zYPviUm/ck9NSH5wH1wKvznkdX0BeL6nyn3YdTUqfhXg81FZ
z/vgE1HRz8SvCf4dTyXpsr3gN/FviEre8aY//sNSsc67jvX0uS+MdZ6H6bHW
d7qSvzYm+a645EN/Af128M8u6wH/QP1B8HfwH+F/EH4M57MH/mJU7T6T1ezU
4d8flfNe6cr689BXgVeQb04q1n7W/+BWMw9uMD867yJX5i+f+VzqyrxNZf4+
doPvk8YfujLPpdQvgK+k/gP4KHwp/h7zOht+HX4lbnAf6Hwz6N8AXwzeCJ+H
/kv41/D7Av8BrG+rpQ6XdNZkPk1I/32WmuXDw70JqT9mqc8zfcUj+BOWStIl
PYngvtP1D8Ht6O+jf2CpJKy5k5B+EVvqb+KfaUv9tYTky+b+HUjeyXaQX/aX
+zsvFet+Femx1i8PseyHHeyX7Af93gbvRZ/vBr9nmi8At1JfmB7r+kLy/BRi
vV/XWe8b5Onn92gE9SMcOY9n7N9oR/gIfJYj/QZQn+1IvkFm/xzxH2z2C5xB
/7ng4eBP8XvVzCN4PH7b0Web+aLfVPQ2+D30i8j7CXmXOtzPYAv/FdRX4++E
/pqvNucD9tDvxK82xJqvZT278NsQYp1vI/m+Qr+Z+n341dP/APoG+EvgOur/
YX2b8J8UF7weXBAX/3rqp8SlfhfrUfBfw79LfSP1xXHJf8icH/om+s9E3xxi
eb/gNxt9C/Vz0LfCl6FvM/MAfxk+Ny77cfO59d7D7zK4Oz02vzfpsN6Pf+nf
Dv8S74EL8CPN+5PzHGven+gnwp/h/HJ5LzyAL8RvOPtfDJ/P+spSsTm/dFi+
f/HgvSHvHfwT6O86wftG7k8zf+B6M8/mvYt+lRd8fzS/2gu+r7p+Df1noV9P
/RQzz+Z9ZeYXPA68A/9R6Hd6wX0j84n+ZfZzD/6vwB817znqz3vBfaTz3OE8
hjrB+1XzT7jf/jD7w33aRZ5b8N3or4R/fzz/98h/NOnbyg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/U0jpv/QygKHJQW2XNcPNjgc/goU6CtwuL4YKHCz
wQEo+1WjA8r/CJWfVuBQCFS+mKvRASQds7jAgQukQKXRAWzewQIHkHSBeSNE
/weoftdGB02QgEwhxL7ARoh5foUQ+VCo+oZCiPl+UPM3F0LMc4fyb0PVW0LN
+wI1TxGqX6AI7j6w+WJQ/ieofziK4P4Dm/cbav7+Boh5dwoh/lkDVb8BKj+/
Ae4+sH0TofwAqHv7oOEjB5WfCjX/NTR85kD5h6Hhs7rBAT38ARfPvOE=
                    "]}, CurveClosed -> {1, 1}], 
                    GrayLevel[0], 
                    Opacity[1.], 
                    
                    JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJyNl3toVEcYxVcFsamKxdT6wBr7R0iwaQkhgtjIlKhRkLSJVYgG29gKSnX3
3rsUTYrde7GK8RVDRBG1KFqIQmyqpijYNvVRNLSijRDfmipSTaKUkGCVPu7O
95t7wWWpf4icPec735mZb2cnExfHypcMjEQibf6/5P91p/pyKttt1bHfKsro
8VRupf/JL7ayizI69j/yVBLmnLNVElqPPaX1p0Os+WZbHfDLO/6kfjd8r6f6
c/wPavHvQ78K/jb8Mvq14b8Qv5ZUfNqHddPSY62fRL8W/MfYKtmu6Bj9h9Dv
CPxfltR/S32XJfm+YT03LPFrMuuH/xG/RuovkWcL/N1UrP02WZLnXirW/mss
yfc7+arp3wm24W+Bq/C/Tv1ccAf+09H/Rp638PvV7A/5z8IPhv8+PdZ5T6Zi
46dxozkP8DZzXmAXvoB8NdTnkucz9jeL9cTQjyTPMnOe4CpPre0qO/763zHB
FZ7q9uHa3pj4zYPviUm/ck9NSH5wH1wKvznkdX0BeL6nyn3YdTUqfhXg81FZ
z/vgE1HRz8SvCf4dTyXpsr3gN/FviEre8aY//sNSsc67jvX0uS+MdZ6H6bHW
d7qSvzYm+a645EN/Af128M8u6wH/QP1B8HfwH+F/EH4M57MH/mJU7T6T1ezU
4d8flfNe6cr689BXgVeQb04q1n7W/+BWMw9uMD867yJX5i+f+VzqyrxNZf4+
doPvk8YfujLPpdQvgK+k/gP4KHwp/h7zOht+HX4lbnAf6Hwz6N8AXwzeCJ+H
/kv41/D7Av8BrG+rpQ6XdNZkPk1I/32WmuXDw70JqT9mqc8zfcUj+BOWStIl
PYngvtP1D8Ht6O+jf2CpJKy5k5B+EVvqb+KfaUv9tYTky+b+HUjeyXaQX/aX
+zsvFet+Femx1i8PseyHHeyX7Af93gbvRZ/vBr9nmi8At1JfmB7r+kLy/BRi
vV/XWe8b5Onn92gE9SMcOY9n7N9oR/gIfJYj/QZQn+1IvkFm/xzxH2z2C5xB
/7ng4eBP8XvVzCN4PH7b0Web+aLfVPQ2+D30i8j7CXmXOtzPYAv/FdRX4++E
/pqvNucD9tDvxK82xJqvZT278NsQYp1vI/m+Qr+Z+n341dP/APoG+EvgOur/
YX2b8J8UF7weXBAX/3rqp8SlfhfrUfBfw79LfSP1xXHJf8icH/om+s9E3xxi
eb/gNxt9C/Vz0LfCl6FvM/MAfxk+Ny77cfO59d7D7zK4Oz02vzfpsN6Pf+nf
Dv8S74EL8CPN+5PzHGven+gnwp/h/HJ5LzyAL8RvOPtfDJ/P+spSsTm/dFi+
f/HgvSHvHfwT6O86wftG7k8zf+B6M8/mvYt+lRd8fzS/2gu+r7p+Df1noV9P
/RQzz+Z9ZeYXPA68A/9R6Hd6wX0j84n+ZfZzD/6vwB817znqz3vBfaTz3OE8
hjrB+1XzT7jf/jD7w33aRZ5b8N3or4R/fzz/98h/NOnbyg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/U0jpv/QygKHJQW2XNcPNjgc/goU6CtwuL4YKHCz
wQEo+1WjA8r/CJWfVuBQCFS+mKvRASQds7jAgQukQKXRAWzewQIHkHSBeSNE
/weoftdGB02QgEwhxL7ARoh5foUQ+VCo+oZCiPl+UPM3F0LMc4fyb0PVW0LN
+wI1TxGqX6AI7j6w+WJQ/ieofziK4P4Dm/cbav7+Boh5dwoh/lkDVb8BKj+/
Ae4+sH0TofwAqHv7oOEjB5WfCjX/NTR85kD5h6Hhs7rBAT38ARfPvOE=
                    "]}, CurveClosed -> {1, 1}]}, {42, 42}], {{{
                    0.9997951061847711, 
                    0.020242175006217597`}, {-0.020242175006217597`, 
                    0.9997951061847711}}, Center}], {{{0.8, 0.}, {0., 0.8}}, 
                    Center}]}, ImagePadding -> 0.2, 
                  PlotRange -> {{242, 348}, {506, 612}}, PlotRangeClipping -> 
                  True, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Text\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2581", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{
                   InsetBox[
                    FormBox[
                    TagBox[
                    GridBox[{{
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.21999999999999997`}}, 
                    "Rows" -> {{-0.43}}}], "Grid"], TraditionalForm], {295, 
                    559}], 
                   GeometricTransformationBox[
                    GeometricTransformationBox[
                    GeometricTransformationBox[{
                    Thickness[0.015], 
                    JoinForm[{"Miter", 10.}], 
                    GrayLevel[0.7], 
                    Opacity[1.], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJyNl3toVEcYxVcFsamKxdT6wBr7R0iwaQkhgtjIlKhRkLSJVYgG29gKSnX3
3rsUTYrde7GK8RVDRBG1KFqIQmyqpijYNvVRNLSijRDfmipSTaKUkGCVPu7O
95t7wWWpf4icPec735mZb2cnExfHypcMjEQibf6/5P91p/pyKttt1bHfKsro
8VRupf/JL7ayizI69j/yVBLmnLNVElqPPaX1p0Os+WZbHfDLO/6kfjd8r6f6
c/wPavHvQ78K/jb8Mvq14b8Qv5ZUfNqHddPSY62fRL8W/MfYKtmu6Bj9h9Dv
CPxfltR/S32XJfm+YT03LPFrMuuH/xG/RuovkWcL/N1UrP02WZLnXirW/mss
yfc7+arp3wm24W+Bq/C/Tv1ccAf+09H/Rp638PvV7A/5z8IPhv8+PdZ5T6Zi
46dxozkP8DZzXmAXvoB8NdTnkucz9jeL9cTQjyTPMnOe4CpPre0qO/763zHB
FZ7q9uHa3pj4zYPviUm/ck9NSH5wH1wKvznkdX0BeL6nyn3YdTUqfhXg81FZ
z/vgE1HRz8SvCf4dTyXpsr3gN/FviEre8aY//sNSsc67jvX0uS+MdZ6H6bHW
d7qSvzYm+a645EN/Af128M8u6wH/QP1B8HfwH+F/EH4M57MH/mJU7T6T1ezU
4d8flfNe6cr689BXgVeQb04q1n7W/+BWMw9uMD867yJX5i+f+VzqyrxNZf4+
doPvk8YfujLPpdQvgK+k/gP4KHwp/h7zOht+HX4lbnAf6Hwz6N8AXwzeCJ+H
/kv41/D7Av8BrG+rpQ6XdNZkPk1I/32WmuXDw70JqT9mqc8zfcUj+BOWStIl
PYngvtP1D8Ht6O+jf2CpJKy5k5B+EVvqb+KfaUv9tYTky+b+HUjeyXaQX/aX
+zsvFet+Femx1i8PseyHHeyX7Af93gbvRZ/vBr9nmi8At1JfmB7r+kLy/BRi
vV/XWe8b5Onn92gE9SMcOY9n7N9oR/gIfJYj/QZQn+1IvkFm/xzxH2z2C5xB
/7ng4eBP8XvVzCN4PH7b0Web+aLfVPQ2+D30i8j7CXmXOtzPYAv/FdRX4++E
/pqvNucD9tDvxK82xJqvZT278NsQYp1vI/m+Qr+Z+n341dP/APoG+EvgOur/
YX2b8J8UF7weXBAX/3rqp8SlfhfrUfBfw79LfSP1xXHJf8icH/om+s9E3xxi
eb/gNxt9C/Vz0LfCl6FvM/MAfxk+Ny77cfO59d7D7zK4Oz02vzfpsN6Pf+nf
Dv8S74EL8CPN+5PzHGven+gnwp/h/HJ5LzyAL8RvOPtfDJ/P+spSsTm/dFi+
f/HgvSHvHfwT6O86wftG7k8zf+B6M8/mvYt+lRd8fzS/2gu+r7p+Df1noV9P
/RQzz+Z9ZeYXPA68A/9R6Hd6wX0j84n+ZfZzD/6vwB817znqz3vBfaTz3OE8
hjrB+1XzT7jf/jD7w33aRZ5b8N3or4R/fzz/98h/NOnbyg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/U0jpv/QygKHJQW2XNcPNjgc/goU6CtwuL4YKHCz
wQEo+1WjA8r/CJWfVuBQCFS+mKvRASQds7jAgQukQKXRAWzewQIHkHSBeSNE
/weoftdGB02QgEwhxL7ARoh5foUQ+VCo+oZCiPl+UPM3F0LMc4fyb0PVW0LN
+wI1TxGqX6AI7j6w+WJQ/ieofziK4P4Dm/cbav7+Boh5dwoh/lkDVb8BKj+/
Ae4+sH0TofwAqHv7oOEjB5WfCjX/NTR85kD5h6Hhs7rBAT38ARfPvOE=
                    "]}, CurveClosed -> {1, 1}], 
                    GrayLevel[0], 
                    Opacity[1.], 
                    
                    JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJyNl3toVEcYxVcFsamKxdT6wBr7R0iwaQkhgtjIlKhRkLSJVYgG29gKSnX3
3rsUTYrde7GK8RVDRBG1KFqIQmyqpijYNvVRNLSijRDfmipSTaKUkGCVPu7O
95t7wWWpf4icPec735mZb2cnExfHypcMjEQibf6/5P91p/pyKttt1bHfKsro
8VRupf/JL7ayizI69j/yVBLmnLNVElqPPaX1p0Os+WZbHfDLO/6kfjd8r6f6
c/wPavHvQ78K/jb8Mvq14b8Qv5ZUfNqHddPSY62fRL8W/MfYKtmu6Bj9h9Dv
CPxfltR/S32XJfm+YT03LPFrMuuH/xG/RuovkWcL/N1UrP02WZLnXirW/mss
yfc7+arp3wm24W+Bq/C/Tv1ccAf+09H/Rp638PvV7A/5z8IPhv8+PdZ5T6Zi
46dxozkP8DZzXmAXvoB8NdTnkucz9jeL9cTQjyTPMnOe4CpPre0qO/763zHB
FZ7q9uHa3pj4zYPviUm/ck9NSH5wH1wKvznkdX0BeL6nyn3YdTUqfhXg81FZ
z/vgE1HRz8SvCf4dTyXpsr3gN/FviEre8aY//sNSsc67jvX0uS+MdZ6H6bHW
d7qSvzYm+a645EN/Af128M8u6wH/QP1B8HfwH+F/EH4M57MH/mJU7T6T1ezU
4d8flfNe6cr689BXgVeQb04q1n7W/+BWMw9uMD867yJX5i+f+VzqyrxNZf4+
doPvk8YfujLPpdQvgK+k/gP4KHwp/h7zOht+HX4lbnAf6Hwz6N8AXwzeCJ+H
/kv41/D7Av8BrG+rpQ6XdNZkPk1I/32WmuXDw70JqT9mqc8zfcUj+BOWStIl
PYngvtP1D8Ht6O+jf2CpJKy5k5B+EVvqb+KfaUv9tYTky+b+HUjeyXaQX/aX
+zsvFet+Femx1i8PseyHHeyX7Af93gbvRZ/vBr9nmi8At1JfmB7r+kLy/BRi
vV/XWe8b5Onn92gE9SMcOY9n7N9oR/gIfJYj/QZQn+1IvkFm/xzxH2z2C5xB
/7ng4eBP8XvVzCN4PH7b0Web+aLfVPQ2+D30i8j7CXmXOtzPYAv/FdRX4++E
/pqvNucD9tDvxK82xJqvZT278NsQYp1vI/m+Qr+Z+n341dP/APoG+EvgOur/
YX2b8J8UF7weXBAX/3rqp8SlfhfrUfBfw79LfSP1xXHJf8icH/om+s9E3xxi
eb/gNxt9C/Vz0LfCl6FvM/MAfxk+Ny77cfO59d7D7zK4Oz02vzfpsN6Pf+nf
Dv8S74EL8CPN+5PzHGven+gnwp/h/HJ5LzyAL8RvOPtfDJ/P+spSsTm/dFi+
f/HgvSHvHfwT6O86wftG7k8zf+B6M8/mvYt+lRd8fzS/2gu+r7p+Df1noV9P
/RQzz+Z9ZeYXPA68A/9R6Hd6wX0j84n+ZfZzD/6vwB817znqz3vBfaTz3OE8
hjrB+1XzT7jf/jD7w33aRZ5b8N3or4R/fzz/98h/NOnbyg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/U0jpv/QygKHJQW2XNcPNjgc/goU6CtwuL4YKHCz
wQEo+1WjA8r/CJWfVuBQCFS+mKvRASQds7jAgQukQKXRAWzewQIHkHSBeSNE
/weoftdGB02QgEwhxL7ARoh5foUQ+VCo+oZCiPl+UPM3F0LMc4fyb0PVW0LN
+wI1TxGqX6AI7j6w+WJQ/ieofziK4P4Dm/cbav7+Boh5dwoh/lkDVb8BKj+/
Ae4+sH0TofwAqHv7oOEjB5WfCjX/NTR85kD5h6Hhs7rBAT38ARfPvOE=
                    "]}, CurveClosed -> {1, 1}]}, {0, 0}], {{{
                    0.9927794495871995, -0.1199540098426773}, {
                    0.1199540098426773, 0.9927794495871995}}, Center}], {{{1, 
                    0}, {0, 1}}, Center}], 
                   GeometricTransformationBox[
                    GeometricTransformationBox[
                    GeometricTransformationBox[{
                    Thickness[0.015], 
                    JoinForm[{"Miter", 10.}], 
                    GrayLevel[0.7], 
                    Opacity[1.], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJyNl3toVEcYxVcFsamKxdT6wBr7R0iwaQkhgtjIlKhRkLSJVYgG29gKSnX3
3rsUTYrde7GK8RVDRBG1KFqIQmyqpijYNvVRNLSijRDfmipSTaKUkGCVPu7O
95t7wWWpf4icPec735mZb2cnExfHypcMjEQibf6/5P91p/pyKttt1bHfKsro
8VRupf/JL7ayizI69j/yVBLmnLNVElqPPaX1p0Os+WZbHfDLO/6kfjd8r6f6
c/wPavHvQ78K/jb8Mvq14b8Qv5ZUfNqHddPSY62fRL8W/MfYKtmu6Bj9h9Dv
CPxfltR/S32XJfm+YT03LPFrMuuH/xG/RuovkWcL/N1UrP02WZLnXirW/mss
yfc7+arp3wm24W+Bq/C/Tv1ccAf+09H/Rp638PvV7A/5z8IPhv8+PdZ5T6Zi
46dxozkP8DZzXmAXvoB8NdTnkucz9jeL9cTQjyTPMnOe4CpPre0qO/763zHB
FZ7q9uHa3pj4zYPviUm/ck9NSH5wH1wKvznkdX0BeL6nyn3YdTUqfhXg81FZ
z/vgE1HRz8SvCf4dTyXpsr3gN/FviEre8aY//sNSsc67jvX0uS+MdZ6H6bHW
d7qSvzYm+a645EN/Af128M8u6wH/QP1B8HfwH+F/EH4M57MH/mJU7T6T1ezU
4d8flfNe6cr689BXgVeQb04q1n7W/+BWMw9uMD867yJX5i+f+VzqyrxNZf4+
doPvk8YfujLPpdQvgK+k/gP4KHwp/h7zOht+HX4lbnAf6Hwz6N8AXwzeCJ+H
/kv41/D7Av8BrG+rpQ6XdNZkPk1I/32WmuXDw70JqT9mqc8zfcUj+BOWStIl
PYngvtP1D8Ht6O+jf2CpJKy5k5B+EVvqb+KfaUv9tYTky+b+HUjeyXaQX/aX
+zsvFet+Femx1i8PseyHHeyX7Af93gbvRZ/vBr9nmi8At1JfmB7r+kLy/BRi
vV/XWe8b5Onn92gE9SMcOY9n7N9oR/gIfJYj/QZQn+1IvkFm/xzxH2z2C5xB
/7ng4eBP8XvVzCN4PH7b0Web+aLfVPQ2+D30i8j7CXmXOtzPYAv/FdRX4++E
/pqvNucD9tDvxK82xJqvZT278NsQYp1vI/m+Qr+Z+n341dP/APoG+EvgOur/
YX2b8J8UF7weXBAX/3rqp8SlfhfrUfBfw79LfSP1xXHJf8icH/om+s9E3xxi
eb/gNxt9C/Vz0LfCl6FvM/MAfxk+Ny77cfO59d7D7zK4Oz02vzfpsN6Pf+nf
Dv8S74EL8CPN+5PzHGven+gnwp/h/HJ5LzyAL8RvOPtfDJ/P+spSsTm/dFi+
f/HgvSHvHfwT6O86wftG7k8zf+B6M8/mvYt+lRd8fzS/2gu+r7p+Df1noV9P
/RQzz+Z9ZeYXPA68A/9R6Hd6wX0j84n+ZfZzD/6vwB817znqz3vBfaTz3OE8
hjrB+1XzT7jf/jD7w33aRZ5b8N3or4R/fzz/98h/NOnbyg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/U0jpv/QygKHJQW2XNcPNjgc/goU6CtwuL4YKHCz
wQEo+1WjA8r/CJWfVuBQCFS+mKvRASQds7jAgQukQKXRAWzewQIHkHSBeSNE
/weoftdGB02QgEwhxL7ARoh5foUQ+VCo+oZCiPl+UPM3F0LMc4fyb0PVW0LN
+wI1TxGqX6AI7j6w+WJQ/ieofziK4P4Dm/cbav7+Boh5dwoh/lkDVb8BKj+/
Ae4+sH0TofwAqHv7oOEjB5WfCjX/NTR85kD5h6Hhs7rBAT38ARfPvOE=
                    "]}, CurveClosed -> {1, 1}], 
                    GrayLevel[0], 
                    Opacity[1.], 
                    
                    JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJyNl3toVEcYxVcFsamKxdT6wBr7R0iwaQkhgtjIlKhRkLSJVYgG29gKSnX3
3rsUTYrde7GK8RVDRBG1KFqIQmyqpijYNvVRNLSijRDfmipSTaKUkGCVPu7O
95t7wWWpf4icPec735mZb2cnExfHypcMjEQibf6/5P91p/pyKttt1bHfKsro
8VRupf/JL7ayizI69j/yVBLmnLNVElqPPaX1p0Os+WZbHfDLO/6kfjd8r6f6
c/wPavHvQ78K/jb8Mvq14b8Qv5ZUfNqHddPSY62fRL8W/MfYKtmu6Bj9h9Dv
CPxfltR/S32XJfm+YT03LPFrMuuH/xG/RuovkWcL/N1UrP02WZLnXirW/mss
yfc7+arp3wm24W+Bq/C/Tv1ccAf+09H/Rp638PvV7A/5z8IPhv8+PdZ5T6Zi
46dxozkP8DZzXmAXvoB8NdTnkucz9jeL9cTQjyTPMnOe4CpPre0qO/763zHB
FZ7q9uHa3pj4zYPviUm/ck9NSH5wH1wKvznkdX0BeL6nyn3YdTUqfhXg81FZ
z/vgE1HRz8SvCf4dTyXpsr3gN/FviEre8aY//sNSsc67jvX0uS+MdZ6H6bHW
d7qSvzYm+a645EN/Af128M8u6wH/QP1B8HfwH+F/EH4M57MH/mJU7T6T1ezU
4d8flfNe6cr689BXgVeQb04q1n7W/+BWMw9uMD867yJX5i+f+VzqyrxNZf4+
doPvk8YfujLPpdQvgK+k/gP4KHwp/h7zOht+HX4lbnAf6Hwz6N8AXwzeCJ+H
/kv41/D7Av8BrG+rpQ6XdNZkPk1I/32WmuXDw70JqT9mqc8zfcUj+BOWStIl
PYngvtP1D8Ht6O+jf2CpJKy5k5B+EVvqb+KfaUv9tYTky+b+HUjeyXaQX/aX
+zsvFet+Femx1i8PseyHHeyX7Af93gbvRZ/vBr9nmi8At1JfmB7r+kLy/BRi
vV/XWe8b5Onn92gE9SMcOY9n7N9oR/gIfJYj/QZQn+1IvkFm/xzxH2z2C5xB
/7ng4eBP8XvVzCN4PH7b0Web+aLfVPQ2+D30i8j7CXmXOtzPYAv/FdRX4++E
/pqvNucD9tDvxK82xJqvZT278NsQYp1vI/m+Qr+Z+n341dP/APoG+EvgOur/
YX2b8J8UF7weXBAX/3rqp8SlfhfrUfBfw79LfSP1xXHJf8icH/om+s9E3xxi
eb/gNxt9C/Vz0LfCl6FvM/MAfxk+Ny77cfO59d7D7zK4Oz02vzfpsN6Pf+nf
Dv8S74EL8CPN+5PzHGven+gnwp/h/HJ5LzyAL8RvOPtfDJ/P+spSsTm/dFi+
f/HgvSHvHfwT6O86wftG7k8zf+B6M8/mvYt+lRd8fzS/2gu+r7p+Df1noV9P
/RQzz+Z9ZeYXPA68A/9R6Hd6wX0j84n+ZfZzD/6vwB817znqz3vBfaTz3OE8
hjrB+1XzT7jf/jD7w33aRZ5b8N3or4R/fzz/98h/NOnbyg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/U0jpv/QygKHJQW2XNcPNjgc/goU6CtwuL4YKHCz
wQEo+1WjA8r/CJWfVuBQCFS+mKvRASQds7jAgQukQKXRAWzewQIHkHSBeSNE
/weoftdGB02QgEwhxL7ARoh5foUQ+VCo+oZCiPl+UPM3F0LMc4fyb0PVW0LN
+wI1TxGqX6AI7j6w+WJQ/ieofziK4P4Dm/cbav7+Boh5dwoh/lkDVb8BKj+/
Ae4+sH0TofwAqHv7oOEjB5WfCjX/NTR85kD5h6Hhs7rBAT38ARfPvOE=
                    "]}, CurveClosed -> {1, 1}]}, {42, 42}], {{{
                    0.9997951061847711, 
                    0.020242175006217597`}, {-0.020242175006217597`, 
                    0.9997951061847711}}, Center}], {{{0.8, 0.}, {0., 0.8}}, 
                    Center}]}, ImagePadding -> 0.2, 
                  PlotRange -> {{242, 348}, {506, 612}}, PlotRangeClipping -> 
                  True, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Text\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2581", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Invertibility: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Impossible\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Missing values: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Forbidden\"", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[FeatureExtractorFunction, 215402776, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           FeatureExtractorFunction, 
            11486143210361906538282795408777284690932548168265495001824, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("FeatureExtractorFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 11486143210361906538282795408777284690932548168265495001824,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellEditDuplicate->True,
 CellChangeTimes->{3.7814588516422653`*^9, 3.7814589730854125`*^9, 
  3.7814592279883614`*^9, 3.7814593413043795`*^9, 3.7814594114692745`*^9, 
  3.7814595598099747`*^9, 3.7814598234859734`*^9, 3.7814642154887753`*^9, 
  3.7814657434388485`*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"2209d5d7-43ba-4864-bf66-02174cf56c25"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LogC", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"Rule", "@@@", 
     RowBox[{"train", "[", 
      RowBox[{"[", 
       RowBox[{
        RowBox[{"2", ";;", "All"}], ",", 
        RowBox[{"2", ";;", "3"}]}], "]"}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Method", "\[Rule]", "\"\<LogisticRegression\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"FeatureExtractor", "\[Rule]", "NumericFE"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7814588264176683`*^9, 3.78145882679765*^9}, {
  3.7814588728671055`*^9, 3.781458889075777*^9}, {3.7814641789046917`*^9, 
  3.781464179102976*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"39d749d6-13e5-4f63-92dc-5fdc6f89bb97"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Text\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "1", "2", "3", "4"}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Text\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "1", "2", "3", "4"}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["2586", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierFunction, 215673544, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierFunction, 
            11486143210361906538282795408777284690950994912338654336256, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 11486143210361906538282795408777284690950994912338654336256,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.781458910974759*^9, 3.781459030274584*^9, 
  3.7814592560348606`*^9, 3.7814594592879405`*^9, 3.781459599043602*^9, 
  3.7814642425493064`*^9, 3.7814657677822423`*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"dbc591d1-9334-4d3f-9978-74eec69829df"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "@", "LogC"}]], "Input",
 CellChangeTimes->{{3.781458899806611*^9, 3.781458901815243*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"1cb413ac-bc1e-4509-928f-1c48e2174704"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12],
         FrameMargins->{{10, 5}, {-4, 2}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.96, 0.96, 0.96],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Data type\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], "\<\"Text\"\>"},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Classes\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{",","\",\"","1","2","3","4"},
               "RowWithSeparators"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Accuracy\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{InterpretationBox[
                 RowBox[{"(", 
                   TemplateBox[{"94.6", "1.5"}, "Around"], ")"}], 
                 Around[94.647077580693533605`3., 1.4522660806558655988`3.]],
                "\"%\"","percent","\"Percent\""},
               "QuantityPostfix"]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["\<\"LogisticRegression\"\>",
                TemplateBox[{
                  TagBox[
                   
                   DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 20, "Length" -> 3, "InitialType" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "Shape" -> 
                    TypeSystem`PackageScope`DocumentShape[
                    
                    Association[{"L1Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[34], {
                    "L2Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[60], {
                    "OptimizationMethod"} -> 
                    TypeSystem`PackageScope`AtomShape[48.00000000000001]], 1],
                     "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[359340175], "Type" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "HandleQ" -> True, "RowTarget" -> 
                    20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[359340175]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 239541210][{
                    Key["L1Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    239541210][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    239541210][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 239541210][{
                    Key["L2Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    239541210][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["10.0"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    239541210][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 239541210][{
                    Key["OptimizationMethod"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    239541210][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation["LBFGS", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    239541210][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], 
                    ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 239541210][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    239541210]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    239541210][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    239541210][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                   DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                 DisplayFunction -> (#& ), 
                 InterpretationFunction -> ("Dataset[<>]"& )]],
               Annotation[#, 
                Dataset[
                 Association[
                 "L1Regularization" -> 0, "L2Regularization" -> 10., 
                  "OptimizationMethod" -> "LBFGS"], 
                 
                 TypeSystem`Struct[{
                  "L1Regularization", "L2Regularization", 
                   "OptimizationMethod"}, {
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[String]}], 
                 Association["ID" -> 267821459594040]], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Single evaluation time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "10.6`",
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}],"milliseconds per example",FractionBox[
                "\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Batch evaluation speed\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "934.`",
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"s\""}],"examples per second",
                FractionBox["\"Examples\"", "\"Seconds\""]},
               "Quantity"]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                 TagBox[
                  TooltipBox[
                  "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.2059899489745403156`3.",StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0349186740678020871`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.1361526008389361553`3.",
                   "\", \"", "0.2758272971101444759`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.1361526008389361553`3., 
                  ", ", 0.2758272971101444759`3., "]"}], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Model memory\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"215.`","\"MB\"","megabytes","\"Megabytes\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Training examples used\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"2586","\"examples\"","examples","\"Examples\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"24.1`","\"s\"","seconds","\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.3190302367085154}, {
                    4.0943445622221, 0.31906623227555403`}, {
                    5.991464547107982, 0.3191311108253034}, {
                    7.634820677745543, -1.579927902768621}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.3190302367085154}}, {{4.0943445622221, 
                    0.31906623227555403`}}, {{5.991464547107982, 
                    0.3191311108253034}}, {{
                    7.634820677745543, -1.579927902768621}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 0.31693048467173407`}, {
                    2.302585092994046, 0.32112558902339267`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, 0.31702553564240016`}, {
                    4.0943445622221, 0.32110277294557993`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.991464547107982, 0.31585580751408393`}, {
                    5.991464547107982, 0.32239572153672225`}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{7.634820677745543, -1.7656749970014953`}, {
                    7.634820677745543, -1.4233375748905157`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, -1.6854311813016167`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {-1.6854311813016167`, 0.3191311108253034}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.3328626315716739}, {
                    4.0943445622221, 0.3345608349248312}, {5.991464547107982, 
                    0.3327718222768063}, {7.634820677745543, 
                    0.9464707758069353}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.3328626315716739}}, {{4.0943445622221, 
                    0.3345608349248312}}, {{5.991464547107982, 
                    0.3327718222768063}}, {{7.634820677745543, 
                    0.9464707758069353}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, 0.2976545497650593}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {0.2976545497650593, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.3939010832823132}, {
                    4.0943445622221, 0.4594282327979982}, {5.991464547107982, 
                    0.3470138697736883}, {
                    7.634820677745543, -1.1238743527023687`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267825754561336]]}, Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.31924002377580457`}, {
                    4.0943445622221, 0.3197533057036214}, {5.991464547107982, 
                    0.319599976275861}, {7.634820677745543, 
                    0.31687753899270976`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267830049528632]]}, Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.509345301210458}, {
                    4.0943445622221, 2.374270863883312}, {5.991464547107982, 
                    2.20292565225234}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267834344495928]]}, Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.77807257796789}, {
                    4.0943445622221, 1.7713999620776482`}, {5.991464547107982,
                     0.6647571168495832}, {
                    7.634820677745543, -1.3630516924305847`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267838639463224]]}, Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.413615845136108}, {
                    4.0943445622221, 2.6505733785813534`}, {5.991464547107982,
                     1.546728345161992}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267842934430520]]}, Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 1.7033714981096457`}, {
                    4.0943445622221, 2.4483199502795077`}, {5.991464547107982,
                     0.9948461320802385}, {
                    7.634820677745543, -1.1268035568797485`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267847229397816]]}, Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.3190302367085154}, {
                    4.0943445622221, 0.31906623227555403`}, {
                    5.991464547107982, 0.3191311108253034}, {
                    7.634820677745543, 0.3182595615140761}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267851524365112]]}, Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.568874040504559}, {
                    4.0943445622221, 2.712502711495998}, {5.991464547107982, 
                    2.0206065498678303`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.00001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267855819332408]]}, Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 2.7332012794581537`}, {
                    4.0943445622221, 2.624110858083434}, {5.991464547107982, 
                    1.2791678282120236`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267860114299704]]}, Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.4639442321866174}, {
                    4.0943445622221, 0.7914643518145263}, {5.991464547107982, 
                    0.45784281941174815`}, {
                    7.634820677745543, -1.579927902768621}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267864409267000]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.3939010832823132}}, {{
                    4.0943445622221, 0.4594282327979982}}, {{
                    5.991464547107982, 0.3470138697736883}}, {{
                    7.634820677745543, -1.1238743527023687`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267825754561336]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.31924002377580457`}}, {{
                    4.0943445622221, 0.3197533057036214}}, {{
                    5.991464547107982, 0.319599976275861}}, {{
                    7.634820677745543, 0.31687753899270976`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267830049528632]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.509345301210458}}, {{4.0943445622221,
                     2.374270863883312}}, {{5.991464547107982, 
                    2.20292565225234}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267834344495928]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.77807257796789}}, {{4.0943445622221, 
                    1.7713999620776482`}}, {{5.991464547107982, 
                    0.6647571168495832}}, {{
                    7.634820677745543, -1.3630516924305847`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267838639463224]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.413615845136108}}, {{4.0943445622221,
                     2.6505733785813534`}}, {{5.991464547107982, 
                    1.546728345161992}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267842934430520]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 1.7033714981096457`}}, {{
                    4.0943445622221, 2.4483199502795077`}}, {{
                    5.991464547107982, 0.9948461320802385}}, {{
                    7.634820677745543, -1.1268035568797485`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267847229397816]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.3190302367085154}}, {{
                    4.0943445622221, 0.31906623227555403`}}, {{
                    5.991464547107982, 0.3191311108253034}}, {{
                    7.634820677745543, 0.3182595615140761}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267851524365112]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.568874040504559}}, {{4.0943445622221,
                     2.712502711495998}}, {{5.991464547107982, 
                    2.0206065498678303`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.00001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267855819332408]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 2.7332012794581537`}}, {{
                    4.0943445622221, 2.624110858083434}}, {{5.991464547107982,
                     1.2791678282120236`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267860114299704]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.4639442321866174}}, {{
                    4.0943445622221, 0.7914643518145263}}, {{
                    5.991464547107982, 0.45784281941174815`}}, {{
                    7.634820677745543, -1.579927902768621}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267864409267000]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267825754561336]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267830049528632]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267834344495928]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267838639463224]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267842934430520]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267847229397816]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267851524365112]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.00001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267855819332408]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267860114299704]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267864409267000]]}, 
                    Center]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267825754561336]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267830049528632]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267834344495928]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267838639463224]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267842934430520]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267847229397816]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267851524365112]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.00001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267855819332408]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267860114299704]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267864409267000]]}, 
                    Center]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, -1.8659724551726866`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {-1.8659724551726866`, 3.568874040504559}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file12Panel`PackagePrivate`pos$$ - 1, 
                    1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file12Panel`PackagePrivate`pos$$ + 1, 
                    Length[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.3190302367085154}, {
                    4.0943445622221, 0.31906623227555403`}, {
                    5.991464547107982, 0.3191311108253034}, {
                    7.634820677745543, -1.579927902768621}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.3190302367085154}}, {{4.0943445622221, 
                    0.31906623227555403`}}, {{5.991464547107982, 
                    0.3191311108253034}}, {{
                    7.634820677745543, -1.579927902768621}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 0.31693048467173407`}, {
                    2.302585092994046, 0.32112558902339267`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    Line[{{4.0943445622221, 0.31702553564240016`}, {
                    4.0943445622221, 0.32110277294557993`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.991464547107982, 0.31585580751408393`}, {
                    5.991464547107982, 0.32239572153672225`}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{7.634820677745543, -1.7656749970014953`}, {
                    7.634820677745543, -1.4233375748905157`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}}, {{}, {}}}}, {DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, -1.6854311813016167`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {-1.6854311813016167`, 0.3191311108253034}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.3328626315716739}, {
                    4.0943445622221, 0.3345608349248312}, {5.991464547107982, 
                    0.3327718222768063}, {7.634820677745543, 
                    0.9464707758069353}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.3328626315716739}}, {{4.0943445622221, 
                    0.3345608349248312}}, {{5.991464547107982, 
                    0.3327718222768063}}, {{7.634820677745543, 
                    0.9464707758069353}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, 0.2976545497650593}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {0.2976545497650593, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.3939010832823132}, {
                    4.0943445622221, 0.4594282327979982}, {5.991464547107982, 
                    0.3470138697736883}, {
                    7.634820677745543, -1.1238743527023687`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267825754561336]]}, Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.31924002377580457`}, {
                    4.0943445622221, 0.3197533057036214}, {5.991464547107982, 
                    0.319599976275861}, {7.634820677745543, 
                    0.31687753899270976`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267830049528632]]}, Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.509345301210458}, {
                    4.0943445622221, 2.374270863883312}, {5.991464547107982, 
                    2.20292565225234}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267834344495928]]}, Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.77807257796789}, {
                    4.0943445622221, 1.7713999620776482`}, {5.991464547107982,
                     0.6647571168495832}, {
                    7.634820677745543, -1.3630516924305847`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267838639463224]]}, Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.413615845136108}, {
                    4.0943445622221, 2.6505733785813534`}, {5.991464547107982,
                     1.546728345161992}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267842934430520]]}, Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 1.7033714981096457`}, {
                    4.0943445622221, 2.4483199502795077`}, {5.991464547107982,
                     0.9948461320802385}, {
                    7.634820677745543, -1.1268035568797485`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267847229397816]]}, Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.3190302367085154}, {
                    4.0943445622221, 0.31906623227555403`}, {
                    5.991464547107982, 0.3191311108253034}, {
                    7.634820677745543, 0.3182595615140761}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267851524365112]]}, Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 3.568874040504559}, {
                    4.0943445622221, 2.712502711495998}, {5.991464547107982, 
                    2.0206065498678303`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.00001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267855819332408]]}, Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 2.7332012794581537`}, {
                    4.0943445622221, 2.624110858083434}, {5.991464547107982, 
                    1.2791678282120236`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267860114299704]]}, Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.4639442321866174}, {
                    4.0943445622221, 0.7914643518145263}, {5.991464547107982, 
                    0.45784281941174815`}, {
                    7.634820677745543, -1.579927902768621}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267864409267000]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.3939010832823132}}, {{
                    4.0943445622221, 0.4594282327979982}}, {{
                    5.991464547107982, 0.3470138697736883}}, {{
                    7.634820677745543, -1.1238743527023687`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267825754561336]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.31924002377580457`}}, {{
                    4.0943445622221, 0.3197533057036214}}, {{
                    5.991464547107982, 0.319599976275861}}, {{
                    7.634820677745543, 0.31687753899270976`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267830049528632]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.509345301210458}}, {{4.0943445622221,
                     2.374270863883312}}, {{5.991464547107982, 
                    2.20292565225234}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267834344495928]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.77807257796789}}, {{4.0943445622221, 
                    1.7713999620776482`}}, {{5.991464547107982, 
                    0.6647571168495832}}, {{
                    7.634820677745543, -1.3630516924305847`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267838639463224]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.413615845136108}}, {{4.0943445622221,
                     2.6505733785813534`}}, {{5.991464547107982, 
                    1.546728345161992}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267842934430520]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 1.7033714981096457`}}, {{
                    4.0943445622221, 2.4483199502795077`}}, {{
                    5.991464547107982, 0.9948461320802385}}, {{
                    7.634820677745543, -1.1268035568797485`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267847229397816]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.3190302367085154}}, {{
                    4.0943445622221, 0.31906623227555403`}}, {{
                    5.991464547107982, 0.3191311108253034}}, {{
                    7.634820677745543, 0.3182595615140761}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267851524365112]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 3.568874040504559}}, {{4.0943445622221,
                     2.712502711495998}}, {{5.991464547107982, 
                    2.0206065498678303`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.00001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267855819332408]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 2.7332012794581537`}}, {{
                    4.0943445622221, 2.624110858083434}}, {{5.991464547107982,
                     1.2791678282120236`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267860114299704]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.4639442321866174}}, {{
                    4.0943445622221, 0.7914643518145263}}, {{
                    5.991464547107982, 0.45784281941174815`}}, {{
                    7.634820677745543, -1.579927902768621}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267864409267000]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267825754561336]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267830049528632]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267834344495928]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267838639463224]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267842934430520]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267847229397816]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267851524365112]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.00001, 
                    "OptimizationMethod" -> Automatic], 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267855819332408]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267860114299704]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267864409267000]]}, 
                    Center]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267825754561336]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267830049528632]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267834344495928]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267838639463224]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267842934430520]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267847229397816]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267851524365112]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.00001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267855819332408]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267860114299704]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 267864409267000]]}, 
                    Center]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}}}, {{}, {}}}}, {DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, -1.8659724551726866`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {-1.8659724551726866`, 3.568874040504559}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}]}]], 
                    Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{429., {159., 165.}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[0.8], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Background->GrayLevel[1],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.781458915600394*^9, 3.7814592583596115`*^9, 
  3.7814594666101475`*^9, 3.7814595997856197`*^9, 3.781464243416568*^9, 
  3.7814657685657063`*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"2731c2b5-b153-4c6a-bc91-8d4cc787860f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TFIDFExtractor", "=", 
  RowBox[{"FeatureExtraction", "[", 
   RowBox[{
    RowBox[{"train", "[", 
     RowBox[{"[", 
      RowBox[{
       RowBox[{"2", ";;", "All"}], ",", "2"}], "]"}], "]"}], ",", 
    "\[IndentingNewLine]", "\"\<TFIDF\>\"", ",", "\[IndentingNewLine]", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7814652361920657`*^9, 3.7814652366114545`*^9}, 
   3.7814665708471794`*^9},
 CellLabel->"In[33]:=",ExpressionUUID->"b5a462e4-156f-41c2-8fbe-00326ed458a8"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["FeatureExtractorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              InsetBox[
               FormBox[
                TagBox[
                 GridBox[{{
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.21999999999999997`}}, 
                    "Rows" -> {{-0.43}}}], "Grid"], TraditionalForm], {295, 
               559}], 
              GeometricTransformationBox[
               GeometricTransformationBox[
                GeometricTransformationBox[{
                  Thickness[0.015], 
                  JoinForm[{"Miter", 10.}], 
                  GrayLevel[0.7], 
                  Opacity[1.], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJyNl3toVEcYxVcFsamKxdT6wBr7R0iwaQkhgtjIlKhRkLSJVYgG29gKSnX3
3rsUTYrde7GK8RVDRBG1KFqIQmyqpijYNvVRNLSijRDfmipSTaKUkGCVPu7O
95t7wWWpf4icPec735mZb2cnExfHypcMjEQibf6/5P91p/pyKttt1bHfKsro
8VRupf/JL7ayizI69j/yVBLmnLNVElqPPaX1p0Os+WZbHfDLO/6kfjd8r6f6
c/wPavHvQ78K/jb8Mvq14b8Qv5ZUfNqHddPSY62fRL8W/MfYKtmu6Bj9h9Dv
CPxfltR/S32XJfm+YT03LPFrMuuH/xG/RuovkWcL/N1UrP02WZLnXirW/mss
yfc7+arp3wm24W+Bq/C/Tv1ccAf+09H/Rp638PvV7A/5z8IPhv8+PdZ5T6Zi
46dxozkP8DZzXmAXvoB8NdTnkucz9jeL9cTQjyTPMnOe4CpPre0qO/763zHB
FZ7q9uHa3pj4zYPviUm/ck9NSH5wH1wKvznkdX0BeL6nyn3YdTUqfhXg81FZ
z/vgE1HRz8SvCf4dTyXpsr3gN/FviEre8aY//sNSsc67jvX0uS+MdZ6H6bHW
d7qSvzYm+a645EN/Af128M8u6wH/QP1B8HfwH+F/EH4M57MH/mJU7T6T1ezU
4d8flfNe6cr689BXgVeQb04q1n7W/+BWMw9uMD867yJX5i+f+VzqyrxNZf4+
doPvk8YfujLPpdQvgK+k/gP4KHwp/h7zOht+HX4lbnAf6Hwz6N8AXwzeCJ+H
/kv41/D7Av8BrG+rpQ6XdNZkPk1I/32WmuXDw70JqT9mqc8zfcUj+BOWStIl
PYngvtP1D8Ht6O+jf2CpJKy5k5B+EVvqb+KfaUv9tYTky+b+HUjeyXaQX/aX
+zsvFet+Femx1i8PseyHHeyX7Af93gbvRZ/vBr9nmi8At1JfmB7r+kLy/BRi
vV/XWe8b5Onn92gE9SMcOY9n7N9oR/gIfJYj/QZQn+1IvkFm/xzxH2z2C5xB
/7ng4eBP8XvVzCN4PH7b0Web+aLfVPQ2+D30i8j7CXmXOtzPYAv/FdRX4++E
/pqvNucD9tDvxK82xJqvZT278NsQYp1vI/m+Qr+Z+n341dP/APoG+EvgOur/
YX2b8J8UF7weXBAX/3rqp8SlfhfrUfBfw79LfSP1xXHJf8icH/om+s9E3xxi
eb/gNxt9C/Vz0LfCl6FvM/MAfxk+Ny77cfO59d7D7zK4Oz02vzfpsN6Pf+nf
Dv8S74EL8CPN+5PzHGven+gnwp/h/HJ5LzyAL8RvOPtfDJ/P+spSsTm/dFi+
f/HgvSHvHfwT6O86wftG7k8zf+B6M8/mvYt+lRd8fzS/2gu+r7p+Df1noV9P
/RQzz+Z9ZeYXPA68A/9R6Hd6wX0j84n+ZfZzD/6vwB817znqz3vBfaTz3OE8
hjrB+1XzT7jf/jD7w33aRZ5b8N3or4R/fzz/98h/NOnbyg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/U0jpv/QygKHJQW2XNcPNjgc/goU6CtwuL4YKHCz
wQEo+1WjA8r/CJWfVuBQCFS+mKvRASQds7jAgQukQKXRAWzewQIHkHSBeSNE
/weoftdGB02QgEwhxL7ARoh5foUQ+VCo+oZCiPl+UPM3F0LMc4fyb0PVW0LN
+wI1TxGqX6AI7j6w+WJQ/ieofziK4P4Dm/cbav7+Boh5dwoh/lkDVb8BKj+/
Ae4+sH0TofwAqHv7oOEjB5WfCjX/NTR85kD5h6Hhs7rBAT38ARfPvOE=
                    "]}, CurveClosed -> {1, 1}], 
                  GrayLevel[0], 
                  Opacity[1.], 
                  
                  JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJyNl3toVEcYxVcFsamKxdT6wBr7R0iwaQkhgtjIlKhRkLSJVYgG29gKSnX3
3rsUTYrde7GK8RVDRBG1KFqIQmyqpijYNvVRNLSijRDfmipSTaKUkGCVPu7O
95t7wWWpf4icPec735mZb2cnExfHypcMjEQibf6/5P91p/pyKttt1bHfKsro
8VRupf/JL7ayizI69j/yVBLmnLNVElqPPaX1p0Os+WZbHfDLO/6kfjd8r6f6
c/wPavHvQ78K/jb8Mvq14b8Qv5ZUfNqHddPSY62fRL8W/MfYKtmu6Bj9h9Dv
CPxfltR/S32XJfm+YT03LPFrMuuH/xG/RuovkWcL/N1UrP02WZLnXirW/mss
yfc7+arp3wm24W+Bq/C/Tv1ccAf+09H/Rp638PvV7A/5z8IPhv8+PdZ5T6Zi
46dxozkP8DZzXmAXvoB8NdTnkucz9jeL9cTQjyTPMnOe4CpPre0qO/763zHB
FZ7q9uHa3pj4zYPviUm/ck9NSH5wH1wKvznkdX0BeL6nyn3YdTUqfhXg81FZ
z/vgE1HRz8SvCf4dTyXpsr3gN/FviEre8aY//sNSsc67jvX0uS+MdZ6H6bHW
d7qSvzYm+a645EN/Af128M8u6wH/QP1B8HfwH+F/EH4M57MH/mJU7T6T1ezU
4d8flfNe6cr689BXgVeQb04q1n7W/+BWMw9uMD867yJX5i+f+VzqyrxNZf4+
doPvk8YfujLPpdQvgK+k/gP4KHwp/h7zOht+HX4lbnAf6Hwz6N8AXwzeCJ+H
/kv41/D7Av8BrG+rpQ6XdNZkPk1I/32WmuXDw70JqT9mqc8zfcUj+BOWStIl
PYngvtP1D8Ht6O+jf2CpJKy5k5B+EVvqb+KfaUv9tYTky+b+HUjeyXaQX/aX
+zsvFet+Femx1i8PseyHHeyX7Af93gbvRZ/vBr9nmi8At1JfmB7r+kLy/BRi
vV/XWe8b5Onn92gE9SMcOY9n7N9oR/gIfJYj/QZQn+1IvkFm/xzxH2z2C5xB
/7ng4eBP8XvVzCN4PH7b0Web+aLfVPQ2+D30i8j7CXmXOtzPYAv/FdRX4++E
/pqvNucD9tDvxK82xJqvZT278NsQYp1vI/m+Qr+Z+n341dP/APoG+EvgOur/
YX2b8J8UF7weXBAX/3rqp8SlfhfrUfBfw79LfSP1xXHJf8icH/om+s9E3xxi
eb/gNxt9C/Vz0LfCl6FvM/MAfxk+Ny77cfO59d7D7zK4Oz02vzfpsN6Pf+nf
Dv8S74EL8CPN+5PzHGven+gnwp/h/HJ5LzyAL8RvOPtfDJ/P+spSsTm/dFi+
f/HgvSHvHfwT6O86wftG7k8zf+B6M8/mvYt+lRd8fzS/2gu+r7p+Df1noV9P
/RQzz+Z9ZeYXPA68A/9R6Hd6wX0j84n+ZfZzD/6vwB817znqz3vBfaTz3OE8
hjrB+1XzT7jf/jD7w33aRZ5b8N3or4R/fzz/98h/NOnbyg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/U0jpv/QygKHJQW2XNcPNjgc/goU6CtwuL4YKHCz
wQEo+1WjA8r/CJWfVuBQCFS+mKvRASQds7jAgQukQKXRAWzewQIHkHSBeSNE
/weoftdGB02QgEwhxL7ARoh5foUQ+VCo+oZCiPl+UPM3F0LMc4fyb0PVW0LN
+wI1TxGqX6AI7j6w+WJQ/ieofziK4P4Dm/cbav7+Boh5dwoh/lkDVb8BKj+/
Ae4+sH0TofwAqHv7oOEjB5WfCjX/NTR85kD5h6Hhs7rBAT38ARfPvOE=
                    "]}, CurveClosed -> {1, 1}]}, {0, 0}], {{{
                 0.8308066817940764, -0.556561099508685}, {0.556561099508685, 
                 0.8308066817940764}}, Center}], {{{1, 0}, {0, 1}}, Center}], 
              GeometricTransformationBox[
               GeometricTransformationBox[
                GeometricTransformationBox[{
                  Thickness[0.015], 
                  JoinForm[{"Miter", 10.}], 
                  GrayLevel[0.7], 
                  Opacity[1.], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJyNl3toVEcYxVcFsamKxdT6wBr7R0iwaQkhgtjIlKhRkLSJVYgG29gKSnX3
3rsUTYrde7GK8RVDRBG1KFqIQmyqpijYNvVRNLSijRDfmipSTaKUkGCVPu7O
95t7wWWpf4icPec735mZb2cnExfHypcMjEQibf6/5P91p/pyKttt1bHfKsro
8VRupf/JL7ayizI69j/yVBLmnLNVElqPPaX1p0Os+WZbHfDLO/6kfjd8r6f6
c/wPavHvQ78K/jb8Mvq14b8Qv5ZUfNqHddPSY62fRL8W/MfYKtmu6Bj9h9Dv
CPxfltR/S32XJfm+YT03LPFrMuuH/xG/RuovkWcL/N1UrP02WZLnXirW/mss
yfc7+arp3wm24W+Bq/C/Tv1ccAf+09H/Rp638PvV7A/5z8IPhv8+PdZ5T6Zi
46dxozkP8DZzXmAXvoB8NdTnkucz9jeL9cTQjyTPMnOe4CpPre0qO/763zHB
FZ7q9uHa3pj4zYPviUm/ck9NSH5wH1wKvznkdX0BeL6nyn3YdTUqfhXg81FZ
z/vgE1HRz8SvCf4dTyXpsr3gN/FviEre8aY//sNSsc67jvX0uS+MdZ6H6bHW
d7qSvzYm+a645EN/Af128M8u6wH/QP1B8HfwH+F/EH4M57MH/mJU7T6T1ezU
4d8flfNe6cr689BXgVeQb04q1n7W/+BWMw9uMD867yJX5i+f+VzqyrxNZf4+
doPvk8YfujLPpdQvgK+k/gP4KHwp/h7zOht+HX4lbnAf6Hwz6N8AXwzeCJ+H
/kv41/D7Av8BrG+rpQ6XdNZkPk1I/32WmuXDw70JqT9mqc8zfcUj+BOWStIl
PYngvtP1D8Ht6O+jf2CpJKy5k5B+EVvqb+KfaUv9tYTky+b+HUjeyXaQX/aX
+zsvFet+Femx1i8PseyHHeyX7Af93gbvRZ/vBr9nmi8At1JfmB7r+kLy/BRi
vV/XWe8b5Onn92gE9SMcOY9n7N9oR/gIfJYj/QZQn+1IvkFm/xzxH2z2C5xB
/7ng4eBP8XvVzCN4PH7b0Web+aLfVPQ2+D30i8j7CXmXOtzPYAv/FdRX4++E
/pqvNucD9tDvxK82xJqvZT278NsQYp1vI/m+Qr+Z+n341dP/APoG+EvgOur/
YX2b8J8UF7weXBAX/3rqp8SlfhfrUfBfw79LfSP1xXHJf8icH/om+s9E3xxi
eb/gNxt9C/Vz0LfCl6FvM/MAfxk+Ny77cfO59d7D7zK4Oz02vzfpsN6Pf+nf
Dv8S74EL8CPN+5PzHGven+gnwp/h/HJ5LzyAL8RvOPtfDJ/P+spSsTm/dFi+
f/HgvSHvHfwT6O86wftG7k8zf+B6M8/mvYt+lRd8fzS/2gu+r7p+Df1noV9P
/RQzz+Z9ZeYXPA68A/9R6Hd6wX0j84n+ZfZzD/6vwB817znqz3vBfaTz3OE8
hjrB+1XzT7jf/jD7w33aRZ5b8N3or4R/fzz/98h/NOnbyg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/U0jpv/QygKHJQW2XNcPNjgc/goU6CtwuL4YKHCz
wQEo+1WjA8r/CJWfVuBQCFS+mKvRASQds7jAgQukQKXRAWzewQIHkHSBeSNE
/weoftdGB02QgEwhxL7ARoh5foUQ+VCo+oZCiPl+UPM3F0LMc4fyb0PVW0LN
+wI1TxGqX6AI7j6w+WJQ/ieofziK4P4Dm/cbav7+Boh5dwoh/lkDVb8BKj+/
Ae4+sH0TofwAqHv7oOEjB5WfCjX/NTR85kD5h6Hhs7rBAT38ARfPvOE=
                    "]}, CurveClosed -> {1, 1}], 
                  GrayLevel[0], 
                  Opacity[1.], 
                  
                  JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJyNl3toVEcYxVcFsamKxdT6wBr7R0iwaQkhgtjIlKhRkLSJVYgG29gKSnX3
3rsUTYrde7GK8RVDRBG1KFqIQmyqpijYNvVRNLSijRDfmipSTaKUkGCVPu7O
95t7wWWpf4icPec735mZb2cnExfHypcMjEQibf6/5P91p/pyKttt1bHfKsro
8VRupf/JL7ayizI69j/yVBLmnLNVElqPPaX1p0Os+WZbHfDLO/6kfjd8r6f6
c/wPavHvQ78K/jb8Mvq14b8Qv5ZUfNqHddPSY62fRL8W/MfYKtmu6Bj9h9Dv
CPxfltR/S32XJfm+YT03LPFrMuuH/xG/RuovkWcL/N1UrP02WZLnXirW/mss
yfc7+arp3wm24W+Bq/C/Tv1ccAf+09H/Rp638PvV7A/5z8IPhv8+PdZ5T6Zi
46dxozkP8DZzXmAXvoB8NdTnkucz9jeL9cTQjyTPMnOe4CpPre0qO/763zHB
FZ7q9uHa3pj4zYPviUm/ck9NSH5wH1wKvznkdX0BeL6nyn3YdTUqfhXg81FZ
z/vgE1HRz8SvCf4dTyXpsr3gN/FviEre8aY//sNSsc67jvX0uS+MdZ6H6bHW
d7qSvzYm+a645EN/Af128M8u6wH/QP1B8HfwH+F/EH4M57MH/mJU7T6T1ezU
4d8flfNe6cr689BXgVeQb04q1n7W/+BWMw9uMD867yJX5i+f+VzqyrxNZf4+
doPvk8YfujLPpdQvgK+k/gP4KHwp/h7zOht+HX4lbnAf6Hwz6N8AXwzeCJ+H
/kv41/D7Av8BrG+rpQ6XdNZkPk1I/32WmuXDw70JqT9mqc8zfcUj+BOWStIl
PYngvtP1D8Ht6O+jf2CpJKy5k5B+EVvqb+KfaUv9tYTky+b+HUjeyXaQX/aX
+zsvFet+Femx1i8PseyHHeyX7Af93gbvRZ/vBr9nmi8At1JfmB7r+kLy/BRi
vV/XWe8b5Onn92gE9SMcOY9n7N9oR/gIfJYj/QZQn+1IvkFm/xzxH2z2C5xB
/7ng4eBP8XvVzCN4PH7b0Web+aLfVPQ2+D30i8j7CXmXOtzPYAv/FdRX4++E
/pqvNucD9tDvxK82xJqvZT278NsQYp1vI/m+Qr+Z+n341dP/APoG+EvgOur/
YX2b8J8UF7weXBAX/3rqp8SlfhfrUfBfw79LfSP1xXHJf8icH/om+s9E3xxi
eb/gNxt9C/Vz0LfCl6FvM/MAfxk+Ny77cfO59d7D7zK4Oz02vzfpsN6Pf+nf
Dv8S74EL8CPN+5PzHGven+gnwp/h/HJ5LzyAL8RvOPtfDJ/P+spSsTm/dFi+
f/HgvSHvHfwT6O86wftG7k8zf+B6M8/mvYt+lRd8fzS/2gu+r7p+Df1noV9P
/RQzz+Z9ZeYXPA68A/9R6Hd6wX0j84n+ZfZzD/6vwB817znqz3vBfaTz3OE8
hjrB+1XzT7jf/jD7w33aRZ5b8N3or4R/fzz/98h/NOnbyg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/U0jpv/QygKHJQW2XNcPNjgc/goU6CtwuL4YKHCz
wQEo+1WjA8r/CJWfVuBQCFS+mKvRASQds7jAgQukQKXRAWzewQIHkHSBeSNE
/weoftdGB02QgEwhxL7ARoh5foUQ+VCo+oZCiPl+UPM3F0LMc4fyb0PVW0LN
+wI1TxGqX6AI7j6w+WJQ/ieofziK4P4Dm/cbav7+Boh5dwoh/lkDVb8BKj+/
Ae4+sH0TofwAqHv7oOEjB5WfCjX/NTR85kD5h6Hhs7rBAT38ARfPvOE=
                    "]}, CurveClosed -> {1, 1}]}, {42, 42}], {{{
                 0.8822195050625886, 
                 0.4708383426263426}, {-0.4708383426263426, 
                 0.8822195050625886}}, Center}], {{{0.8, 0.}, {0., 0.8}}, 
                Center}]}, ImagePadding -> 0.2, 
             PlotRange -> {{242, 348}, {506, 612}}, PlotRangeClipping -> True,
              FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Text\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Output type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "11896", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              InsetBox[
               FormBox[
                TagBox[
                 GridBox[{{
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["5", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["4", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["7", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["1", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}, {
                    StyleBox["8", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["3", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["0", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["6", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["2", 5, 
                    GrayLevel[0.7], StripOnInput -> False], 
                    StyleBox["9", 5, 
                    GrayLevel[0.7], StripOnInput -> False]}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.21999999999999997`}}, 
                    "Rows" -> {{-0.43}}}], "Grid"], TraditionalForm], {295, 
               559}], 
              GeometricTransformationBox[
               GeometricTransformationBox[
                GeometricTransformationBox[{
                  Thickness[0.015], 
                  JoinForm[{"Miter", 10.}], 
                  GrayLevel[0.7], 
                  Opacity[1.], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJyNl3toVEcYxVcFsamKxdT6wBr7R0iwaQkhgtjIlKhRkLSJVYgG29gKSnX3
3rsUTYrde7GK8RVDRBG1KFqIQmyqpijYNvVRNLSijRDfmipSTaKUkGCVPu7O
95t7wWWpf4icPec735mZb2cnExfHypcMjEQibf6/5P91p/pyKttt1bHfKsro
8VRupf/JL7ayizI69j/yVBLmnLNVElqPPaX1p0Os+WZbHfDLO/6kfjd8r6f6
c/wPavHvQ78K/jb8Mvq14b8Qv5ZUfNqHddPSY62fRL8W/MfYKtmu6Bj9h9Dv
CPxfltR/S32XJfm+YT03LPFrMuuH/xG/RuovkWcL/N1UrP02WZLnXirW/mss
yfc7+arp3wm24W+Bq/C/Tv1ccAf+09H/Rp638PvV7A/5z8IPhv8+PdZ5T6Zi
46dxozkP8DZzXmAXvoB8NdTnkucz9jeL9cTQjyTPMnOe4CpPre0qO/763zHB
FZ7q9uHa3pj4zYPviUm/ck9NSH5wH1wKvznkdX0BeL6nyn3YdTUqfhXg81FZ
z/vgE1HRz8SvCf4dTyXpsr3gN/FviEre8aY//sNSsc67jvX0uS+MdZ6H6bHW
d7qSvzYm+a645EN/Af128M8u6wH/QP1B8HfwH+F/EH4M57MH/mJU7T6T1ezU
4d8flfNe6cr689BXgVeQb04q1n7W/+BWMw9uMD867yJX5i+f+VzqyrxNZf4+
doPvk8YfujLPpdQvgK+k/gP4KHwp/h7zOht+HX4lbnAf6Hwz6N8AXwzeCJ+H
/kv41/D7Av8BrG+rpQ6XdNZkPk1I/32WmuXDw70JqT9mqc8zfcUj+BOWStIl
PYngvtP1D8Ht6O+jf2CpJKy5k5B+EVvqb+KfaUv9tYTky+b+HUjeyXaQX/aX
+zsvFet+Femx1i8PseyHHeyX7Af93gbvRZ/vBr9nmi8At1JfmB7r+kLy/BRi
vV/XWe8b5Onn92gE9SMcOY9n7N9oR/gIfJYj/QZQn+1IvkFm/xzxH2z2C5xB
/7ng4eBP8XvVzCN4PH7b0Web+aLfVPQ2+D30i8j7CXmXOtzPYAv/FdRX4++E
/pqvNucD9tDvxK82xJqvZT278NsQYp1vI/m+Qr+Z+n341dP/APoG+EvgOur/
YX2b8J8UF7weXBAX/3rqp8SlfhfrUfBfw79LfSP1xXHJf8icH/om+s9E3xxi
eb/gNxt9C/Vz0LfCl6FvM/MAfxk+Ny77cfO59d7D7zK4Oz02vzfpsN6Pf+nf
Dv8S74EL8CPN+5PzHGven+gnwp/h/HJ5LzyAL8RvOPtfDJ/P+spSsTm/dFi+
f/HgvSHvHfwT6O86wftG7k8zf+B6M8/mvYt+lRd8fzS/2gu+r7p+Df1noV9P
/RQzz+Z9ZeYXPA68A/9R6Hd6wX0j84n+ZfZzD/6vwB817znqz3vBfaTz3OE8
hjrB+1XzT7jf/jD7w33aRZ5b8N3or4R/fzz/98h/NOnbyg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/U0jpv/QygKHJQW2XNcPNjgc/goU6CtwuL4YKHCz
wQEo+1WjA8r/CJWfVuBQCFS+mKvRASQds7jAgQukQKXRAWzewQIHkHSBeSNE
/weoftdGB02QgEwhxL7ARoh5foUQ+VCo+oZCiPl+UPM3F0LMc4fyb0PVW0LN
+wI1TxGqX6AI7j6w+WJQ/ieofziK4P4Dm/cbav7+Boh5dwoh/lkDVb8BKj+/
Ae4+sH0TofwAqHv7oOEjB5WfCjX/NTR85kD5h6Hhs7rBAT38ARfPvOE=
                    "]}, CurveClosed -> {1, 1}], 
                  GrayLevel[0], 
                  Opacity[1.], 
                  
                  JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJyNl3toVEcYxVcFsamKxdT6wBr7R0iwaQkhgtjIlKhRkLSJVYgG29gKSnX3
3rsUTYrde7GK8RVDRBG1KFqIQmyqpijYNvVRNLSijRDfmipSTaKUkGCVPu7O
95t7wWWpf4icPec735mZb2cnExfHypcMjEQibf6/5P91p/pyKttt1bHfKsro
8VRupf/JL7ayizI69j/yVBLmnLNVElqPPaX1p0Os+WZbHfDLO/6kfjd8r6f6
c/wPavHvQ78K/jb8Mvq14b8Qv5ZUfNqHddPSY62fRL8W/MfYKtmu6Bj9h9Dv
CPxfltR/S32XJfm+YT03LPFrMuuH/xG/RuovkWcL/N1UrP02WZLnXirW/mss
yfc7+arp3wm24W+Bq/C/Tv1ccAf+09H/Rp638PvV7A/5z8IPhv8+PdZ5T6Zi
46dxozkP8DZzXmAXvoB8NdTnkucz9jeL9cTQjyTPMnOe4CpPre0qO/763zHB
FZ7q9uHa3pj4zYPviUm/ck9NSH5wH1wKvznkdX0BeL6nyn3YdTUqfhXg81FZ
z/vgE1HRz8SvCf4dTyXpsr3gN/FviEre8aY//sNSsc67jvX0uS+MdZ6H6bHW
d7qSvzYm+a645EN/Af128M8u6wH/QP1B8HfwH+F/EH4M57MH/mJU7T6T1ezU
4d8flfNe6cr689BXgVeQb04q1n7W/+BWMw9uMD867yJX5i+f+VzqyrxNZf4+
doPvk8YfujLPpdQvgK+k/gP4KHwp/h7zOht+HX4lbnAf6Hwz6N8AXwzeCJ+H
/kv41/D7Av8BrG+rpQ6XdNZkPk1I/32WmuXDw70JqT9mqc8zfcUj+BOWStIl
PYngvtP1D8Ht6O+jf2CpJKy5k5B+EVvqb+KfaUv9tYTky+b+HUjeyXaQX/aX
+zsvFet+Femx1i8PseyHHeyX7Af93gbvRZ/vBr9nmi8At1JfmB7r+kLy/BRi
vV/XWe8b5Onn92gE9SMcOY9n7N9oR/gIfJYj/QZQn+1IvkFm/xzxH2z2C5xB
/7ng4eBP8XvVzCN4PH7b0Web+aLfVPQ2+D30i8j7CXmXOtzPYAv/FdRX4++E
/pqvNucD9tDvxK82xJqvZT278NsQYp1vI/m+Qr+Z+n341dP/APoG+EvgOur/
YX2b8J8UF7weXBAX/3rqp8SlfhfrUfBfw79LfSP1xXHJf8icH/om+s9E3xxi
eb/gNxt9C/Vz0LfCl6FvM/MAfxk+Ny77cfO59d7D7zK4Oz02vzfpsN6Pf+nf
Dv8S74EL8CPN+5PzHGven+gnwp/h/HJ5LzyAL8RvOPtfDJ/P+spSsTm/dFi+
f/HgvSHvHfwT6O86wftG7k8zf+B6M8/mvYt+lRd8fzS/2gu+r7p+Df1noV9P
/RQzz+Z9ZeYXPA68A/9R6Hd6wX0j84n+ZfZzD/6vwB817znqz3vBfaTz3OE8
hjrB+1XzT7jf/jD7w33aRZ5b8N3or4R/fzz/98h/NOnbyg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/U0jpv/QygKHJQW2XNcPNjgc/goU6CtwuL4YKHCz
wQEo+1WjA8r/CJWfVuBQCFS+mKvRASQds7jAgQukQKXRAWzewQIHkHSBeSNE
/weoftdGB02QgEwhxL7ARoh5foUQ+VCo+oZCiPl+UPM3F0LMc4fyb0PVW0LN
+wI1TxGqX6AI7j6w+WJQ/ieofziK4P4Dm/cbav7+Boh5dwoh/lkDVb8BKj+/
Ae4+sH0TofwAqHv7oOEjB5WfCjX/NTR85kD5h6Hhs7rBAT38ARfPvOE=
                    "]}, CurveClosed -> {1, 1}]}, {0, 0}], {{{
                 0.8308066817940764, -0.556561099508685}, {0.556561099508685, 
                 0.8308066817940764}}, Center}], {{{1, 0}, {0, 1}}, Center}], 
              GeometricTransformationBox[
               GeometricTransformationBox[
                GeometricTransformationBox[{
                  Thickness[0.015], 
                  JoinForm[{"Miter", 10.}], 
                  GrayLevel[0.7], 
                  Opacity[1.], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJyNl3toVEcYxVcFsamKxdT6wBr7R0iwaQkhgtjIlKhRkLSJVYgG29gKSnX3
3rsUTYrde7GK8RVDRBG1KFqIQmyqpijYNvVRNLSijRDfmipSTaKUkGCVPu7O
95t7wWWpf4icPec735mZb2cnExfHypcMjEQibf6/5P91p/pyKttt1bHfKsro
8VRupf/JL7ayizI69j/yVBLmnLNVElqPPaX1p0Os+WZbHfDLO/6kfjd8r6f6
c/wPavHvQ78K/jb8Mvq14b8Qv5ZUfNqHddPSY62fRL8W/MfYKtmu6Bj9h9Dv
CPxfltR/S32XJfm+YT03LPFrMuuH/xG/RuovkWcL/N1UrP02WZLnXirW/mss
yfc7+arp3wm24W+Bq/C/Tv1ccAf+09H/Rp638PvV7A/5z8IPhv8+PdZ5T6Zi
46dxozkP8DZzXmAXvoB8NdTnkucz9jeL9cTQjyTPMnOe4CpPre0qO/763zHB
FZ7q9uHa3pj4zYPviUm/ck9NSH5wH1wKvznkdX0BeL6nyn3YdTUqfhXg81FZ
z/vgE1HRz8SvCf4dTyXpsr3gN/FviEre8aY//sNSsc67jvX0uS+MdZ6H6bHW
d7qSvzYm+a645EN/Af128M8u6wH/QP1B8HfwH+F/EH4M57MH/mJU7T6T1ezU
4d8flfNe6cr689BXgVeQb04q1n7W/+BWMw9uMD867yJX5i+f+VzqyrxNZf4+
doPvk8YfujLPpdQvgK+k/gP4KHwp/h7zOht+HX4lbnAf6Hwz6N8AXwzeCJ+H
/kv41/D7Av8BrG+rpQ6XdNZkPk1I/32WmuXDw70JqT9mqc8zfcUj+BOWStIl
PYngvtP1D8Ht6O+jf2CpJKy5k5B+EVvqb+KfaUv9tYTky+b+HUjeyXaQX/aX
+zsvFet+Femx1i8PseyHHeyX7Af93gbvRZ/vBr9nmi8At1JfmB7r+kLy/BRi
vV/XWe8b5Onn92gE9SMcOY9n7N9oR/gIfJYj/QZQn+1IvkFm/xzxH2z2C5xB
/7ng4eBP8XvVzCN4PH7b0Web+aLfVPQ2+D30i8j7CXmXOtzPYAv/FdRX4++E
/pqvNucD9tDvxK82xJqvZT278NsQYp1vI/m+Qr+Z+n341dP/APoG+EvgOur/
YX2b8J8UF7weXBAX/3rqp8SlfhfrUfBfw79LfSP1xXHJf8icH/om+s9E3xxi
eb/gNxt9C/Vz0LfCl6FvM/MAfxk+Ny77cfO59d7D7zK4Oz02vzfpsN6Pf+nf
Dv8S74EL8CPN+5PzHGven+gnwp/h/HJ5LzyAL8RvOPtfDJ/P+spSsTm/dFi+
f/HgvSHvHfwT6O86wftG7k8zf+B6M8/mvYt+lRd8fzS/2gu+r7p+Df1noV9P
/RQzz+Z9ZeYXPA68A/9R6Hd6wX0j84n+ZfZzD/6vwB817znqz3vBfaTz3OE8
hjrB+1XzT7jf/jD7w33aRZ5b8N3or4R/fzz/98h/NOnbyg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/U0jpv/QygKHJQW2XNcPNjgc/goU6CtwuL4YKHCz
wQEo+1WjA8r/CJWfVuBQCFS+mKvRASQds7jAgQukQKXRAWzewQIHkHSBeSNE
/weoftdGB02QgEwhxL7ARoh5foUQ+VCo+oZCiPl+UPM3F0LMc4fyb0PVW0LN
+wI1TxGqX6AI7j6w+WJQ/ieofziK4P4Dm/cbav7+Boh5dwoh/lkDVb8BKj+/
Ae4+sH0TofwAqHv7oOEjB5WfCjX/NTR85kD5h6Hhs7rBAT38ARfPvOE=
                    "]}, CurveClosed -> {1, 1}], 
                  GrayLevel[0], 
                  Opacity[1.], 
                  
                  JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {CompressedData["
1:eJyNl3toVEcYxVcFsamKxdT6wBr7R0iwaQkhgtjIlKhRkLSJVYgG29gKSnX3
3rsUTYrde7GK8RVDRBG1KFqIQmyqpijYNvVRNLSijRDfmipSTaKUkGCVPu7O
95t7wWWpf4icPec735mZb2cnExfHypcMjEQibf6/5P91p/pyKttt1bHfKsro
8VRupf/JL7ayizI69j/yVBLmnLNVElqPPaX1p0Os+WZbHfDLO/6kfjd8r6f6
c/wPavHvQ78K/jb8Mvq14b8Qv5ZUfNqHddPSY62fRL8W/MfYKtmu6Bj9h9Dv
CPxfltR/S32XJfm+YT03LPFrMuuH/xG/RuovkWcL/N1UrP02WZLnXirW/mss
yfc7+arp3wm24W+Bq/C/Tv1ccAf+09H/Rp638PvV7A/5z8IPhv8+PdZ5T6Zi
46dxozkP8DZzXmAXvoB8NdTnkucz9jeL9cTQjyTPMnOe4CpPre0qO/763zHB
FZ7q9uHa3pj4zYPviUm/ck9NSH5wH1wKvznkdX0BeL6nyn3YdTUqfhXg81FZ
z/vgE1HRz8SvCf4dTyXpsr3gN/FviEre8aY//sNSsc67jvX0uS+MdZ6H6bHW
d7qSvzYm+a645EN/Af128M8u6wH/QP1B8HfwH+F/EH4M57MH/mJU7T6T1ezU
4d8flfNe6cr689BXgVeQb04q1n7W/+BWMw9uMD867yJX5i+f+VzqyrxNZf4+
doPvk8YfujLPpdQvgK+k/gP4KHwp/h7zOht+HX4lbnAf6Hwz6N8AXwzeCJ+H
/kv41/D7Av8BrG+rpQ6XdNZkPk1I/32WmuXDw70JqT9mqc8zfcUj+BOWStIl
PYngvtP1D8Ht6O+jf2CpJKy5k5B+EVvqb+KfaUv9tYTky+b+HUjeyXaQX/aX
+zsvFet+Femx1i8PseyHHeyX7Af93gbvRZ/vBr9nmi8At1JfmB7r+kLy/BRi
vV/XWe8b5Onn92gE9SMcOY9n7N9oR/gIfJYj/QZQn+1IvkFm/xzxH2z2C5xB
/7ng4eBP8XvVzCN4PH7b0Web+aLfVPQ2+D30i8j7CXmXOtzPYAv/FdRX4++E
/pqvNucD9tDvxK82xJqvZT278NsQYp1vI/m+Qr+Z+n341dP/APoG+EvgOur/
YX2b8J8UF7weXBAX/3rqp8SlfhfrUfBfw79LfSP1xXHJf8icH/om+s9E3xxi
eb/gNxt9C/Vz0LfCl6FvM/MAfxk+Ny77cfO59d7D7zK4Oz02vzfpsN6Pf+nf
Dv8S74EL8CPN+5PzHGven+gnwp/h/HJ5LzyAL8RvOPtfDJ/P+spSsTm/dFi+
f/HgvSHvHfwT6O86wftG7k8zf+B6M8/mvYt+lRd8fzS/2gu+r7p+Df1noV9P
/RQzz+Z9ZeYXPA68A/9R6Hd6wX0j84n+ZfZzD/6vwB817znqz3vBfaTz3OE8
hjrB+1XzT7jf/jD7w33aRZ5b8N3or4R/fzz/98h/NOnbyg==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/U0jpv/QygKHJQW2XNcPNjgc/goU6CtwuL4YKHCz
wQEo+1WjA8r/CJWfVuBQCFS+mKvRASQds7jAgQukQKXRAWzewQIHkHSBeSNE
/weoftdGB02QgEwhxL7ARoh5foUQ+VCo+oZCiPl+UPM3F0LMc4fyb0PVW0LN
+wI1TxGqX6AI7j6w+WJQ/ieofziK4P4Dm/cbav7+Boh5dwoh/lkDVb8BKj+/
Ae4+sH0TofwAqHv7oOEjB5WfCjX/NTR85kD5h6Hhs7rBAT38ARfPvOE=
                    "]}, CurveClosed -> {1, 1}]}, {42, 42}], {{{
                 0.8822195050625886, 
                 0.4708383426263426}, {-0.4708383426263426, 
                 0.8822195050625886}}, Center}], {{{0.8, 0.}, {0., 0.8}}, 
                Center}]}, ImagePadding -> 0.2, 
             PlotRange -> {{242, 348}, {506, 612}}, PlotRangeClipping -> True,
              FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Text\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Output type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "11896", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Invertibility: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Impossible\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Missing values: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Forbidden\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  FeatureExtractorFunction[
   Association[
   "ExampleNumber" -> 2586, "Preprocessor" -> 
    MachineLearning`MLProcessor["ToMLDataset", 
      Association[
      "Input" -> Association["f1" -> Association["Type" -> "Text"]], "Output" -> 
       Association["f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
       "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
         Association["Processors" -> {
            MachineLearning`MLProcessor["List"], 
            MachineLearning`MLProcessor["WrapMLDataset", 
             Association[
             "FeatureTypes" -> {"Text"}, "FeatureKeys" -> {"f1"}, 
              "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
              "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
       "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
       "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
      Association[
      "Input" -> Association[
        "f1" -> Association["Type" -> "Text", "Weight" -> 1]], "Output" -> 
       Association[
        "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
       "Processors" -> {
         MachineLearning`MLProcessor["WordSegment", 
          Association[
          "Invertibility" -> "Perfect", "Missing" -> "Forbidden", "Input" -> 
           Association["f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
           "Tokens" -> {{
             " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", "(", 
              ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", "{", "}", "|",
               "\\", ">", "/", "~", "`", "#", "^"}, {
             ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", ":P", 
              ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
             "=", "<", ";", ":"}}, "Output" -> 
           Association[
            "f1" -> Association[
              "Type" -> "NominalSequence", "Weight" -> 1]]]], 
         MachineLearning`MLProcessor["NominalSequenceToTFIDFVector", 
          Association[
          "Invertibility" -> "Impossible", "Missing" -> "Forbidden", "Input" -> 
           Association[
            "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]], 
           "Index" -> MachineLearning`SortedHashAssociation[
             Association["KeyHashes" -> CompressedData["
1:eJxUnUnObUmOnHOgJWgDtQAJ3jdLKEAjLaEGAjTSoDTQ8sXP/L/GE1GozMjH
d0/jx52t0fhv//F//uf/+n///V//+s//8q9//et//O///L///l/jX/7bba2c
Vm6pvdxbWj0nBa2fsm89ddXbe/0J6r1z3TXHKvf0O1MwTlxkx8X2ir8yTwpG
qaPXtsaou971E5Q7dmn7jLv7jf+eFpwa99wjfrpaPNiwYK5Tzo3r9zb2nPmL
2c/u8/bZxzhxRQt676v1te6Y8WQnBe3WvsuOx4q/c7sft9RWdjzxjrfWA1sQ
N7nxlqfuXeIZyp+AFYllXLXuMfeuJQXrtBC0e2K94n+sFLRRxzyz111i1VPA
e8zWdl+7lNGbBaOXOW+ba8RfWuP3uPHjuG/rZdW4It/RgrjviBXevdV6RukW
zFv6vmuv+AIthBaMeOERn27FM5fmZa+nr1lGfKpWY41381PFUtxy541PH18k
PtdPsOMnaw+WZlwW2YJ4rVrLmKOMc6e/R6ydPknrvE7sibxUazOWPj5vvHe5
uSSbhYjPO+ORYydWL8ku/fA9+oxViaXbP8G6bcQ35N4hOddvvs5Yu83Ki/ME
NwW1n9537Tc+y8klWbONWPkVz9NZmbxHvyveYt92djndmzoEJc5N7K74Zb+n
pqDtxUIddnDIvBlWvMmOExaXPGv0bUHsgzNPPGgscClxjCzocZxnaWfdPdZn
dWeL28z4pK13HjwvFdthzBnbrccRPfkFx2mxS+eNo173HMO/GLGPYy/22J7z
rM+m5q12LHBsoDgEK3difNlTYk/Hzh6xSY6/4IhX7CUO2Yld3Nr1Fo19GO8V
qxhHZMbu9ur20As3/iOUxYjl8TmvsdfjFF+20Ir9lru97bnZDLvdycrkL2Kb
xI1ia4WeqbGFLOir8BZ88XiLmYI24ivEMQmFFcd/5aVanzU+yFqxE+LBvCSt
FhTiZGFCcS2/OSvC9ylx/OfYX8EOnRAPG4cn1rHNr6Cc2FA9jmmJk/4ToGV2
HM/Ze6iZeEYLYuPGydw3FneGIvMixqGN9zvxBLF94y71I4jvs9dE14Si85uj
9UJFx5Hj9Upu6lj30EUtLr86u+GmIHZA7OxQD6GQYxv9BKE5Y3uO2CexJUI9
9RRwXDea7Ix4k48gPnjcOj5J6PyT+yquH88YSxk/qr3lMSgj/j++dmGv3z5+
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
nT4EsPU4+n48692JNhAxVC2uCkxa0CP6JXbW/nKIuJM+PO7y0U9JHBfj7uKF
H7XRH+/b7VIdWYrOClx7uB5PouSKfNA6vL01HUK2zdR4jwpItd1fojVPTt0B
n6YhdVFXqdmdwAxNx/g7mUMFMp8i9ObOVsOUcOwEiqa7tu7z5y/oXN06YRTy
lhqMREV7Zq2i/Phcr1GB+ARdYRucs6/uAUGn5XJH1qBoNwJo5JGgYqz1TRom
/SU0udto0JS8v2Mq6CdArIZqX11N9pMFgCaBtPsLGDCs8QWLS249u4o7rnqx
jz16JCQgkcg9UrYfHZBJcUmjG2U578ARtD9t4znPvoPxrH2uqvNaWr4Z1Z91
CzEts68uLRFucQoJ4Jhx15r4SswTSgtHopclrb51CdLcIL6k5gRkBQZfg3zr
1R+1vzBHrwfv0DqrI65I5AL0OroEgH8Y4dJ5H7bePyJ4GF1H7yK07BfYg4mC
cd3fqWMFriv6aMMkY7/7SVTlYluScLia9k/g7cC0GtFp2Quy6SE0GDnfG3aX
ckucjVY072g4PhVrf0defaqvJ02mUb98gxK9M2rZ4/jXgec1M5aMdd7P6UKc
wTJSzaFOWWcF8WOQErfq2X24I/OlJdJDxBurOUCU0oQjo++wKytAm0XPPTKc
3YcLQ/oKLwyU7O4faLob72VJESGnL4DW/NpzDRljdc+1ddVRgRT5n/oOIi9A
LJH5g9atQDA45PWkeFu/UUNaZQl68X53f/li/VrD/osZVwcUALZBjtHdZ4id
BjSeohZwugJm+ReiEEL16E6qVcQwmFaJZKryXWMoQmEvkOYoSTCBQ+3+JKQ7
EMjSH4U8G70pdM6jb9SyZVCjCGdhV7UzDe/DOUUJ5fj9KLcufsK6bUV9g9+/
1FjpDJoCjg54/QC83fCS2JkRTgNff1LkKP6fHaAPSahEAbme/VEQCM9jssaV
efmQHGlNyzG4AOhS1w/kmLnjGZigJVfvgDobfwaotJS/BEwmNCxT/VXPMtCu
iECA69zFWA/XJfN2GsvXVcizGeOGReceIujs+gP3aE070fZ9lN4rjnea6s89
h1I+67KjAiq3l/NF5VVVBNnCksXOGrRg/Y4zynNXmopgfPUXRxJ6TWJNhb1/
IIMmQm1xg95KH25mqI/VDcH24znptqoVoqsojapmDeFLwl5QtYyB+qyYV1sF
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
y8Sbj3AP0LfDJmXq5UmxXL9y+KQfB5KOP74OW08DiMDSWF3Qe9b8khd+2k8t
BVqRdCvOlFjVcs93wLhDPq2nVtdNbzOjNLDsa6s/GRkEmryx6Xzq3N/N1wIl
Der0rSvhTQMMiZREhHCGo5dtUoLcQUeiwncgfpTH1Pnr49ZJ2SPWinv6rozj
BlgA1D+ne8rXR79zIMD2cFQWxk4diu6UyPv460/GmvI4UVqTLq7wtAYCHjD7
XVs0MBz94CtIad/KCo9QRU2wtwwIV1hPXanHPfCsAjgdAar5hCCGScwMZxD3
8N9I82x1zu4QCu07ZgONCySQkLapeoJVbJ3kCemVEV9mu3U04cwtf+D464Le
ujdfEoMjPlwzrBO7uSus7wyEjxUGIzMOuDML7LCD7X/Bal9rUXLb7jkAOIJZ
rjBsGrgJxEE0hBJWEzn9GW+XvcP5WP2PPvVYaDyawEQG4nQVdu0KG4uPLW7Y
qXJm2Djl8Zw3VmPPKprUf3DQVHDyuNdJjjgqseZJ03xl63TubSOkQLScRp1E
dURki5SRyeIKR2mGTroq6F2rvVJeYqlRa/yzdlck7I2Qpr4s4Pa6sTF5jV8I
jMO9Vs34zktRNlqNVzUznvAlsdC5/kXEa4Y9TSn1iFXjKvae5NyP92366azr
jvdEnNTpRd3rtUd3BinnR4T7tFp7T8Afkm/oR/zaGb6J3pu57uhWRz0doNyd
Sw4gIJzhCl9niLtyPhC+Ct9KlzOa+xttvgoj9US94iHqsq4kgoF6xqEjVQVD
I8XX4YMyDllZAWAmYVQt12vqzq+wLRSQBIxpr5ctTL6MlWOMUa/PQ3uHAi2t
mIgzrjBvr1OVri991J+U1McLTVI8RoWJbYRb+wG53nXdYBJSb32vY6z8exqZ
QIWNM3jE5y9stnVE1Pxb6zdxVoB5jRG59lohhOFuyY27h/Uia7knZzUYDcBu
hV+TtiPjX24MK0xbDjbmA2o8nzo6deIV+ROYxK/D8Opvhqvq+hnWO+CiYISC
7XJXWHJ7RJyVlepX4dnajBI/x74K60M7h87r8VY4pp4nbbAgctaztAlgpGj4
nT0bhUvypQFnoMks+PET8QIr7eevFIbZrs31AHxnD0l2hdn2ST8HcNfdv/KN
iwHaWOTa1ov8xcwLSJ1Jxl5XYt4BnIY1+Gl8rTBlKMDoLUzshal9iOB9I+nI
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
DFaXD9+8+pwgMPK/mG9+W/cVQZl0e7ULyYcUrtW3CXiu450m8tvxDHnnuJqK
WMXP6WXFOjCt+Ipf+kEsLc4Maeq+zUkg5St8ydIdEmfnQmf+RIm4+noU+9nQ
CCv0PhUXVYQbXFZLx/5PnCErXMD2N++mJwDcRFbA9K76BmqjQdn0JH6lsKn4
Ee5KRorZoyt+Boq0R0NilD+LbYiqvh9qXvz0/QcXVflafcCY6j4wIYu5R5LE
++vrgQeKyYYTPrXvM46/+TRTPWJtVNdJrGeKramZt5oLwE4AR2jUg6X8xTWw
znjMbH++MLHf4Wr27BmCl37RocnInzHi7ua0dZ13KBhvfLd+a9pfnBktcVpz
KmOkimvkxNyao1LPy+xkmc5KCQio1e8CmjRnP+Kw9PX1/H7P72vhLmqgVbri
R9JzuQClHOzwreOShAj9x7W5rif6Fww5gmo7+rvwB/dgtjz97gPwkw4dWTRy
wCsO/Rr6jmLi6H6aGj9aCb4Ni9bbcS5MVPYiEVr7FJVNvbxnj5/b0ddJ9g/6
FomJ6s/VcRsGRQf/+fk7PoaI2ntKw8YrTvtCsnyx4Sn/JvEvlpfhOrzdJ8xU
26gUDxSsp85D3/KIRSnhkr2/R7a8HyLFGaXmXg/1671EPg09rnoPralnWmCZ
R1VeKm0I+ZsgKiTCvP9nbBYB57/YrY2/+NSXH5Jka9NT8d93wdkbyY+M9VVx
zgtuvR3y94vrPIDYkka1NITW2/GY58rLQEVWfRd4OC8fEH3a6Wed3xAUGdmY
lKlzx6nAvADXhPEL73puS4dI2kGA4qnzI7xGlAZJB5q44poSDiUE+tV95pb3
pqM1kjwXfhvF5/eumcSOsBqf+rtnpGZGIDpX+6Rk7X/jqQ5a3DzEMNgxenOV
v2zurusxGw+xAX323vp6zuixap3HIvKo3+UtfAl3udvH3n8XK2NPpzaNuLOu
U1cmlAkvUuvMpCcMpqWTxAnvrOcYkNOVatlKP/7i/l4UouKnVtd53WaQI/Mp
MJS6Ti17rl1xrvrKJzfkmi+KTVbVq/j75xYNoS1NrLg07hXfp8YboxNChH28
RGmSFt945lYczQGoxprbPDUus9uXGk7qe1edFffZbfa6SIO839HxMXLjrHtX
+b2Kf7E4RFEhvFj3x0v4KbktfFqvFX/jRH2STsAbqPt2ExCBW9u8EN/R1/PJ
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
2yAQWbOwoeu4TMTKSrNh9XsKKDToeHpmEoWOB4jpnbPv9fdywGzRb7flF289
9Ktp2jLjXNT4nBWVfCp285UtqM/rk6Bckay3rq8v/nvhkr7jF1benrg21BaU
1V1z/xWxIzpLPEPO0ou77I/yVBWxsVOvB6kqWjZcZyznOv5KW0bHZivddUx/
AiLp2EPof9fnbBiHWM2n7usmB9NYB7EGOqznCYoXIOnYw+Hpz5sObqFHx5O3
rh8NYS8lKYbR+z+xWeMMMq8aOLWfQz6jBeiwWsNXx+nPZCEaLozatx/tcHjv
HZ9lNO49nphT21Sae5X+AHnd9DKc7Stik39x3SA+zWCXsBodJ70Noa25fpbv
QMRJt4DZQxjvfQA1wUsHDKyJX/uqu+b4JFt94spa8QxECewRx+t6XxOHvG3A
O6S05hef3JZTfvzSi3oOJEjSRTL3/vr/tjbbYYxcqe3W59F/8alzKN+Nk3+M
BSh5z5BHiu95hf8bwozscSu9CK3S3SWUQXojVR+ZmNjOY1L/tB41XMgBea1O
xQ3o5wObo5J9xRae44uH2uegcnOr42C3ET2jrFH80IBCw8Sk6EOopf/uFemT
oEAZ39b9x64CjgS9cOt5UFr1rhWdcLtuxWcAvpRk4NV7/TBxHK+/yYuvrLhZ
BmWq1zCx8nCaJTbI00/LPLXuM5p42M2htmx9/1DarMG0iTlBbRX/7V2smgiG
RyG74oRZlcC2xbP5PhhxvwcwkzWqSfr65qe6SHwwvjnyk0SY40Ng3M0LYGZp
ShzJ5Ru78S+u0YkeS4LqeUoHlXz14eXSkSZxP7846EwIfppqlRc9RKPOyPQ+
9Ehq/+HvNYPdM+hdzS94134cOTy9xoXSeNDOB8uwditPe123yedIK47SbbjI
4UbPlm0mHmf9XW3ngxc1Hd+n6/0ndgwkK98GRc3ZbZO4iUdMS9bZ74uSKYyc
7W301PMkEh6tcRh5u2LHkZQ1Z3yF/ez7nDxbPD3anat/R1IgmQQeI7Ks9X2j
TGJHpBL4z+++0l6lWQzk873X6wWmpNSN+GjFHRmI6VQefg+i7j/6e1oBNAJX
49LJVxBRJ30Tpae6/xVd7N+zu15M197xI0cAiMz14YpVR2roJxYG4GIdl3ZS
HZXtHNt3/ZhTv2/3/N6v32XjpApuDiU+Og5cRBtGatNzbanKk4NrI8n2rf+4
FJCW8KO0fgtPmD1SXOCEZuSz42RzSI1rnX77rb1/jwwVqYfyPSHnFYHkLVbd
T+mMxUs9MrMRge55rtdNRaK/eJHJ+eIKIFJaK7prf3kvigvDZ/5mqfb/nlvk
5E0G6bvscezpuLYApsAIhPmp+EssM3O97va9HTGDIaUUBupTeuMwyFGfBOsH
+zr6+nC5MkMuBe3fxK0uyJQkBr81+ZfvDcJ+hvak7kzm/3ApuWYsAWCLiVPW
9Y93egzES7Gmn4958JH2G8hHnctjew3JDCzP6P2PjhP2XVjVM53RitM1ldkt
XaHS8xRHB4+YGIT4XtfR/fFWpkWP4lnxMwobcT7EKK3rEMlZe6aA1L7m3nFE
ST4bsNnlj4DFIgu74yesSbm+uE5hNObOMfv3jd675h6RKGymiq8cLUarxghn
f16z+4j1DiRp/y6Y8Vkgh1na8dTvEqRwBKZ5sc3+vmAb3jr213fryLEfgncy
/dzj3353HPg1u39IpF8cWQh9kUD56vUgUzNORZ5b99PrykkSH1s8sqvwDyPq
dfwO9y0GG6PWiZJXCfO71yM2HhU/4gHAJUQG3ettvNLxV2iRz9a/C+68N4AY
viqgvu9AgUcFuSPJ9f3doe1n0MKD5tj676JDUqiIAN347n+lSIwbOtOA+h3B
q87YI6xYi9TffQ1XKTyP8PTruRGo1c984gFTOmPi0F1m9sYPNccRj5mjA/66
W7d2RBZI4wz6i7xWPQeU6SOqqVrchRca8Yy28afonMX3GfxIjohSI5ldxYtM
PHMIueBovaCXMA1B+vslEcDu+r52wydjyNAY+n4yA9oiDWRGftb9w3Ae0U6V
xZb/ozhqFo4Ev8T1fT4/8NDWRe856/nIlUJeUJr0ORi2P4mtnZjc3nqkKgcW
fiPA9OOpPp74yAzVS+y8qvs3W0GZCAbt9199PxGFvrKgIWH7+rawxI0jtr98
Y+yRHbLlxr2v97E9Ji8rkPeB2j4qDhN3UzTdIxv/xZ/5KoZFR/yLwwCzfMDZ
pq3Q8bi5Qy8M7P+r45wJvUVy7j6/JMeBMad9NUu3UDydWA2WI3DnivuiZ8Dv
GjdPf346xL0VjBzKLxicKo4uMmepXO17e9Dkm/TLfPPu+4G/OsNmdDLUfMcI
ZRgx2u3J+dV6i9+5vY3nDWZtx43koMxhTe7yJcnDRatMcyuVbcdBXrSWvODb
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
Fn2dJ1UFKpleVq03fN70LAAQ42pe8StZGEYMb53VnyeD86rb562p75u08SHX
/ssrju/5ny+3G7mNXmKdI7I60O77yjHV81DyQU+sly3Us3kHnvglHwjcUpum
44qHuAbrdvZzjpo/7Asyx/U9twtOMmp+oKbfc4jNDvdl3ShCLR2/0uyMCBjF
94qzZRhZOWbhdU4R27oy0qNfd5ZOS9Ba+5MxSUDEtY/xbOE64n40+s6+Togg
ELsYy6V7o9lnC6UL5WTqfm+amPzrh6NAw/EvjsUb/S5mRnfxi3/x9dIF0Abk
0vU8Sd5cAZpBcIz7iweVBpQIvdHx0NciCEq2Ye/vhddNxttu4M9uHT9gCMjD
eX6VJ6NOZSB/4lKDk1b8jKm0dwnQvX/fKMWS4Pjt/evDkWrqcp7fojP8lD7e
H8rEOvajnD3fzwjNXE2VyhK2ntt6p1MRUv6lFfOLT4YSM+XR0/UOuBxVsMhi
0h6q57PSZZZeqeN6XyVD/fuBT2IJYDvVf3MaGNiS2diDCP7iKcB+K4+uZ39f
cDhpSJKX59uvANDOGKSRguv+p1fuiaij9P/sev+J1OCddidOQZ2/sX00oVKb
EgAZHdd8GFIv5elfPqbZfv7X1J0lNwgDQQC9EptAuv/F4td4xvlLdblsEETL
TC+vdCLk0+eHswtKII3OX/mBmJ5jJ6+WrJr0vX5Cm6RyZq7h59Cf14Tjy8Du
blZfQCtOr4l9mGpY5eHGIWUm3cSc/nlHG7dWyEmUmSpLrPD5+vBgv4x/1+M0
cLyhc7H//n2edc6K63K6+oVHkaxkTx1XPBauSXzdlbpkRFYe4opVVmqiAsue
2ucER/aJE97sXE69ZjvxeApsUWIXnnk8Tl+fJ13+V8ElytqbXlGZF04F/sS2
Vq1v6+u5YxRlW+3L9tk41U42srnFxr1lrGbG27Tp3034QoQNedhP4zYo10wo
ihrEF2eZ9BlK3fYksdR4gmwzo8Y5y18IHvaS7oy156zvPzln8oqwxtxVH145
zFocHL1Ud+v9PNM6wmzacvwtnF2qLvhzxcFk1vtwJULurU7K1+vPP3ElR8Tn
OnfV9dtOOpPrWcqD3Rp/if8YzOdT87B+/BVCZVIxRvFd4W6GRpe+pHhczNdY
+Qir5ZVX/b6VONH9EtKnffd7b4X10kQJwcnho3AywZU8hJhq13hq1CXLAodp
lH8LPNEv6QpobzfuHby4B6utnD0OZGuCwJ1tjqf6CGFjCLKwnySY2ut+5U9J
0rmzJRv9fr6SA3VTXKjZ/9ff6VfWCP7zrHHGlDheDbl576pxluOFUY66v7du
Cx5vtYWGo8O9/3BuGopGOOf9XFIItlsTujv3ngfMSJy69vM1hOrPH/4LUeNy
tu15xrpmk8msO3uJwkdOAyoDd7L2vnh6uRiXJpX2Jzdjh1w0I52bs8fNfvGm
qtpSsHjOxh8RLJEqH2r4hYfi5iyC5Vx9itCqXRAKBF3MthpnYOCzundXz1fU
BRT9Z/J7n76eFTeXFes/ZMN6Xgw45vZtA5vpC5ckn/Cuzxq5qr+ffC+qoJcF
N8v3W88hXStxLp/rvGv+2bck1SiTIWSUvg++snOLtmFU/0LIiFu67mg7et+7
3iAy5N+Rql295zgAd0zFP68UtVf9rh9TaXTgRQk4Cqcq3OI2w1tv1feYhXfW
0oHLhwcLFsFnT+DEPYpfpwBsaJ7X0eGp+qTdRoyLbnqNvXl0K5Ey5EpIgMyK
vuOPhOY8GDIRbV6ND51RTgvzSEbyanweme9UsZ/S6SD2U2OcCTRJvHHh5LmJ
yR3iz/s6j4jBjmgBkVifxu0FXe7nJLMXLwK+4uR0j9fbp39XAS/FwuOf/63g
1GSQI51Fmlaft3oLBctu46m+D6+SIec+3uqYqnvjuDAHicqZcMvC+QFqR/Ml
WLWfjEOQNBScjkuztL5fko6FlOo/jcjCNSCJ+G2ij+rTrSiLz6ztVoh91vsw
VDvoyV+aZl+PxVoReCb+tPjq/hrfgYgav98HpWVixFe9VXmjSkXpmIUqEQ3z
D2eZHksxx9z+fkWGM+zlEcn2Fw9fSiHPrujf88pWwyKLmHKVPk4y1+20EI8k
lgU1DuowlhwMDPLIHx4Dsji0sZqs61fDEy8bE4yteGIYDyrt4hX9WT7Y9hS2
FiNcLYZ9R+OZERPIet6/cUAMJ4tWTshxsXBbYfS9Ky52e92XQb8TknVFK1K/
ywlDofDlRa8eN0oX14OW4unUfanBX4mrVY8p3S4utg7jTFNYGXv74Y/evhUs
VJ/CqV8otPCmj9nzj61bfKDI5mX7Fo5il2SAbSaAo/As00oukUj2/x3q4mnD
TuS1yvdD5o5+Z+QBiayv+1VoMPuPOK0Xr1sgcoTBYd0o3Y/GRzoUuAZ8aBpP
CAtrrLQlehwcF5xWDnY7597PceFdp2vDzLvyStihSfjCRdVSH4XzdKHWTUVW
DPUoXLikppk+nfCMwr04D/tYqrDKaVohemzCNDTXbNoKf/U1Fkoyvnr/D3a4
O2chPLS98l8QSDig5qzvkP3DVT/pNcKKrn4WRaoGQvaU58/PH6s6losO9974
0XgKVVwztI6vvi8cG3PMQQ36lF8BnLTnidoh0Z+Np1XqdBpa3/kHsKfN3A==

               "], "Values" -> None, "DefaultValue" -> -1, "HashFunction" -> 
              Function[{
                MachineLearning`file152SortedHashAssociation`PackagePrivate`\
keys$}, 
                Switch[
                MachineLearning`file152SortedHashAssociation`PackagePrivate`\
keys$, {
                  BlankSequence[String]}, 
                 Data`StringHash[
                 MachineLearning`file152SortedHashAssociation`PackagePrivate`\
keys$, "Murmur3-64"], 
                 PatternTest[
                  Blank[], 
                  MachineLearning`PackageScope`PackedArrayQ[#, Integer, 1]& ],
                  MachineLearning`file152SortedHashAssociation`PackagePrivate`\
keys$, 
                 PatternTest[
                  Blank[], 
                  MachineLearning`PackageScope`PackedArrayQ[#, Integer, 2]& ], 
                 
                 Block[{MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q}, 
                  MachineLearning`file152SortedHashAssociation`PackagePrivate`\
q = {
                    Quotient[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                  MachineLearning`file152SortedHashAssociation`PackagePrivate`\
q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                  MachineLearning`file152SortedHashAssociation`PackagePrivate`\
q = Transpose[
                    Flatten[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                 Blank[List], 
                 Map[Switch[#, 
                   Blank[String], 
                   Data`StringHash[#, "Murmur3-64"], 
                   PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                   
                   Block[{MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file152SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                   Blank[], 
                   Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                  MachineLearning`file152SortedHashAssociation`PackagePrivate`\
keys$]]], "Version" -> {12., 0}]], 
           "InverseDocumentFrequency" -> CompressedData["
1:eJytXXn4lmParmmRtt/WvlgylMJQWbOVaVEhjI8hqQxFKl8ZhinblI9hpolo
8SVfjEKWsg/VLyEhEZoIqUTUZJuSSN8/7/n8juO8j/M4r+dt/nqO93mf537u
+7qvfbv3HTzyjIuqV6tW7Q+HVKt2UJfhFXe91KbynX//6YsjFraq/Mvksevn
Dtq38vVpTV9qdvs+lfh/wrh9vvjzX5pn/+OK/z/8vOWQu3funf3mq3rvsH0q
xl39aJPKehVrZrdsvnc2zk0Tbx52wGlNknHuuffYPd45snVyH/Pl8fm7GJ/X
h/9fXHPKHydUtrbzxu+Bvz1/Vt1RLbJxe63oVHffJ1tUnr3ltHaXDNgreQ/f
xTp4Xgp+fJ33QYs+//imZQJ/wBH38VvNA/f5PYw3vdm8OqUNmmTP77pn5oeT
zmteOXzqvJk/1W6czH/V1sNm/fhmYzk+rxPwYvxzeHTQyYuWf/t9YwsnXte4
KSNaLtnRovLOR+6/ZcQPzSsH/u83bYf/3Cyb77LXd/U688xWlWv6Vhz8ytF6
fDyH+YA+lm3sXP268eXZc4BH81mXv3rvlJbJOJgH3weced2AF+8jfq++YOLQ
VSuayXnXvfU3D52zpWkYvzH+w59M/MXLb1S9d/cRH3Xf1qlFss9H9O1/64EX
N5H7CPrCexNmPNXx0DGNsv9BT7wuxh98Z9x72xf3+qmJpF/FJ3h8XjevA88z
/Hgc4DGvN0rXTH+OLwBe6vvuivXgO+BbmDfWj/1melfzU/j0q8e7lj3Uo2X2
HuMV+Mr5X+3ccPAIjadq/5iPKPzGcxiH1wF8U/QJOEX5NvN7h595/+f73wwd
PHft9c0SOnVylOUj1qnmo/Ab/FHRG/ONm47o1abxnIrsPvNtrCORvwX+jeed
HDmt2lstnxxbpVcAH6P0kvHhq76rLClrlvF9R3943tHJur497pi6slFCfw5v
GK5RvqPGZb1h+Mi7Rj22tgpurH9E+Z/SW9R8gH8vl355+/K15eH5J/R68csH
PtCpqX3Ojcv839Hh4E0dSpZPqkjg8dXUkXMW3tZU6qG4go7cfvY4fcLzP3du
lugZGB/3mc/j/5v6bfz41pn1rJ6I/cU422uO7TDo3gqJpyyfFFwXPLa+fb0H
myXyhfFJ0auT54yfavwoPij5h3194pOLG4/uVWr5OfYX61J8GXodxrvoqr2X
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
ZsIX317UouPmEkt/6vuMZ1F8VfNScS6lZ0bzEN26FP9lPYjzCXhcXg/7AdQ+
IJ9GwuemPn+44ocyuT7AB9/DcxiX7Ta2r11fBuYX0fzS6Sv7db5hQrXsN9eZ
Res/o/wlStdKbjIeRvV50Ln6TtRPxfeRp6TisCreo/CE8ZT5GvxqSh90+R//
af+1gjfLLTe+5K/BPhb83Q0vtZ++umGjzK5W8XOOJ/F8GP9Yn3T1JPgNPV/5
e0A37Zqffd2IT0qTeWC8qc2fuqjBtWlevbpyPa7KI0G9JPzcSs/i9WF/UX+M
+8yvXdwXeK3gynwI4zC9IP+I+yY4PsP6wpIxD35waf+SZB8cvKE/uuc5XyaD
cyGfG/jCdjnWzXnP0XkqfGe4ML9UeD33jL/1/f6VKrmI+dq4579+6vDyXjUy
/HHywuVTRPmJus/1ptHx8BznH3I9Eb+n+EDePBWlf7P84PpInpfyr7GcUvsE
/oX3jjx89PSn/5zma3HfEtWPx/E38Hc8x3WUrCfsrpxbevWJxx326p4JPUb9
CGzXq+9iPOTP8fw5L7rYddm+OZQ3ovysql4WV6WnZPJX+ClcHzO+D7+T8/eq
OkMXT3LyQ8GR16H6tPBvpd+qq+r/4eQB9gHy1dmVCi5K/33jpN/3/ls7X+8P
ee34X/vz3ixpPC21h5U+jfWD33GfiAaLN67+4PTyjH9xXpmLYyu84rxQBS/u
M+Lol+1Cx3dgXzL/ce85PFd1AgqfgWcdJix4YN/xZVkfEMivTN6Qfw37xn5n
lf+n5JqCl8qnVOtS9jbLQUW/TN/v9bzx4ybraidxICdHVB2xwwuVl6PkZV5/
HP9WeiB/J5p/DL2C4aL80VG5qPxcGEf1I1H2lJM77O/kOJDad5bLTF88D+U3
k/7Gwjg8H+yjynd3V4ZbtC8N4MN1mu47is85PxrblU4edR02Y2HzLg1k/our
D+DnFL1wHI7hwHqGi+8Ue82bP4E8UsZj2OlROQO9yfnH1H67elHWRxkf+D3W
a1kuR/X9vFe3zh7DFl/a/Y2yyo9/evSEsy4sS+if8+KUXMPzU3pPOfq6JmUy
r4z9LG69rI+puIyLEyt54vAT+ZOqngu/OR5ZLD0A/pg349OnDToN/XBURcKX
lF/b4TuuC5/u+NjK/hUJHo6ft2P73Aa1pHzkvCm2z5kv8j7xPp7/yOebqp2T
1vs7/YrxIFovljee5fpx4f6gQ8vqDd8jtTsy+Th11ea9WjRI5DPgxPKT/1d8
Q8mpyV3vnf/EvD2l3pWX3zh6ZXkCeXTjkmOW7+i9R4KXvF+o08Vv1z86mpeP
K/zWLK/ZHoA/HPpEzdXP3vTc+zUtvrD/WfnFonrnd6s6/XLuxorcepSyI53d
wO9H+6o4/cfFu52fqdi6PPW/q1NjvHD5jcqfCT867Fgnn5Q/i+ldwQtyROEL
6434nso75v2Hvs/rwfPID1X7gLo8Z484fIBeqOJnTk+M0uPu5oVG/SkHtNmy
4fi1DWT/B14P4wnnBeT14+B57qPKzyPekzfPJa9/m+Hn9sGtF/qK46OufwDo
G/vEfIn7FEf1C/Wcy6vg78NPFrVLAS+OywBO9U84b2Svc8sTf7SzY/k7sp+3
8FPiedf3VtGvgi/gqfwK/J7SJ1UfxajfQ+lzah5XVP/dlG3LUv2Y+XrU3+7w
DuMxPnH8Euvd1nbutQePKU3GYz+twkfWY4utw1HfceMm8XVz3kuUfzj8tXYo
yWvwZxc3j8pTrK9Fz66nfdq7TthvAn+Nyi9w8GH9v9j9VnBQ/dujdW+wz2Ys
2v+kFqPqZXoL3sd5KWpeSp/6avuV9505t67lG45OeT+j9XTRPkPQI6FnKXjl
7SPv5oUr9g90Cbhcvrbz7KWt6iR6sKpv4npW/p/ziZw8wHOHtut1T8f9ND/O
u24lV10fasYb5cffPPa59d0W71rIdXiKX7I9rOyOu+969PbuHav6MMFejvaZ
dPkvDB81L1eHwPvJ/E35O5nO1fjo36O+p/DLxYPh/1BwjNYzKP7h8hJVfE75
m1QdtYtXOP6m4o1545p85XpGpQ/g6ujRxfOU/7JYfsHymeuX8soBHkfVw+P/
xf0+eqPDl2XZ+WNs10X7jSo9Pgpn/Oa8J2Vvjv5wzY4Rn9Uvmm8jP8HNC1fU
Hc76145ZfarVC8ejHJ44/Ff8Rz2nzlNUdjj36eYr5x3m9UND/wD9c/8Z2K0O
3109hJP3efM9Hd8FHYE+2H8DvgF5/vD+hw89a3TdLF7DfJHj0aqfE1+dncr6
ed64iOpDr/IYnBzg51UfhShfZXtq0sdPVTtyS41w/Brw5n3Jiw+7ez8Kt7z5
oHnpYUC9Fg/dtLUkt78eV5VPHqVrty5n9yk4wY8RrXPifqsOvmrdyn8TlQfo
m6/ya9U+Rf0Aah5sV7k6XaUnuTydjI9RvQKP685ddnJC+d8VX3Tx+WjestID
nD9b1aEp+Lm8F77u9/T/DavzfF07rtLT2W/E+8/npzr8Z38S5A77K7Gukl6v
Nt5Rv2HyvqsfQf0A66+oi2J4tz30xOFrny+X9lb0HMdnHz/5pav/Vj2x7wFH
ZUfifa5LVfui4k+sj7g4i5NHru9AlO9H/csc53T5Ii7ey/mPeek4r1xUfgv+
Dtbp+n2rK9u9zk4EHXAdnJNfwHveL/SHVefPKjuX7QFe74Cxd417sn9ZEidR
fSHUPnHcO5o3wfBw5zuxPwr3XT4Czwf8Kq9ezPnKdeo+ft4RI319LcfX1Hez
89AKcYTGvWud3a5mVfyI7Rem2//uu3HOjqPSvFWF5+DPXFemzid0+xLVY5iv
Mt9T51EwPHkcpgPgNfYt73lurNcwPDlPx8WfkD+FcZH/ifXjquQhz0vl3fI8
GF4qTu3wGH6LaY+e0bPTntquY/7v/Jyor4z6HfLKCb4iH4HnlTcOoq7RfmBR
ucb4x/UVPD+O5yX7W+i3Ed13/j7zcfijuP8nj+/qZ3gd7lwcHoefx3joZ+3y
XN2V4frxCZd80/XrtD+j0uuZbt17rB9xvzHcx7zQP0/N39nzCt8UHrjxFR4w
33F0yPNU+qU6hw76gcuziJ4fy/KO+9xG5aZaHz+P/F/nF8dv6J+ltRa//vQZ
VXF19gdgPfCzHNG3/60HXtwkgZuaN+sN6IeM+mtF1wo/pJ/J9Htx/FbBbe3A
Ew6Yvq4qXrFo0in7nzq5PDnPj+nfrSMqr5zfzckF9TzbwwpvHV7+qt0z5Z+3
TPN0mJ8pfGQ9SeVxRPvi874XK1+5brhY+5PxwuUXYl/UPjJ/5bwblq98Bd7y
+lycK5r37fDw4k7f/H3OPg3CejX/D34T7bPm+udF6c7lZ/4wbuCDH969YyHu
c5801S8b+A964fwPfJfPHcH5ONH8APRpcv0HovEb9dvxK5d/ofKzeF3Q19R5
h8zPVJ5YVM/k9bq63yh+R/0L0bgFrtyvO4r37F9hOPC507yfvH84j1zxcVWf
zXqwistyXha/r/QHHof1RaU/OnzN+sflhDuf45ZX3ig7iv8H/+T8HeZHjs5V
/69ofrjCL/4/b56WqweM7qfDH9Z7ke8GuKu+hEoeJfa56SOm4nbR9Tm9PfuO
yftlPpjoYQW/Tatf/3VG6wNTuxR0rfySbJfN6zJrwLhN5Yk+BfkJ/1mx8iwv
vig7lOvvWX47fHf6GMNH0Z/CN3c+EPCZ8d/Z/S6/kNeJ3+gT5MZ1eVO/f+7D
v1c7o4qv4dxvlvvMv1w8mOUc8Fbpofu9f2evDu1/zPRB/p7qe6TwyeXB8v/A
C9An5/mqPmPF8pXEz13oA6D06Kg+E9WLUGeA+9xfAPEnxE1UH2P4x9Q8+T3E
bbP+EH9t/rvrj/DnqEbjJCo+vbtyjefB31F1om5dio7A/5wdhbgS5rv37L1u
umh26l8Y83DvQ27rVhU3BZ9jfgi9Stk96OcRzQdx8sLpNZwfnNnvVEfI/I/1
Dq77UPvB+AJ4cr2z05udfOT3OZ8d+8n9yJgf4lwa5k+cJxK9Kj8U+hlw/w2W
n6hPiOrlji4xH8Dlh/s/qbP0pbqyDifTk0TcQn0HeQxsh+A91YdY7afCf5Vv
ALipfAH4hbluKQpf4K/z84Fe1Dydfqv62PD5I4r+FR0xXbv95Hmw/9w9n9c+
iPI/fs6d92D9LYV+5Kxnct98Hs/5h1mPcnWIGPehQza98+QY3+eL58X5CaDH
6D44P1lUHim5nFfPzMvnFD65cbCP7nw6t25Fd8oO43GVncN2XRQOSk6rfKUo
3Sg+Arhvml1v5pEfN0z6NyNeqOaPcXkfkA+p6keYzzs+hLwb3Of4P/R4lW/G
+4F6KvwGnfP4efGZ563OZVV1lqoek+sfYackeQ7BuhT+rqr/mzW2z3EVJ6d1
WKi3yvwtBXoE3H+1vMc7KzbXD8fFFLzhx1H8gvP1+H++KrvI/d488rsh585O
41H4vuo7mMFr3/dHd3m56lyGjTM+u/C1Ial/nNfJeaZcZwA7nOOFGJf1dthN
if9N8BXoW04uYf7Rc+Ycnqq4Cfcvc9856bhl6zuN21Pui8sjgj6BfASss1fv
B+sNuMXXI/G+urwmd93wyc0DN64rkXoqj4vvuf7f7hxJpkNFR4qPF9v/n+0C
xu8eS2vO71K3TK5L4TnDCXbGJRWTbu3zdY0w32f9DX5F9jNxn02XL8nnxah9
dfDDfdjLCk4qnwLfVX5IPo+d+ZXbDzXvate/O/yYztUT/s11XM7fCbhDXil9
FvzG9XfL9IeCfe7i0Ioeovk8rF9Gz8nj7zv9WMXFlb6H3/9Xq/OynaNTvpCX
rwFuiIchb4Hny/2H3bguPqj6zqu6Wlw771p1x9apZYnetmxj5+rXjS+X+aY8
XjQPUu2r8sdD31X14bzv8Hc7fMZ8L/x3rYfeurF+9h7sBiUPVF8F1gP+VPpp
q5pvVSTPReHi8C7qt3Dj5D2nWd135/Sxv0LVh2G+5y5d1bL+nLROCFfExZI4
cpHy2dURsd0Z5QuObqGXMn6qOAjTRfR8Y/QXA99lOzzKh1hP4Lyrif/Tr6LF
76rL+hOGC9d34j7zTcVnnP7gvh/dP/abwq/izt9lPy+uef1jjs453pCXnzi5
zfYz680qngP4QG9RdoSaB/MN5Sdz/SVd/BHvb/isx8BOp9Sz7+E+zg3D/ej5
lI6/wj4GvV4/tObr3dbreFCx8sLZjUqPVvFk3jfAdb8at/e/+oa6Cd5E5+/6
+7C/i/PwXZ1DlC5UHgnzMfi1XB4H5qv4nTr/kdfNeM/8CHgEOn1v+j4rWrWq
lr0H+YD3ue7ByVWV/8V6NOtJnM9Y45yl306e1dh+151bpfgA4xHGUXVCPH60
r4ejQ+bb/B3QO/MT+L2wLnVeBn+X8wQVfbH/0+FVVO9kfoG8Wgcv1b/a8QV1
Vf6K1f+sfWnj2al/GFeWq3nzNCft3+LWh98s1/p2IQ6o9IUofofPgRfzyJtv
w3YR18coP4XCF5xfws+7fj9sp3JfUMVPWL9TdozLb4n2S0WedTZeoe5U1Scp
PurgqfbH4RHnH/L3+b7qT4D1nDL64Dldt1ZkfBN5LZwvk1cPxPdUfo3j31F/
SvNfHTboy7HbFzo4OP2F/+dzt3k8Po82SoeKTsA3Vb1/FH8Htt/a+uFj9bkN
zGcVvbC+pPiOqu91/nqXTwD8zCvPVd4p58ewvyBvn3Dsx8G/fanBy20rErxz
/UUcnUf7meA3n5Oo4ML9QKL4G/U/qH7BuELPRr0U75OLM6nv8vvJOVWijph/
Kz2Z4cXnx7q4l+sbFJXnKr8a1y6vf3Ta8tPT/q2ufl/168AV/gE8p/LdGH95
nq7PPL533dXH7zP2tgbJPFh/Qj0H80cVh1FyxMmD6LlI6ntsV73z9qIWHTdr
/ynzmSj/4/my/0Dx3ai9j/ucx6n6JMJf7/wjjh5U/VjePCWs+5m3y8qmz/N9
h9h+q1vjtYfvXFwq4xUKTtBzQT8qTlEsfCb8dOeXSwan68E82R7n74PvsV8k
458Ut8X3d+4sK5nRJt135YdReoHDN3x/7hl/6/v9K40kH8F4oH+HDzxPp28y
XJAn7eQ52/WcL+/iT4o+XZ8J9b86j5nHj8bRcd/V3+HqzlNx88C1yZ6z+pUc
UtfSj+pHBL2A/wd+If9Gje/sNvzmuGe2f7+/rPLFrg2q5ERBf4+e+x7VyzCe
0gMQN0J9tOpXGuVPqp+qwm/WX/Pmiyu9EfuMek/oiaq/fLFylu1VVW+d/U/5
dR3eubN9+bK0jz3GUfnkKn8N8sbl82B8dc4N9Fw3zjef/HPeXv9VJvdP4QfD
n/1rDF/4V/OeV5RdW//7tjojqvwFis9G8YHz8/Ae1/Hwle1aHmd1i7u/vKpz
ae75oK+Gog+VB83rZ3mjzo1T9jR/H3pFXjoDv4I/Jvoef4f7Q/L6uA8NP+fq
01FnmdFlIc+b86JcnxjV5yHq72S65f+b7j/8jJXzG9r1MP6y/gK5effXbf/Q
+o3q8ty66H6jPlfZ77xu/g6vR+mbPI7ScxXc2S+DcaAH1rq337TfDiuvbP79
uiP7LCnJnovGgbgeDetgvwr4H+iDn3fw5r6eWZ+AAh93cQbXd9mdS+XoFfwE
6+a+RHnjwg4feTwlb1U8h/fPxe3dfBjvmL9G42pR/Y3j8eoKf0te+nZwzHtl
Oab0mui5IjwfxBtLb/vF0NY/l9p1JnGjwn22j11dYMKHSQ+Afs7rcPloqn+G
3W+RP+X8vK4f1e7ij6qvd/wuL3/gvG1+3p1vwPCOrlfF56PwU/N2fs0ofkbt
O9APf+fKD+77pt/WcmknsL6pnsO4sF+jfCWaF6H4rdJTovZuVA4oesrOxyjY
kY6u4Z91cpjPfYjGbZnvOr7N6+C6IAcndc4W219RPxf/5j5wuyvHoCeo8/LU
eBwv3lX53ZRdlzdIxufz/Nw8VXwcfhHgO+wI/FbnlETxQ+0/8nWR18b7oPIa
VJ2hurp+TeyXVXZFsfQMuaXkBvAE+YbReI3qe6v87c4PgPx11q9qftC93ryz
0z4PUbkUtdNUHFLp1QofUc+M/1kPUPkFvC+o42Z7yfEFxx9cngrXgyr5w/0j
WB5wXLtYu0S9z/ukztViPg1/ldpv9X1VD5LtV4FPReOneeU/w4H5tJLLk6d1
f3jNiir+7er/Ff6wfwb1cZAvSl9d1W5o/eUP1M7mg7wFBQfuZ6D4uPqf/WfQ
L1WdpxoXcT/wRbx3YtO9fjO9W/xcCEW/UTlebL8GrouYctV7k6f9WC88bwUX
5m9ReubzMjluAT2Q+yGNXPZ484E3NUzWi/pcx79Zv+R6THxH+f/wPuftP/qH
Aauf/bmOhCfGx/vK/+v2we0P0xPsGKX3uHE5TgJ+CXhzXryTT8Wek+GugB+v
38mTYq/sv1V+dejvvD7nn1BxQdX3LKkPEnZQdN/V/mE+PD7yazAf4Al/j+mK
65JZr4jWmfM5AbWunHnONVeVJf3Ome5V3bjaV3celpof32/bZe/mb/fcI5Pb
/P3oOfWQ81F7R+EV7Dc+ny2JYwl4Or+N8tfwb/gXWZ/M69fgehKWA1k8jOpl
FJ0xP8X+MB3gvsrvivozeL6qD4saL9p3WNXh4j72je1Wh6+KXpQei9+qbhl4
y3nNjHeIC2I++J/rkp0/QsGZ+0Fl6ynU5yg+m9f/qvIm3f7jOejnbGervLhl
Y0pmld3VMLEjVN8r1qtVHwsFb8BN4Y3zf+X1e7i+WNxnS+2LyvtQ+Stun/fs
s6hk7fpayX34o6J+jSweWuBn93z952PW/b2hpf/s/r9+6vDyXjWS8bj/s9qH
aH2By1djf0HeeAPzKe6bpvL8+XkVP3H8QukjUX+U2lf8fmj9wZPaTSyx9TNM
96ibdfqf6tuE36ovUV5/Trd99x92TWufTxOVl4yHKt8SeZ+oU0A/fK7zV3F+
pe8xX3X76vDa5V/mjV/ntfNZz3fzdXnMzB+VX53tN+zbtrZzrz14TKkcH/af
0tvy2n8MB+AT1y+pvHbk2+BcGTy/4PMuL1xSXhrePwX3KL9VdVxK3ubFHx6X
/dt5++J0PWv8SQP7NZTfj9pfSf0V5eGyXQZ7w/XLicIhww/Ks3X7Bzx255hE
8UadD6f4t7IP2/103nujLtu+UPn50ZeWz7fi65FLvur+0aVp/quyK5XfMIFz
zvOlOB9O2UMMR8eHFf+J5gExP1XyFXYI5DH2DXIN+lNevxrXiTn+ofwUKv9Y
4Yc6P5TPiY3WVfM8WN/g9ag6IkU3Li7LfCiv/4LvF5tXovZfjQe4wa/P9UEq
T9v1f2F9Uvm9FF9S/8Ofznyb+SXsSNXvgOeB3+hHoOpWMF6UP6tzj/Ab/jes
G/U4oGvGt6i8itpRvF+u/5/Kf1TjMXyd3c36BObzcumXty9fW27tMFXHmZzP
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
RPmj2l/Xn23j4PtP/eOpdeQ4qi7awdvhG8cLuQ9SdF+43oD7K6h9YbgMvvfK
Wae9XSM539XlYTj9r9g6srz7H/V78rmfDCfW4ziereIeDj6q/z/jpRrX5R26
PL688qjY/Yrq83n5U97nlZx39Zuuj5WC3wFttmw4fm16/jHvp+Ofqm85v7/z
Tz9/Vfu2tN+rwhvGY4aH0isZ76GXjDl7wvtNnkrtZVxV3hrijwqeLs/X+aei
/N/JG7Z/ovUevI/RfGHOk2O8Yb7D+ejuXEv8Zj4R5QNcTwf9GPIB4z9x4s0V
3QbtIcdBn5Qofat8lKjcVXTv5GM0fsV6serL4vom4Ao6VPEOpi9XL5Y374zt
jyh+DBh717gn+5dV1j7r0Cl3vlnXPq/OdYz2X+G631cfufCVc7/6IcvbUf08
VL84rkNi/4bDV+wb0yHvQ5Qu3T6qPDjku2X+i2GLL+3+hj4fAOOgPzTGAZwU
PwY/5P3Ki29q3Y6+Vf2GO0+FxwcdKn+EkkPqPFP8VnjA12hfbpev4vgg13ni
qvQ1XDlfWj33nz7XJcqnuF+D+j7zW2VXQb/g833Rx0ytH/0BsD68F83/efvH
xo922lwq90/ti3qO7Q2Vh+XwiOlG1ceqfcH8RvVvsbrDAh9fAd2wXyPa51DF
sXY3vsbjM906fwrmwfBT9nI0/4j1Mrb/mV+78RJ6oHM2GI9cHomqA1VwhdxR
+Ip5cH1dXv6ovp/3fbZbFB64+FDUr67uI++N8ULBxfkB8Rt91hmPHHyUHI3m
6XCcj+NeHJdnvOPvP/DKmXUaPVJapW8V1uHOj1FwStZB9ZCqTyLbC0zvCq58
3maWb0X6E97nvizKr638kvjf1SlF64m4XtDZxdw3j+00h7dKHrB+wPlE6nwA
wH/YF3d/0XBkwwTfeD9ZX3J6ViY3C/l7qA+U5zyI+tsoXADXjK5oPHV+jTq3
EXDl9/LyUfyO5iUz343GV6N1bQnfKewHzqVFfFj1/cZ3yp77+vlNz1RY/Zfz
SfDc/wNp14ZS
            "], "Output" -> 
           Association[
            "f1" -> Association[
              "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
       "Invertibility" -> "Impossible", "Missing" -> "Forbidden"]], 
    "PostProcessor" -> MachineLearning`MLProcessor["FromMLDataset", 
      Association[
      "DatasetFormat" -> List, "Input" -> 
       Association[
        "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
       "Output" -> 
       Association[
        "f1" -> Association["Type" -> "NumericalVector", "Length" -> 11896]], 
       "InversePreprocessor" -> MachineLearning`MLProcessor["Sequence", 
         Association["Processors" -> {
            MachineLearning`MLProcessor["List"], 
            MachineLearning`MLProcessor["WrapMLDataset", 
             Association[
             "FeatureTypes" -> {"NumericalVector"}, "FeatureKeys" -> {"f1"}, 
              "FeatureWeights" -> {1}, "ExampleWeights" -> 1]]}]], 
       "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
       "Allowed"]], "PerformanceGoal" -> "Quality", "Invertibility" -> 
    "Impossible", "Missing" -> "Forbidden", "ExtractorDirectives" -> "TFIDF", 
    "Log" -> Association[
     "TrainingTime" -> 1.290645, "MaxTrainingMemory" -> 36636088, 
      "DataMemory" -> 1253832, "FunctionMemory" -> 218592, 
      "LanguageVersion" -> {12., 0}, "Date" -> 
      DateObject[{2019, 10, 30, 16, 22, 55.0286597`9.493163774236058}, 
        "Instant", "Gregorian", -7.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.7814655213992214`*^9, 3.78146553638523*^9}, 
   3.781465599794556*^9, 3.7814665751508436`*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"4496406f-351c-46f4-86d9-0316c10eca99"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TFIDFExtractor", "@", 
  RowBox[{"train", "[", 
   RowBox[{"[", 
    RowBox[{"3", ",", "2"}], "]"}], "]"}]}]], "Input",
 CellLabel->"In[16]:=",ExpressionUUID->"f59f7c66-e5f2-4314-974e-cba5a4a6f06d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["SparseArray",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJx1jnss1AEAx49QjGyoqVNc1OnpCiml76p5tbxCGqXU7kTlqEuE62lFajaP
5nbdIo2iNDtdrxXXXXONe/x+tx5y6V7uyGOKPKLS1r99ts/2+fNDO8zew5xD
oVAsZl0669+27DxBvI5QYIXnQm+rNgK77y1JLRD2gTdZFKp2JWA1fPDD0A8x
qP1nFdImIzrbhwJjAkgERnixxrseII6T0jPUo8P04K0yizo5wk9x8n1mSMSk
yDcWBvVj17Xs74fZBHJu2u3lslpRwA8av0wz4qQo9ZRGq8R0pVq6bW0Hmo8O
hqkfmiC+as18ukWJj0vlvoISJZ5U0IZ6XplRT9VnnA4mcJzR9v1MbRvWtNo6
nGAZEe+/9XJRFQGvhZP0+oiXmKlx9EC3AVrFY8ORRiUEO4v5b8WdWJW47Nxj
GzMcuM70DV9VqGeQlZYxEsQ2zxgkU0YMsA60Ci4SOO9GHbNJbsDL3TqOH1UH
a3v7qjUkgTjSQp+hfwYB21FaWGCAq1fWyDEnEt3Lg164eYlwN+/GZNkCw+x/
q0wyJcd1uufHg8kkahNeCR9N9CFLUzsduoPEb26PgREphKaDt33gjR7vdLZz
zZUqGPlhP73d63H1V0tI+WItpqibKbw2FTTFTzo4JVKsDljS5IFeBJ55nsxb
Jgfft0YYMKGGuYamj7nfj3W+UQ0iNYEvhbmn0841QlSeNlLB0cFjOH61M1cK
yj9chDJtWSSJ7HJN90Qpidz5+zZtD29CYPU8SlWwHv6xki/rg1T4zGbe5ufI
EG0KLnruaoLN6O3xzHlKMLihiS5RKoxC/I3u0ofRsQCGdaYSfv4hi6tLFEhk
XqgbTDODbycUljqokE+56KTWvsVActZ5y1TTf/9X5viUh9UoIIt2LpV6EDCl
JHTZsvuQ+V7kwklXgUg6kHSI1o5L9KRFifJe9Ka7u+dVqBDuv7/F8dMb5FeT
CXeu9OIP6upo0Q==
              "], {{0, 0}, {30, 1}}, {0, 1}], AspectRatio -> 1, Axes -> False,
              Frame -> False, FrameLabel -> {None, None}, FrameStyle -> 
             Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["83", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "11896", "}"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJx1jnss1AEAx49QjGyoqVNc1OnpCiml76p5tbxCGqXU7kTlqEuE62lFajaP
5nbdIo2iNDtdrxXXXXONe/x+tx5y6V7uyGOKPKLS1r99ts/2+fNDO8zew5xD
oVAsZl0669+27DxBvI5QYIXnQm+rNgK77y1JLRD2gTdZFKp2JWA1fPDD0A8x
qP1nFdImIzrbhwJjAkgERnixxrseII6T0jPUo8P04K0yizo5wk9x8n1mSMSk
yDcWBvVj17Xs74fZBHJu2u3lslpRwA8av0wz4qQo9ZRGq8R0pVq6bW0Hmo8O
hqkfmiC+as18ukWJj0vlvoISJZ5U0IZ6XplRT9VnnA4mcJzR9v1MbRvWtNo6
nGAZEe+/9XJRFQGvhZP0+oiXmKlx9EC3AVrFY8ORRiUEO4v5b8WdWJW47Nxj
GzMcuM70DV9VqGeQlZYxEsQ2zxgkU0YMsA60Ci4SOO9GHbNJbsDL3TqOH1UH
a3v7qjUkgTjSQp+hfwYB21FaWGCAq1fWyDEnEt3Lg164eYlwN+/GZNkCw+x/
q0wyJcd1uufHg8kkahNeCR9N9CFLUzsduoPEb26PgREphKaDt33gjR7vdLZz
zZUqGPlhP73d63H1V0tI+WItpqibKbw2FTTFTzo4JVKsDljS5IFeBJ55nsxb
Jgfft0YYMKGGuYamj7nfj3W+UQ0iNYEvhbmn0841QlSeNlLB0cFjOH61M1cK
yj9chDJtWSSJ7HJN90Qpidz5+zZtD29CYPU8SlWwHv6xki/rg1T4zGbe5ufI
EG0KLnruaoLN6O3xzHlKMLihiS5RKoxC/I3u0ofRsQCGdaYSfv4hi6tLFEhk
XqgbTDODbycUljqokE+56KTWvsVActZ5y1TTf/9X5viUh9UoIIt2LpV6EDCl
JHTZsvuQ+V7kwklXgUg6kHSI1o5L9KRFifJe9Ka7u+dVqBDuv7/F8dMb5FeT
CXeu9OIP6upo0Q==
              "], {{0, 0}, {30, 1}}, {0, 1}], AspectRatio -> 1, Axes -> False,
              Frame -> False, FrameLabel -> {None, None}, FrameStyle -> 
             Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["83", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "11896", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.`", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.006977135171486214`", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"\"", "SummaryItem"]}]}, {
               TagBox[
                TagBox[
                 GridBox[{{
                    RowBox[{
                    RowBox[{"{", "386", "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"-", "0.01788901266053908`"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", "678", "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"-", "0.0372176743179895`"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", "774", "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"-", "0.04290701812258872`"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", "845", "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"-", "0.028035554503303313`"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    ItemBox[
                    "\"\[VerticalEllipsis]\"", Alignment -> Center, 
                    StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  SparseArray[Automatic, {11896}, 0., {1, {{0, 83}, CompressedData["
1:eJwN0M0rwwEYwPEvMu8vM2zejQlrcxInLmq57EK5yGVnbf6AlVor5bQ0peTi
QHJ1Usiu7tIvV7cV0eToe/g8h6ee13iusJVvBrbVpJLhykSoBbJ60Je+VWuF
mxAk2qCghjLtsKdUB/wo2wnRLohpV5e67YZ8D5zqT5leuFe5zx5a6YenMAR6
1/IAHKim8QhsKBiE8JB7KqfGMJxF4U4fWo25oxZG7KtfrY3Ctd50PgaPE7A/
CUUd6lgVVafgQnXtTMOJnhWoHnfmDBypMgvrCfjU5hyk5+FFr0nrU96qxbT/
WYKk/gFGlDX8
     "]}, CompressedData["
1:eJxFUWtIUwEYvTmDcGQPA9PQNpkk4tvUKCyyTLTyMU1zlaVQaVqa++MDW/nA
0mZ4t3k3N7a5uRwqolupUHZSEO2lWRaVbfnIfCQqVkrzUf3x9uPj4/BxDuec
j52Syb24gSCI2H+T2xMfI4gh8XTAdsbXVovWxQDV5JIOhc7mQN5DBY2r3hak
butXQ+iXNKfZq8Pt5KaqGHkl4lmEJdGdxLUt99tfMNXosb68LEiqwaxmZcUg
JxFmoAa4gxRalZjK+VkCloO5yyvxDjSxdi71C2KUXneRRcRXgD9uM58upZDW
y7Q/uZkCe1bwhjtVDsWQ16NKM0X7u3Cl+Ilg6R7aart+z4tVyFX+8syIq4aD
99ihhfFKvNPyPP0zysDS3W3b8V4Ke9OlhiJrCpmsfhFjqwrl2Yy4l5EiSOwl
+89ra8DPem1rkSvgVGdisZl1tF6n5XtwmZsU7S3Dc0IrOX1f31HOh0Me60X4
GO2tv/lNBpuIlIB5FwluzH1Wz+wk6d6s/7BPZKdSkHjPHKjvlWHU98yYH0+K
SKPr4JEqESY9iYLOU0qsdZg7OElaNO46x1WN6CEZDXXvCzLA2RhsCZSW0v5X
i1ynw0drQOo3de8xVdD/WOdNhGXlHdsoBOdW1OrzaDHdd54xfFjo0wxWSBBP
vvoVTNJ0NCdBRvPG8jt+LJdoaMzf3teU4q/EWUdhLcNcjWSnT8npbnIsTrt3
Zh6Uornwi4FcE8MvivA67lOMFisi1Hf6f+71nhQfhhhT3RK8GmmgAuxE2J0w
4RhWoMOzxol9+Rw1rcMxXC1pP62G5cFsGt9DjL/Dr2wz
    "]}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7814656411912394`*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"8009f4c8-c4cf-4c8b-9e75-ce591f0eb12d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PCADR", "=", 
  RowBox[{"DimensionReduction", "[", 
   RowBox[{
    RowBox[{"train", "[", 
     RowBox[{"[", 
      RowBox[{
       RowBox[{"2", ";;", "All"}], ",", "2"}], "]"}], "]"}], ",", 
    "\[IndentingNewLine]", "100", ",", "\[IndentingNewLine]", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"FeatureExtractor", "\[Rule]", "TFIDFExtractor"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Method", "\[Rule]", "\"\<PrincipalComponentsAnalysis\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7814652500847845`*^9, 3.781465256485956*^9}, {
  3.78146544557486*^9, 3.7814654530736885`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"3cdbafa5-42f7-483c-bd1d-c0cb13092659"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DimensionReducerFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{{{{}, {}}, {}, {{}, {}, {
                    GrayLevel[0.7], 
                    AbsoluteThickness[1.8], 
                    Opacity[1.], 
                    LineBox[CompressedData["
1:eJwB8QEO/iFib1JlAgAAAB4AAAACAAAAAAAAAAAAAAAAAAAAAAAAAA3l5opg
ldw/ifaD+DItuD+MkCEodiHjP9qvjCs8v9E/bLbqGG2J5D+WRNoAzOrePxWI
hjT6cuM/qFFV1TM75j8YmI/Y7IHfP/eKfiNPOe0/quVYmD5o1D+ADmRmEGnx
P3eNjU0+TbI/IY3cLB+l8z/z/SDb3KDLv5a/pk3oyvQ/P80MS7g64L+H2H4K
a8b0P9+nsKVohOq/rTamnQZ68z/qrFzHBdfxv6YHIajkDPE/bw9qE5vX9b+Z
SUCP/i3rP/uMEvTgV/m/kzjs/r2F4T/bUNnDc5T7v9G7+cvEhMs/wYIqip+q
/L9jvEi/XoXHvxhoDlvsO/y/eOnDDXz84r8s6yb5EW/6v2qTREHJFe+/UEHO
hnD69r/GEyuZBq31v4JWinxOcPK/c9vQT8is+r8XVSwtro/ov0knBpVW9/6/
yZ09iVcE1b9l2NyAUeAAwDbV0T76Ar4/Y701SKBwAcCmV9X1r7fjP9Pdwu5B
LgHAhEmFnNot8T/aVnzNXBkAwIeJGWTe4Pc/Fl/LTVCK/L9n/YLkNTv+P27f
ThBa+/a/DjFFsd98AUAQoc+DuIDwv00y1JUAQgNAdLxOLvHB4L8FJ/Yfkw0E
QHdYowipHsa8z+n67g==
                    "]]}}, {}, {{{}, {}, {}, {}}, {}}}, {{{}, {}}, {}, {{}, 
                    GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGBQAGIQvSOde+X6LwX2L+JEV934or//a9ba9rVPHto/qNs+
h/vZZfumRXKlmjWP7f94fAgTnPDcnk/kyM/O5Bf27XmKKav2f7HfXXOp8OzR
U/ZfddfwhpR8tH/Mf1NimfrD/bmrPms6/Ptsv6/iJO/vs5/3+3H82Z7G+Nqe
6/yMbVMP/dhfKsm+/u3U5/bzr9z7quHMeMBGKvy71POz+5PZdsQbTf23/7d6
VqJF6pf9/teV3u88/Hn/ux/vv2b//bTftGfJ25NKr/eXHb7jHVj0Y39nSUKD
+sIl9od7wyt357EeyI75vbEl+Jl9xCWXx0L8f/a7XHD6XCLA4HD6j8KD5/N+
7l/dca7ELo3ZwUXo+W6J9/f2j3T/AwAmeB/L
                    "], {{}, {
                    GrayLevel[0.5], 
                    PointSize[0.12], 
                    AbsoluteThickness[1.6], 
                    
                    PointBox[{17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 
                    29, 30, 31, 
                    32}]}, {}}], {}}, {}, {}, {{{}, {}, {}, {}}, {}}}}, 
                  ImagePadding -> 0.2, 
                  PlotRange -> {{-3.1, 3.2}, {-3.5, 2.1}}, PlotRangePadding -> 
                  Automatic, PlotRangeClipping -> True, FrameStyle -> 
                  Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Text\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output dimension: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["100", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{{{{}, {}}, {}, {{}, {}, {
                    GrayLevel[0.7], 
                    AbsoluteThickness[1.8], 
                    Opacity[1.], 
                    LineBox[CompressedData["
1:eJwB8QEO/iFib1JlAgAAAB4AAAACAAAAAAAAAAAAAAAAAAAAAAAAAA3l5opg
ldw/ifaD+DItuD+MkCEodiHjP9qvjCs8v9E/bLbqGG2J5D+WRNoAzOrePxWI
hjT6cuM/qFFV1TM75j8YmI/Y7IHfP/eKfiNPOe0/quVYmD5o1D+ADmRmEGnx
P3eNjU0+TbI/IY3cLB+l8z/z/SDb3KDLv5a/pk3oyvQ/P80MS7g64L+H2H4K
a8b0P9+nsKVohOq/rTamnQZ68z/qrFzHBdfxv6YHIajkDPE/bw9qE5vX9b+Z
SUCP/i3rP/uMEvTgV/m/kzjs/r2F4T/bUNnDc5T7v9G7+cvEhMs/wYIqip+q
/L9jvEi/XoXHvxhoDlvsO/y/eOnDDXz84r8s6yb5EW/6v2qTREHJFe+/UEHO
hnD69r/GEyuZBq31v4JWinxOcPK/c9vQT8is+r8XVSwtro/ov0knBpVW9/6/
yZ09iVcE1b9l2NyAUeAAwDbV0T76Ar4/Y701SKBwAcCmV9X1r7fjP9Pdwu5B
LgHAhEmFnNot8T/aVnzNXBkAwIeJGWTe4Pc/Fl/LTVCK/L9n/YLkNTv+P27f
ThBa+/a/DjFFsd98AUAQoc+DuIDwv00y1JUAQgNAdLxOLvHB4L8FJ/Yfkw0E
QHdYowipHsa8z+n67g==
                    "]]}}, {}, {{{}, {}, {}, {}}, {}}}, {{{}, {}}, {}, {{}, 
                    GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGBQAGIQvSOde+X6LwX2L+JEV934or//a9ba9rVPHto/qNs+
h/vZZfumRXKlmjWP7f94fAgTnPDcnk/kyM/O5Bf27XmKKav2f7HfXXOp8OzR
U/ZfddfwhpR8tH/Mf1NimfrD/bmrPms6/Ptsv6/iJO/vs5/3+3H82Z7G+Nqe
6/yMbVMP/dhfKsm+/u3U5/bzr9z7quHMeMBGKvy71POz+5PZdsQbTf23/7d6
VqJF6pf9/teV3u88/Hn/ux/vv2b//bTftGfJ25NKr/eXHb7jHVj0Y39nSUKD
+sIl9od7wyt357EeyI75vbEl+Jl9xCWXx0L8f/a7XHD6XCLA4HD6j8KD5/N+
7l/dca7ELo3ZwUXo+W6J9/f2j3T/AwAmeB/L
                    "], {{}, {
                    GrayLevel[0.5], 
                    PointSize[0.12], 
                    AbsoluteThickness[1.6], 
                    
                    PointBox[{17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 
                    29, 30, 31, 
                    32}]}, {}}], {}}, {}, {}, {{{}, {}, {}, {}}, {}}}}, 
                  ImagePadding -> 0.2, 
                  PlotRange -> {{-3.1, 3.2}, {-3.5, 2.1}}, PlotRangePadding -> 
                  Automatic, PlotRangeClipping -> True, FrameStyle -> 
                  Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Text\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output dimension: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["100", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Linear\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["2586", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[DimensionReducerFunction, 10126448, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           DimensionReducerFunction, 
            11486143210361906538282795408777284690840314447896405797424, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("DimensionReducerFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 11486143210361906538282795408777284690840314447896405797424,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7814655375504203`*^9, 3.7814656049580865`*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"0c7e29f6-c700-4633-a5ca-c6e4b40afed5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PCAC", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"Rule", "@@@", 
     RowBox[{"train", "[", 
      RowBox[{"[", 
       RowBox[{
        RowBox[{"2", ";;", "All"}], ",", 
        RowBox[{"2", ";;", "3"}]}], "]"}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Method", "\[Rule]", "\"\<LogisticRegression\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"FeatureExtractor", "\[Rule]", "PCADR"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.781465273822257*^9, 3.7814652782975674`*^9}, 
   3.7814655572923403`*^9},
 CellLabel->"In[14]:=",ExpressionUUID->"92abf520-3235-44e9-a44a-328bc7e567fa"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Text\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "1", "2", "3", "4"}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Text\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "1", "2", "3", "4"}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["2586", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierFunction, 10461184, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierFunction, 
            11486143210361906538282795408777284690858761191969800505792, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 11486143210361906538282795408777284690858761191969800505792,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.781465549122769*^9, 3.7814655962253437`*^9, 
  3.7814656386459646`*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"4e80ebf6-5189-41e1-bb3e-e86777744ebd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "@", "PCAC"}]], "Input",
 CellChangeTimes->{{3.7814655420052776`*^9, 3.781465544399185*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"e077b2b3-cc8f-40db-ac72-4fae39635dfb"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12],
         FrameMargins->{{10, 5}, {-4, 2}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.96, 0.96, 0.96],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Data type\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], "\<\"Text\"\>"},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Classes\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{",","\",\"","1","2","3","4"},
               "RowWithSeparators"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Accuracy\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{InterpretationBox[
                 RowBox[{"(", 
                   TemplateBox[{"90.3", "0.8"}, "Around"], ")"}], 
                 Around[90.3322351239400518352`3., 0.8064254032906630343`3.]],
                "\"%\"","percent","\"Percent\""},
               "QuantityPostfix"]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["\<\"LogisticRegression\"\>",
                TemplateBox[{
                  TagBox[
                   
                   DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 20, "Length" -> 3, "InitialType" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "Shape" -> 
                    TypeSystem`PackageScope`DocumentShape[
                    
                    Association[{"L1Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[34], {
                    "L2Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[60], {
                    "OptimizationMethod"} -> 
                    TypeSystem`PackageScope`AtomShape[48.00000000000001]], 1],
                     "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[1406226973], "Type" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "HandleQ" -> True, "RowTarget" -> 
                    20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[1406226973]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 372423437][{
                    Key["L1Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    372423437][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    372423437][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 372423437][{
                    Key["L2Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    372423437][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["10.0"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    372423437][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 372423437][{
                    Key["OptimizationMethod"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    372423437][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation["LBFGS", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    372423437][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], 
                    ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 372423437][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    372423437]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    372423437][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    372423437][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                   DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                 DisplayFunction -> (#& ), 
                 InterpretationFunction -> ("Dataset[<>]"& )]],
               Annotation[#, 
                Dataset[
                 Association[
                 "L1Regularization" -> 0, "L2Regularization" -> 10., 
                  "OptimizationMethod" -> "LBFGS"], 
                 
                 TypeSystem`Struct[{
                  "L1Regularization", "L2Regularization", 
                   "OptimizationMethod"}, {
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[String]}], 
                 Association["ID" -> 154541697161911]], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Single evaluation time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "7.78`",
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}],"milliseconds per example",FractionBox[
                "\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Batch evaluation speed\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "190.`",
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"s\""}],"examples per second",
                FractionBox["\"Examples\"", "\"Seconds\""]},
               "Quantity"]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                 TagBox[
                  TooltipBox[
                  "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.3396569483616868612`3.",StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0243349575982891517`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.290987033165108544`3.", 
                  "\", \"", "0.3883268635582651784`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.290987033165108544`3., 
                  ", ", 0.3883268635582651784`3., "]"}], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Model memory\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"10.4`","\"MB\"","megabytes","\"Megabytes\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Training examples used\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"2586","\"examples\"","examples","\"Examples\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"33.5`","\"s\"","seconds","\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file12Panel`PackagePrivate`pos$$ = 2}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.018970005056232458`}, {
                    4.0943445622221, -0.48430056069454713`}, {
                    5.991464547107982, -0.7973949089406781}, {
                    7.634820677745543, -1.0798191461370679`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.018970005056232458`}}, {{
                    4.0943445622221, -0.48430056069454713`}}, {{
                    5.991464547107982, -0.7973949089406781}}, {{
                    7.634820677745543, -1.0798191461370679`}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, -0.0894922305603466}, {
                    2.302585092994046, 0.11681081931647262`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, -0.5969046346704724}, {
                    4.0943445622221, -0.38310261306182675`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.991464547107982, -0.8289334106128707}, {
                    5.991464547107982, -0.7668207479811534}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{7.634820677745543, -1.154160969340241}, {
                    7.634820677745543, -1.0106236479663206`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, -1.1408629878700292`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {-1.1408629878700292`, 
                    0.018970005056232458`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.6423242614102096}, {
                    4.0943445622221, 0.8250611089503707}, {5.991464547107982, 
                    0.8804686232087567}, {7.634820677745543, 
                    0.9033223512394005}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.6423242614102096}}, {{4.0943445622221, 
                    0.8250611089503707}}, {{5.991464547107982, 
                    0.8804686232087567}}, {{7.634820677745543, 
                    0.9033223512394005}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, 0.6234992225370627}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {0.6234992225370627, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.29535728741690404`}, {
                    4.0943445622221, 0.1768563444234468}, {
                    5.991464547107982, -0.2764598085555205}, {
                    7.634820677745543, -0.7821026761690472}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154545992129207]]}, Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.32259505690803936`}, {
                    4.0943445622221, 0.3224763524297463}, {5.991464547107982, 
                    0.31955237848462376`}, {7.634820677745543, 
                    0.3157128299792302}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154550287096503]]}, Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 1.1285787799774587`}, {
                    4.0943445622221, 1.0239803867755075`}, {5.991464547107982,
                     2.180314625575076}, {
                    7.634820677745543, -0.011754656301397748`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154554582063799]]}, Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.018970005056232458`}, {
                    4.0943445622221, -0.48430056069454713`}, {
                    5.991464547107982, -0.6315546971142352}, {
                    7.634820677745543, -0.7078053077422106}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154558877031095]]}, Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.6707289957106425}, {
                    4.0943445622221, 0.46844629685175815`}, {
                    5.991464547107982, 1.316872335237061}, {
                    7.634820677745543, -0.007227096722080139}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154563171998391]]}, Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.13321442746576134`}, {
                    4.0943445622221, -0.31453673457142617`}, {
                    5.991464547107982, 0.21158320258737678`}, {
                    7.634820677745543, -0.17701841256685383`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154567466965687]]}, Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.32355097998907356`}, {
                    4.0943445622221, 0.3232375947708713}, {5.991464547107982, 
                    0.32307525501919027`}, {7.634820677745543, 
                    0.32185323274291444`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154571761932983]]}, Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 1.007745273739955}, {
                    4.0943445622221, 0.9037041177835906}, {5.991464547107982, 
                    2.105956996234368}, {
                    7.634820677745543, -0.019349663236888383`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.00001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154576056900279]]}, Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.306611723502059}, {
                    4.0943445622221, 0.15145518596325183`}, {
                    5.991464547107982, 0.8019321503128128}, {
                    7.634820677745543, -0.032459637543331935`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154580351867575]]}, Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.17812401249673038`}, {
                    4.0943445622221, -0.2346595418205517}, {
                    5.991464547107982, -0.7973949089406781}, {
                    7.634820677745543, -1.0798191461370679`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154584646834871]]}, Center]], 
                    Tooltip[{
                    Hue[0.030679774997896203`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.32424245400088675`}, {
                    4.0943445622221, 0.31902772823881953`}, {
                    5.991464547107982, 0.3111203736789498}, {
                    7.634820677745543, 0.2588610659461267}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154588941802167]]}, Center]], 
                    Tooltip[{
                    Hue[0.266747752497686, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.3222018198714603}, {
                    4.0943445622221, 0.30465530563326815`}, {
                    5.991464547107982, 0.20917064652818176`}, {
                    7.634820677745543, -0.11206635829464341`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154593236769463]]}, Center]], 
                    Tooltip[{
                    Hue[0.5028157299974758, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.0943445622221, 0.7249520421623812}, {
                    5.991464547107982, 1.7478722640768614`}, {
                    7.634820677745543, -0.015872711930727805`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.0001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154597531736759]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.29535728741690404`}}, {{
                    4.0943445622221, 0.1768563444234468}}, {{
                    5.991464547107982, -0.2764598085555205}}, {{
                    7.634820677745543, -0.7821026761690472}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154545992129207]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.32259505690803936`}}, {{
                    4.0943445622221, 0.3224763524297463}}, {{
                    5.991464547107982, 0.31955237848462376`}}, {{
                    7.634820677745543, 0.3157128299792302}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154550287096503]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 1.1285787799774587`}}, {{
                    4.0943445622221, 1.0239803867755075`}}, {{
                    5.991464547107982, 2.180314625575076}}, {{
                    7.634820677745543, -0.011754656301397748`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154554582063799]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.018970005056232458`}}, {{
                    4.0943445622221, -0.48430056069454713`}}, {{
                    5.991464547107982, -0.6315546971142352}}, {{
                    7.634820677745543, -0.7078053077422106}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154558877031095]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.6707289957106425}}, {{
                    4.0943445622221, 0.46844629685175815`}}, {{
                    5.991464547107982, 1.316872335237061}}, {{
                    7.634820677745543, -0.007227096722080139}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154563171998391]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.13321442746576134`}}, {{
                    4.0943445622221, -0.31453673457142617`}}, {{
                    5.991464547107982, 0.21158320258737678`}}, {{
                    7.634820677745543, -0.17701841256685383`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154567466965687]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.32355097998907356`}}, {{
                    4.0943445622221, 0.3232375947708713}}, {{
                    5.991464547107982, 0.32307525501919027`}}, {{
                    7.634820677745543, 0.32185323274291444`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154571761932983]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 1.007745273739955}}, {{4.0943445622221,
                     0.9037041177835906}}, {{5.991464547107982, 
                    2.105956996234368}}, {{
                    7.634820677745543, -0.019349663236888383`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.00001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154576056900279]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.306611723502059}}, {{4.0943445622221,
                     0.15145518596325183`}}, {{5.991464547107982, 
                    0.8019321503128128}}, {{
                    7.634820677745543, -0.032459637543331935`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154580351867575]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.17812401249673038`}}, {{
                    4.0943445622221, -0.2346595418205517}}, {{
                    5.991464547107982, -0.7973949089406781}}, {{
                    7.634820677745543, -1.0798191461370679`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154584646834871]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.32424245400088675`}}, {{
                    4.0943445622221, 0.31902772823881953`}}, {{
                    5.991464547107982, 0.3111203736789498}}, {{
                    7.634820677745543, 0.2588610659461267}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154588941802167]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.3222018198714603}}, {{
                    4.0943445622221, 0.30465530563326815`}}, {{
                    5.991464547107982, 0.20917064652818176`}}, {{
                    7.634820677745543, -0.11206635829464341`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154593236769463]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    4.0943445622221, 0.7249520421623812}}, {{
                    5.991464547107982, 1.7478722640768614`}}, {{
                    7.634820677745543, -0.015872711930727805`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.0001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154597531736759]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154545992129207]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154550287096503]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154554582063799]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154558877031095]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154563171998391]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154567466965687]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154571761932983]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.00001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154576056900279]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154580351867575]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154584646834871]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154588941802167]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154593236769463]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.0001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154597531736759]]}, 
                    Center]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154545992129207]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154550287096503]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154554582063799]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154558877031095]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154563171998391]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154567466965687]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154571761932983]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.00001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154576056900279]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154580351867575]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154584646834871]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154588941802167]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154593236769463]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.0001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154597531736759]]}, 
                    Center]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, -1.2609376890099648`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {-1.2609376890099648`, 2.180314625575076}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file12Panel`PackagePrivate`pos$$ - 1, 
                    1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file12Panel`PackagePrivate`pos$$ + 1, 
                    Length[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.018970005056232458`}, {
                    4.0943445622221, -0.48430056069454713`}, {
                    5.991464547107982, -0.7973949089406781}, {
                    7.634820677745543, -1.0798191461370679`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.018970005056232458`}}, {{
                    4.0943445622221, -0.48430056069454713`}}, {{
                    5.991464547107982, -0.7973949089406781}}, {{
                    7.634820677745543, -1.0798191461370679`}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, -0.0894922305603466}, {
                    2.302585092994046, 0.11681081931647262`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, -0.5969046346704724}, {
                    4.0943445622221, -0.38310261306182675`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.991464547107982, -0.8289334106128707}, {
                    5.991464547107982, -0.7668207479811534}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    Line[{{7.634820677745543, -1.154160969340241}, {
                    7.634820677745543, -1.0106236479663206`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}}, {{}, {}}}}, {DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, -1.1408629878700292`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {-1.1408629878700292`, 
                    0.018970005056232458`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.6423242614102096}, {
                    4.0943445622221, 0.8250611089503707}, {5.991464547107982, 
                    0.8804686232087567}, {7.634820677745543, 
                    0.9033223512394005}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.6423242614102096}}, {{4.0943445622221, 
                    0.8250611089503707}}, {{5.991464547107982, 
                    0.8804686232087567}}, {{7.634820677745543, 
                    0.9033223512394005}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, 0.6234992225370627}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {0.6234992225370627, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.29535728741690404`}, {
                    4.0943445622221, 0.1768563444234468}, {
                    5.991464547107982, -0.2764598085555205}, {
                    7.634820677745543, -0.7821026761690472}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154545992129207]]}, Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.32259505690803936`}, {
                    4.0943445622221, 0.3224763524297463}, {5.991464547107982, 
                    0.31955237848462376`}, {7.634820677745543, 
                    0.3157128299792302}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154550287096503]]}, Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 1.1285787799774587`}, {
                    4.0943445622221, 1.0239803867755075`}, {5.991464547107982,
                     2.180314625575076}, {
                    7.634820677745543, -0.011754656301397748`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154554582063799]]}, Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.018970005056232458`}, {
                    4.0943445622221, -0.48430056069454713`}, {
                    5.991464547107982, -0.6315546971142352}, {
                    7.634820677745543, -0.7078053077422106}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154558877031095]]}, Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.6707289957106425}, {
                    4.0943445622221, 0.46844629685175815`}, {
                    5.991464547107982, 1.316872335237061}, {
                    7.634820677745543, -0.007227096722080139}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154563171998391]]}, Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.13321442746576134`}, {
                    4.0943445622221, -0.31453673457142617`}, {
                    5.991464547107982, 0.21158320258737678`}, {
                    7.634820677745543, -0.17701841256685383`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154567466965687]]}, Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.32355097998907356`}, {
                    4.0943445622221, 0.3232375947708713}, {5.991464547107982, 
                    0.32307525501919027`}, {7.634820677745543, 
                    0.32185323274291444`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154571761932983]]}, Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 1.007745273739955}, {
                    4.0943445622221, 0.9037041177835906}, {5.991464547107982, 
                    2.105956996234368}, {
                    7.634820677745543, -0.019349663236888383`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.00001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154576056900279]]}, Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.306611723502059}, {
                    4.0943445622221, 0.15145518596325183`}, {
                    5.991464547107982, 0.8019321503128128}, {
                    7.634820677745543, -0.032459637543331935`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154580351867575]]}, Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.17812401249673038`}, {
                    4.0943445622221, -0.2346595418205517}, {
                    5.991464547107982, -0.7973949089406781}, {
                    7.634820677745543, -1.0798191461370679`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154584646834871]]}, Center]], 
                    Tooltip[{
                    Hue[0.030679774997896203`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.32424245400088675`}, {
                    4.0943445622221, 0.31902772823881953`}, {
                    5.991464547107982, 0.3111203736789498}, {
                    7.634820677745543, 0.2588610659461267}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association["L1Regularization" -> 0, "L2Regularization" -> 
                    10000., "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154588941802167]]}, Center]], 
                    Tooltip[{
                    Hue[0.266747752497686, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.3222018198714603}, {
                    4.0943445622221, 0.30465530563326815`}, {
                    5.991464547107982, 0.20917064652818176`}, {
                    7.634820677745543, -0.11206635829464341`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154593236769463]]}, Center]], 
                    Tooltip[{
                    Hue[0.5028157299974758, 0.6, 0.6], 
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.0943445622221, 0.7249520421623812}, {
                    5.991464547107982, 1.7478722640768614`}, {
                    7.634820677745543, -0.015872711930727805`}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.0001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154597531736759]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.29535728741690404`}}, {{
                    4.0943445622221, 0.1768563444234468}}, {{
                    5.991464547107982, -0.2764598085555205}}, {{
                    7.634820677745543, -0.7821026761690472}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154545992129207]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.32259505690803936`}}, {{
                    4.0943445622221, 0.3224763524297463}}, {{
                    5.991464547107982, 0.31955237848462376`}}, {{
                    7.634820677745543, 0.3157128299792302}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154550287096503]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 1.1285787799774587`}}, {{
                    4.0943445622221, 1.0239803867755075`}}, {{
                    5.991464547107982, 2.180314625575076}}, {{
                    7.634820677745543, -0.011754656301397748`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                    "OptimizationMethod" -> Automatic], 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154554582063799]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.018970005056232458`}}, {{
                    4.0943445622221, -0.48430056069454713`}}, {{
                    5.991464547107982, -0.6315546971142352}}, {{
                    7.634820677745543, -0.7078053077422106}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154558877031095]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.6707289957106425}}, {{
                    4.0943445622221, 0.46844629685175815`}}, {{
                    5.991464547107982, 1.316872335237061}}, {{
                    7.634820677745543, -0.007227096722080139}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154563171998391]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.13321442746576134`}}, {{
                    4.0943445622221, -0.31453673457142617`}}, {{
                    5.991464547107982, 0.21158320258737678`}}, {{
                    7.634820677745543, -0.17701841256685383`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154567466965687]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.32355097998907356`}}, {{
                    4.0943445622221, 0.3232375947708713}}, {{
                    5.991464547107982, 0.32307525501919027`}}, {{
                    7.634820677745543, 0.32185323274291444`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154571761932983]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 1.007745273739955}}, {{4.0943445622221,
                     0.9037041177835906}}, {{5.991464547107982, 
                    2.105956996234368}}, {{
                    7.634820677745543, -0.019349663236888383`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.00001, 
                    "OptimizationMethod" -> Automatic], 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154576056900279]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.306611723502059}}, {{4.0943445622221,
                     0.15145518596325183`}}, {{5.991464547107982, 
                    0.8019321503128128}}, {{
                    7.634820677745543, -0.032459637543331935`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154580351867575]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.17812401249673038`}}, {{
                    4.0943445622221, -0.2346595418205517}}, {{
                    5.991464547107982, -0.7973949089406781}}, {{
                    7.634820677745543, -1.0798191461370679`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154584646834871]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.32424245400088675`}}, {{
                    4.0943445622221, 0.31902772823881953`}}, {{
                    5.991464547107982, 0.3111203736789498}}, {{
                    7.634820677745543, 0.2588610659461267}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154588941802167]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.3222018198714603}}, {{
                    4.0943445622221, 0.30465530563326815`}}, {{
                    5.991464547107982, 0.20917064652818176`}}, {{
                    7.634820677745543, -0.11206635829464341`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154593236769463]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    4.0943445622221, 0.7249520421623812}}, {{
                    5.991464547107982, 1.7478722640768614`}}, {{
                    7.634820677745543, -0.015872711930727805`}}}]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.0001, 
                    "OptimizationMethod" -> Automatic], 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154597531736759]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154545992129207]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154550287096503]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154554582063799]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154558877031095]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154563171998391]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154567466965687]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154571761932983]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.00001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154576056900279]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154580351867575]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154584646834871]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154588941802167]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154593236769463]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.0001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154597531736759]]}, 
                    Center]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154545992129207]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154550287096503]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^-6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154554582063799]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154558877031095]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.001, 
                    "OptimizationMethod" -> Automatic], 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154563171998391]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154567466965687]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154571761932983]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.00001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154576056900279]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154580351867575]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154584646834871]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154588941802167]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154593236769463]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.011000000000000001`], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LogisticRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.0001, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 154597531736759]]}, 
                    Center]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1892119814361326`, -1.2609376890099648`},
                     DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.1892119814361326`, 
                    Log[2586]}, {-1.2609376890099648`, 2.180314625575076}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}]}]], 
                    Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{429., {157., 162.}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[0.8], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Background->GrayLevel[1],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.7814655507360935`*^9, 3.7814656399879575`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"b2c64164-00cd-4783-bc61-a15321acc207"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"test", "=", 
   RowBox[{"Import", "[", "\"\<test.csv\>\"", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7814619592508698`*^9, 3.7814620041039753`*^9}, 
   3.781462045430439*^9},
 CellLabel->"In[31]:=",ExpressionUUID->"c34bbfa5-c7af-431e-bf99-23fe17b7e942"],

Cell[BoxData[
 RowBox[{
  RowBox[{"pred", "=", 
   RowBox[{"Prepend", "[", 
    RowBox[{
     RowBox[{"MarC2", "/@", 
      RowBox[{"test", "[", 
       RowBox[{"[", 
        RowBox[{
         RowBox[{"2", ";;", "All"}], ",", "2"}], "]"}], "]"}]}], ",", 
     "\"\<category\>\""}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7814619753079505`*^9, 3.781461983816239*^9}, {
  3.7814620464647245`*^9, 3.7814620745029163`*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"abbb3667-9992-4cd7-8f85-7408f16549dc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<sub6.csv\>\"", ",", 
   RowBox[{"Thread", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"test", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "pred"}], "}"}], 
    "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7814620799962196`*^9, 3.781462104607168*^9}, {
   3.781462140462129*^9, 3.7814621433085284`*^9}, 3.7814621844688797`*^9, {
   3.781463958849392*^9, 3.781463959379242*^9}},
 CellLabel->
  "In[128]:=",ExpressionUUID->"479130a6-a20e-48b6-a4b8-d82f665d3650"],

Cell[BoxData["\<\"sub6.csv\"\>"], "Output",
 CellChangeTimes->{3.781462106707552*^9, 3.7814621438400593`*^9, 
  3.7814621853036795`*^9, 3.781463961529602*^9},
 CellLabel->
  "Out[128]=",ExpressionUUID->"9d3ec640-d8a1-4395-83f2-43f119e40b69"]
}, Open  ]]
},
WindowSize->{1904, 1021},
WindowMargins->{{-5, Automatic}, {Automatic, 10}},
Magnification:>1.3 Inherited,
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 333, 5, 37, "Input",ExpressionUUID->"1284b069-d40e-4a45-90e2-02dea9636552"],
Cell[916, 29, 291, 3, 43, "Output",ExpressionUUID->"bfb78ac1-771d-4771-b279-990c38e16920"]
}, Open  ]],
Cell[1222, 35, 318, 6, 37, "Input",ExpressionUUID->"eb92612f-9617-4b07-8e9e-2f931a65b015"],
Cell[CellGroupData[{
Cell[1565, 45, 569, 14, 63, "Input",ExpressionUUID->"0518d1fc-ffb5-408a-8f56-8ea96034e85f"],
Cell[2137, 61, 248777, 4233, 88, "Output",ExpressionUUID->"9d217e7a-d302-48f7-8082-f83df4f0140e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[250951, 4299, 211, 3, 37, "Input",ExpressionUUID->"a2496344-546b-4146-9ab2-8366608bc0c0"],
Cell[251165, 4304, 63761, 1272, 729, "Output",ExpressionUUID->"77047472-cc54-456b-b8e9-90e885b5a4cb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[314963, 5581, 422, 10, 37, "Input",ExpressionUUID->"cfbd1132-b36a-4289-89c3-c867f62c52a4"],
Cell[315388, 5593, 56296, 1025, 88, "Output",ExpressionUUID->"31ac4cd4-6bb8-408f-b7b0-1e72674cd42f"]
}, Open  ]],
Cell[371699, 6621, 699, 15, 113, "Input",ExpressionUUID->"e4ea5a1a-528b-4cd0-b68e-3f2fc60dff11"],
Cell[CellGroupData[{
Cell[372423, 6640, 252, 5, 37, "Input",ExpressionUUID->"add28702-b2ab-4de9-8e8b-ea091748fedd"],
Cell[372678, 6647, 576, 8, 69, "Output",ExpressionUUID->"9f25a6fe-7f74-4bd3-8b24-155ecb9ec8ca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[373291, 6660, 284, 6, 37, "Input",ExpressionUUID->"ca1db437-6fec-46fe-9fd7-631469d46f33"],
Cell[373578, 6668, 1648, 25, 69, "Output",ExpressionUUID->"268cde95-4117-4c39-94a7-14c7168eff76"]
}, Open  ]],
Cell[CellGroupData[{
Cell[375263, 6698, 786, 19, 138, "Input",ExpressionUUID->"318af28f-1545-407a-9826-5b83ce7b07f7"],
Cell[376052, 6719, 10842, 214, 113, "Output",ExpressionUUID->"8fd131f3-c87a-4cb9-b774-17fc5f546201"]
}, Open  ]],
Cell[CellGroupData[{
Cell[386931, 6938, 210, 3, 37, "Input",ExpressionUUID->"7d61e433-e352-4c17-b930-1f557dd88205"],
Cell[387144, 6943, 60980, 1211, 731, "Output",ExpressionUUID->"2f2ca4fa-ee9d-4cab-b426-28c0caff41a9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[448161, 8159, 627, 14, 113, "Input",ExpressionUUID->"ff1f560d-c5ab-4bbe-be40-67800a53eac2"],
Cell[448791, 8175, 11121, 219, 113, "Output",ExpressionUUID->"2280ef6d-97fa-42ee-bba1-d7ddea5e4fb3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[459949, 8399, 664, 17, 113, "Input",ExpressionUUID->"f94b15cd-b27f-4f3a-8b0e-c17093b6af9c"],
Cell[460616, 8418, 10703, 211, 113, "Output",ExpressionUUID->"8524812d-871d-41d4-83cb-67e4260d1783"]
}, Open  ]],
Cell[CellGroupData[{
Cell[471356, 8634, 144, 2, 37, "Input",ExpressionUUID->"e9b264e1-cf5e-438f-884c-c8d03c9dcd99"],
Cell[471503, 8638, 169662, 3453, 729, "Output",ExpressionUUID->"7c88d533-8874-4c87-b3a5-c182e8da5340"]
}, Open  ]],
Cell[CellGroupData[{
Cell[641202, 12096, 644, 13, 37, "Input",ExpressionUUID->"21981a01-c33e-4d83-8d00-025880b9e550"],
Cell[641849, 12111, 56366, 1028, 113, "Output",ExpressionUUID->"2209d5d7-43ba-4864-bf66-02174cf56c25"]
}, Open  ]],
Cell[CellGroupData[{
Cell[698252, 13144, 846, 20, 138, "Input",ExpressionUUID->"39d749d6-13e5-4f63-92dc-5fdc6f89bb97"],
Cell[699101, 13166, 10825, 213, 113, "Output",ExpressionUUID->"dbc591d1-9334-4d3f-9978-74eec69829df"]
}, Open  ]],
Cell[CellGroupData[{
Cell[709963, 13384, 207, 3, 37, "Input",ExpressionUUID->"1cb413ac-bc1e-4509-928f-1c48e2174704"],
Cell[710173, 13389, 141777, 2887, 729, "Output",ExpressionUUID->"2731c2b5-b153-4c6a-bc91-8d4cc787860f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[851987, 16281, 561, 13, 88, "Input",ExpressionUUID->"b5a462e4-156f-41c2-8fbe-00326ed458a8"],
Cell[852551, 16296, 238617, 4049, 88, "Output",ExpressionUUID->"4496406f-351c-46f4-86d9-0316c10eca99"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1091205, 20350, 222, 5, 37, "Input",ExpressionUUID->"f59f7c66-e5f2-4314-974e-cba5a4a6f06d"],
Cell[1091430, 20357, 12619, 250, 88, "Output",ExpressionUUID->"8009f4c8-c4cf-4c8b-9e75-ce591f0eb12d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1104086, 20612, 768, 17, 138, "Input",ExpressionUUID->"3cdbafa5-42f7-483c-bd1d-c0cb13092659"],
Cell[1104857, 20631, 11124, 219, 113, "Output",ExpressionUUID->"0c7e29f6-c700-4633-a5ca-c6e4b40afed5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1116018, 20855, 742, 18, 113, "Input",ExpressionUUID->"92abf520-3235-44e9-a44a-328bc7e567fa"],
Cell[1116763, 20875, 10729, 212, 146, "Output",ExpressionUUID->"4e80ebf6-5189-41e1-bb3e-e86777744ebd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1127529, 21092, 209, 3, 37, "Input",ExpressionUUID->"e077b2b3-cc8f-40db-ac72-4fae39635dfb"],
Cell[1127741, 21097, 170112, 3457, 725, "Output",ExpressionUUID->"b2c64164-00cd-4783-bc61-a15321acc207"]
}, Open  ]],
Cell[1297868, 24557, 294, 6, 37, "Input",ExpressionUUID->"c34bbfa5-c7af-431e-bf99-23fe17b7e942"],
Cell[1298165, 24565, 507, 13, 37, "Input",ExpressionUUID->"abbb3667-9992-4cd7-8f85-7408f16549dc"],
Cell[CellGroupData[{
Cell[1298697, 24582, 561, 14, 37, "Input",ExpressionUUID->"479130a6-a20e-48b6-a4b8-d82f665d3650"],
Cell[1299261, 24598, 241, 4, 43, "Output",ExpressionUUID->"9d3ec640-d8a1-4395-83f2-43f119e40b69"]
}, Open  ]]
}
]
*)

